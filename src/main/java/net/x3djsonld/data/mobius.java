package net.x3djsonld.data;

import org.web3d.x3d.jsail.Core.*;
import org.web3d.x3d.jsail.EnvironmentalEffects.*;
import org.web3d.x3d.jsail.fields.*;
import org.web3d.x3d.jsail.Grouping.*;
import org.web3d.x3d.jsail.NURBS.*;
import org.web3d.x3d.jsail.Rendering.*;
import org.web3d.x3d.jsail.Shape.*;

// Javadoc metadata annotations follow, see below for X3DJSAIL Java source code.
/**
 * <p> a mobius of 3 NURBS Patch Surfaces. </p>
 <p> Related links:  source mobius.java, <a href="https://www.web3d.org/x3d/content/examples/X3dResources.html" target="_blank">X3D Resources</a>, <a href="https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html" target="_blank">X3D Scene Authoring Hints</a>, and <a href="https://www.web3d.org/x3d/content/X3dTooltips.html" target="_blank">X3D Tooltips</a>. </p>
	<table style="color:black; border:0px solid; border-spacing:10px 0px;">
        <caption>Scene Meta Information</caption>
		<tr style="background-color:silver; border-color:silver;">
			<td style="text-align:center; padding:10px 0px;"><i>meta tags</i></td>
			<td style="text-align:left;   padding:10px 0px;">net.x3djsonld.data.mobius&nbsp; Document Metadata </td>
		</tr>

		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> title </i> </td>
			<td> <a href="https://kshell.com/mobius.x3d">mobius.x3d</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> creator </i> </td>
			<td> Vince Marchetti </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
			<td> manual </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> identifier </i> </td>
			<td> <a href="https://kshell.com/mobius.x3d" target="_blank">https://kshell.com/mobius.x3d</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> description </i> </td>
			<td> a mobius of 3 NURBS Patch Surfaces </td>
		</tr>
		<tr style="background-color:silver; border-color:silver;">
			<td style="text-align:center;" colspan="2">  &nbsp; </td>
		</tr>
	</table>

	<p>
		This program uses the
		<a href="https://www.web3d.org/specifications/java/X3DJSAIL.html" target="_blank">X3D Java Scene Access Interface Library (X3DJSAIL)</a>.
		It has been produced using the 
		<a href="https://www.web3d.org/x3d/stylesheets/X3dToJava.xslt" target="_blank">X3dToJava.xslt</a>
		stylesheet
	       (<a href="https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/X3dToJava.xslt" target="_blank">version control</a>)
                which is used to create Java source code from an original <code>.x3d</code> model.
	</p>

	* @author Vince Marchetti
 */

public class mobius
{
	/** Default constructor to create this object. */
	public mobius ()
	{
	  initialize();
	}

	/** Create and initialize the X3D model for this object. */
	public final void initialize()
	{
            try { // catch-all
  x3dModel = new X3D().setProfile(X3D.PROFILE_INTERCHANGE).setVersion(X3D.VERSION_4_0)
  .setHead(new head()
    .addUnit(new unit().setName("millimeters").setCategory("length").setConversionFactor(25.4))
    .addComponent(new component().setName("NURBS").setLevel(4))
    .addComponent(new component().setName("Shape").setLevel(2))
    .addMeta(new meta().setName(meta.NAME_TITLE      ).setContent("mobius.x3d"))
    .addMeta(new meta().setName(meta.NAME_CREATOR    ).setContent("Vince Marchetti"))
    .addMeta(new meta().setName(meta.NAME_GENERATOR  ).setContent("manual"))
    .addMeta(new meta().setName(meta.NAME_IDENTIFIER ).setContent("https://kshell.com/mobius.x3d"))
    .addMeta(new meta().setName(meta.NAME_DESCRIPTION).setContent("a mobius of 3 NURBS Patch Surfaces")))
  .setScene(new Scene()
    .addChild(new Background().setSkyColor(new MFColor(new double[] {1.000000,1.000000,1.000000})))
    .addChild(new Shape()
      .setGeometry(new NurbsPatchSurface().setSolid(false).setUDimension(91).setUKnot(getNurbsPatchSurface_4_11_uKnot()).setUOrder(4).setVDimension(3).setVKnot(new double[] {0.0,0.0,0.0,1.0,1.0,1.0}).setWeight(getNurbsPatchSurface_4_11_weight())
        .setControlPoint(new Coordinate().setPoint(getCoordinate_5_11_point()))
        .setMetadata(new MetadataSet()
          .setMetadata(new MetadataString().setName("INSTANT_PLAYER_MODE").setValue(new String[] {"True"}))))
      .setAppearance(new Appearance("ksh_appearance_1")
        .setMaterial(new Material().setDiffuseColor(0.000000,0.000000,1.000000))))
    .addChild(new Shape()
      .setGeometry(new NurbsPatchSurface().setSolid(false).setUDimension(91).setUKnot(getNurbsPatchSurface_4_18_uKnot()).setUOrder(4).setVDimension(3).setVKnot(new double[] {0.0,0.0,0.0,1.0,1.0,1.0}).setWeight(getNurbsPatchSurface_4_18_weight())
        .setControlPoint(new Coordinate().setPoint(getCoordinate_5_18_point()))
        .setMetadata(new MetadataSet()
          .setMetadata(new MetadataString().setName("INSTANT_PLAYER_MODE").setValue(new String[] {"True"}))))
      .setAppearance(new Appearance("ksh_appearance_2")
        .setMaterial(new Material().setDiffuseColor(0.000000,0.000000,1.000000))))
    .addChild(new Shape()
      .setGeometry(new NurbsPatchSurface().setSolid(false).setUDimension(91).setUKnot(getNurbsPatchSurface_4_25_uKnot()).setUOrder(4).setVDimension(3).setVKnot(new double[] {0.0,0.0,0.0,1.0,1.0,1.0}).setWeight(getNurbsPatchSurface_4_25_weight())
        .setControlPoint(new Coordinate().setPoint(getCoordinate_5_25_point()))
        .setMetadata(new MetadataSet()
          .setMetadata(new MetadataString().setName("INSTANT_PLAYER_MODE").setValue(new String[] {"True"}))))
      .setAppearance(new Appearance("ksh_appearance_3")
        .setMaterial(new Material().setDiffuseColor(0.000000,0.000000,1.000000))))
    .addChild(new Group("triad")
      .addChild(new Shape()
        .setGeometry(new LineSet().setVertexCount(new int[] {2})
          .setCoord(new Coordinate().setPoint(new MFVec3f(new double[] {0.0,0.0,0.0,1.0,0.0,0.0}))))
        .setAppearance(new Appearance()
          .setMaterial(new Material().setEmissiveColor(1.0,0.0,0.0))
          .setLineProperties(new LineProperties().setLinewidthScaleFactor(2)
            .addComments("linetype='1'  solid"))))
      .addChild(new Shape()
        .setGeometry(new LineSet().setVertexCount(new int[] {2})
          .setCoord(new Coordinate().setPoint(new MFVec3f(new double[] {0.0,0.0,0.0,0.0,1.0,0.0}))))
        .setAppearance(new Appearance()
          .setMaterial(new Material().setEmissiveColor(0.0,1.0,0.0))
          .setLineProperties(new LineProperties().setLinewidthScaleFactor(2)
            .addComments("linetype='1'  solid"))))
      .addChild(new Shape()
        .setGeometry(new LineSet().setVertexCount(new int[] {2})
          .setCoord(new Coordinate().setPoint(new MFVec3f(new double[] {0.0,0.0,0.0,0.0,0.0,1.0}))))
        .setAppearance(new Appearance()
          .setMaterial(new Material().setEmissiveColor(0.0,0.0,1.0))
          .setLineProperties(new LineProperties().setLinewidthScaleFactor(2)
            .addComments("linetype='1'  solid"))))));
            }
            catch (Exception ex)
            {       
                System.err.println ("*** Further hints on X3DJSAIL errors and exceptions at");
                System.err.println ("*** https://www.web3d.org/specifications/java/X3DJSAIL.html");
                throw (ex);
            }
	}
	// end of initialize() method

		/** Define subarrays using type double[] */
		private double[] getNurbsPatchSurface_4_11_weight_1()
		{
			double[] value = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
			return value;
		}
		private double[] getNurbsPatchSurface_4_11_weight_2()
		{
			double[] value = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
			return value;
		}
		private double[] getNurbsPatchSurface_4_11_weight_3()
		{
			double[] value = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
			return value;
		}



		/** Define subarrays using type double[] */
		private double[] getCoordinate_5_11_point_1()
		{
			double[] value = {1.4000e+01,-3.4641e+00,0.0000e+00,1.3919e+01,-3.3245e+00,1.3963e+00,1.3831e+01,-3.1820e+00,1.5125e+00,1.3472e+01,-3.0371e+00,2.8636e+00,1.3113e+01,-2.8922e+00,4.2146e+00,1.3026e+01,-2.7448e+00,4.2710e+00,1.2403e+01,-2.5954e+00,5.5220e+00,1.1779e+01,-2.4459e+00,6.7730e+00,1.1711e+01,-2.2943e+00,6.7824e+00,1.0850e+01,-2.1409e+00,7.8827e+00,9.9886e+00,-1.9876e+00,8.9830e+00,9.9482e+00,-1.8325e+00,8.9619e+00,8.8844e+00,-1.6761e+00,9.8672e+00,7.8207e+00,-1.5196e+00,1.0772e+01,7.8117e+00,-1.3618e+00,1.0738e+01,6.5885e+00,-1.2031e+00,1.1412e+01,5.3653e+00,-1.0443e+00,1.2086e+01,5.3843e+00,-8.8454e-01,1.2053e+01,4.0511e+00,-7.2419e-01,1.2468e+01,2.7180e+00,-5.6385e-01,1.2884e+01,2.7560e+00,-4.0292e-01,1.2864e+01,1.3668e+00,-2.4179e-01,1.3004e+01,-2.2387e-02,-8.0662e-02,1.3145e+01,2.2387e-02,8.0662e-02,1.3145e+01,-1.3668e+00,2.4179e-01,1.3004e+01,-2.7560e+00,4.0292e-01,1.2864e+01,-2.7180e+00,5.6385e-01,1.2884e+01,-4.0511e+00,7.2419e-01,1.2468e+01,-5.3843e+00,8.8454e-01,1.2053e+01,-5.3653e+00,1.0443e+00,1.2086e+01,-6.5885e+00,1.2031e+00,1.1412e+01,-7.8117e+00,1.3618e+00,1.0738e+01,-7.8207e+00,1.5196e+00,1.0772e+01,-8.8844e+00,1.6761e+00,9.8672e+00,-9.9482e+00,1.8325e+00,8.9619e+00,-9.9886e+00,1.9876e+00,8.9830e+00,-1.0850e+01,2.1409e+00,7.8827e+00,-1.1711e+01,2.2943e+00,6.7824e+00,-1.1779e+01,2.4459e+00,6.7730e+00,-1.2403e+01,2.5954e+00,5.5220e+00,-1.3026e+01,2.7448e+00,4.2710e+00,-1.3113e+01,2.8922e+00,4.2146e+00,-1.3472e+01,3.0371e+00,2.8636e+00,-1.3831e+01,3.1820e+00,1.5125e+00,-1.3919e+01,3.3245e+00,1.3963e+00,-1.4000e+01,3.4641e+00,1.7145e-15,-1.4081e+01,3.6037e+00,-1.3963e+00,-1.4147e+01,3.7405e+00,-1.5795e+00,-1.3945e+01,3.8742e+00,-2.9640e+00,-1.3743e+01,4.0079e+00,-4.3485e+00,-1.3761e+01,4.1384e+00,-4.5982e+00,-1.3283e+01,4.2654e+00,-5.9142e+00,-1.2806e+01,4.3925e+00,-7.2301e+00,-1.2748e+01,4.5161e+00,-7.5364e+00,-1.2015e+01,4.6359e+00,-8.7294e+00,-1.1282e+01,4.7557e+00,-9.9224e+00,-1.1122e+01,4.8717e+00,-1.0266e+01,-1.0162e+01,4.9837e+00,-1.1286e+01,-9.2022e+00,5.0957e+00,-1.2307e+01,-8.9208e+00,5.2037e+00,-1.2659e+01,-7.7733e+00,5.3073e+00,-1.3464e+01,-6.6259e+00,5.4109e+00,-1.4269e+01,-6.2096e+00,5.5103e+00,-1.4593e+01,-4.9219e+00,5.6050e+00,-1.5148e+01,-3.6343e+00,5.6998e+00,-1.5704e+01,-3.0811e+00,5.7900e+00,-1.5957e+01,-1.7068e+00,5.8754e+00,-1.6239e+01,-3.3248e-01,5.9609e+00,-1.6521e+01,3.4709e-01,6.0415e+00,-1.6660e+01,1.7506e+00,6.1172e+00,-1.6656e+01,3.1541e+00,6.1929e+00,-1.6651e+01,3.9361e+00,6.2637e+00,-1.6632e+01,5.3095e+00,6.3292e+00,-1.6341e+01,6.6830e+00,6.3948e+00,-1.6050e+01,7.5303e+00,6.4552e+00,-1.5835e+01,8.8152e+00,6.5104e+00,-1.5268e+01,1.0100e+01,6.5655e+00,-1.4701e+01,1.0963e+01,6.6154e+00,-1.4263e+01,1.2105e+01,6.6598e+00,-1.3444e+01,1.3246e+01,6.7043e+00,-1.2625e+01,1.4067e+01,6.7433e+00,-1.1946e+01,1.5015e+01,6.7768e+00,-1.0909e+01,1.5963e+01,6.8103e+00,-9.8721e+00,1.6676e+01,6.8383e+00,-8.9532e+00,1.7390e+01,6.8608e+00,-7.7425e+00,1.8104e+01,6.8832e+00,-6.5319e+00,1.8643e+01,6.9001e+00,-5.3901e+00,1.9090e+01,6.9113e+00,-4.0578e+00,1.9538e+01,6.9226e+00,-2.7254e+00,1.9839e+01,6.9282e+00,-1.3963e+00,2.0000e+01,6.9282e+00,-4.8986e-15,2.0000e+01,-3.4641e+00,0.0000e+00,1.9960e+01,-3.3595e+00,6.9813e-01,1.9710e+01,-3.0422e+00,2.7620e+00,1.9369e+01,-2.8294e+00,4.1171e+00,1.9029e+01,-2.6165e+00,5.4722e+00,1.8578e+01,-2.4024e+00,6.7430e+00,1.7990e+01,-2.1900e+00,8.0095e+00,1.7402e+01,-1.9776e+00,9.2761e+00,1.6728e+01,-1.7660e+00,1.0428e+01};
			return value;
		}
		private double[] getCoordinate_5_11_point_2()
		{
			double[] value = {1.5912e+01,-1.5581e+00,1.1561e+01,1.5097e+01,-1.3502e+00,1.2694e+01,1.4216e+01,-1.1449e+00,1.3702e+01,1.3201e+01,-9.4527e-01,1.4661e+01,1.2186e+01,-7.4559e-01,1.5621e+01,1.1114e+01,-5.5051e-01,1.6457e+01,9.9340e+00,-3.6265e-01,1.7206e+01,8.7542e+00,-1.7479e-01,1.7955e+01,7.5076e+00,6.7486e-03,1.8588e+01,6.2050e+00,1.7954e-01,1.9097e+01,4.9024e+00,3.5233e-01,1.9607e+01,3.5058e+00,5.1722e-01,1.9998e+01,2.1279e+00,6.7205e-01,2.0246e+01,7.5001e-01,8.2688e-01,2.0494e+01,-7.6173e-01,9.7244e-01,2.0605e+01,-2.1629e+00,1.1068e+00,2.0578e+01,-3.5640e+00,1.2413e+00,2.0551e+01,-5.1427e+00,1.3652e+00,2.0346e+01,-6.5120e+00,1.4772e+00,2.0042e+01,-7.8813e+00,1.5892e+00,1.9738e+01,-9.4645e+00,1.6899e+00,1.9186e+01,-1.0746e+01,1.7780e+00,1.8613e+01,-1.2027e+01,1.8661e+00,1.8039e+01,-1.3540e+01,1.9422e+00,1.7124e+01,-1.4678e+01,2.0054e+00,1.6302e+01,-1.5817e+01,2.0686e+00,1.5480e+01,-1.7173e+01,2.1195e+00,1.4203e+01,-1.8119e+01,2.1574e+00,1.3164e+01,-1.9064e+01,2.1954e+00,1.2125e+01,-2.0174e+01,2.2208e+00,1.0511e+01,-2.0883e+01,2.2336e+00,9.2976e+00,-2.1591e+01,2.2464e+00,8.0844e+00,-2.2368e+01,2.2469e+00,6.1820e+00,-2.2804e+01,2.2352e+00,4.8472e+00,-2.3240e+01,2.2235e+00,3.5125e+00,-2.3609e+01,2.2000e+00,1.3963e+00,-2.3750e+01,2.1651e+00,2.9085e-15,-2.3891e+01,2.1301e+00,-1.3963e+00,-2.3793e+01,2.0840e+00,-3.6298e+00,-2.3629e+01,2.0275e+00,-5.0225e+00,-2.3466e+01,1.9710e+00,-6.4152e+00,-2.2867e+01,1.9042e+00,-8.6529e+00,-2.2405e+01,1.8283e+00,-9.9753e+00,-2.1942e+01,1.7523e+00,-1.1298e+01,-2.0842e+01,1.6674e+00,-1.3417e+01,-2.0101e+01,1.5746e+00,-1.4604e+01,-1.9360e+01,1.4818e+00,-1.5791e+01,-1.7788e+01,1.3813e+00,-1.7669e+01,-1.6803e+01,1.2746e+00,-1.8662e+01,-1.5818e+01,1.1679e+00,-1.9655e+01,-1.3839e+01,1.0550e+00,-2.1177e+01,-1.2659e+01,9.3756e-01,-2.1925e+01,-1.1478e+01,8.2013e-01,-2.2673e+01,-9.1836e+00,6.9820e-01,-2.3746e+01,-7.8665e+00,5.7351e-01,-2.4211e+01,-6.5494e+00,4.4881e-01,-2.4675e+01,-4.0557e+00,3.2137e-01,-2.5230e+01,-2.6683e+00,1.9301e-01,-2.5387e+01,-1.2809e+00,6.4643e-02,-2.5545e+01,1.2809e+00,-6.4643e-02,-2.5545e+01,2.6683e+00,-1.9301e-01,-2.5387e+01,4.0557e+00,-3.2137e-01,-2.5230e+01,6.5494e+00,-4.4881e-01,-2.4675e+01,7.8665e+00,-5.7351e-01,-2.4211e+01,9.1836e+00,-6.9820e-01,-2.3746e+01,1.1478e+01,-8.2013e-01,-2.2673e+01,1.2659e+01,-9.3756e-01,-2.1925e+01,1.3839e+01,-1.0550e+00,-2.1177e+01,1.5818e+01,-1.1679e+00,-1.9655e+01,1.6803e+01,-1.2746e+00,-1.8662e+01,1.7788e+01,-1.3813e+00,-1.7669e+01,1.9360e+01,-1.4818e+00,-1.5791e+01,2.0101e+01,-1.5746e+00,-1.4604e+01,2.0842e+01,-1.6674e+00,-1.3417e+01,2.1942e+01,-1.7523e+00,-1.1298e+01,2.2405e+01,-1.8283e+00,-9.9753e+00,2.2867e+01,-1.9042e+00,-8.6529e+00,2.3466e+01,-1.9710e+00,-6.4152e+00,2.3629e+01,-2.0275e+00,-5.0225e+00,2.3793e+01,-2.0840e+00,-3.6298e+00,2.3891e+01,-2.1301e+00,-1.3963e+00,2.3750e+01,-2.1651e+00,-5.8171e-15,2.6000e+01,-3.4641e+00,0.0000e+00,2.5919e+01,-3.6037e+00,1.3963e+00,2.5560e+01,-3.7405e+00,4.0054e+00,2.5181e+01,-3.8742e+00,5.3524e+00,2.4803e+01,-4.0079e+00,6.6994e+00,2.3917e+01,-4.1384e+00,9.1201e+00,2.3258e+01,-4.2654e+00,1.0355e+01,2.2600e+01,-4.3925e+00,1.1590e+01,2.1254e+01,-4.5161e+00,1.3716e+01,2.0346e+01,-4.6359e+00,1.4782e+01,1.9438e+01,-4.7557e+00,1.5848e+01,1.7718e+01,-4.8717e+00,1.7591e+01,1.6603e+01,-4.9837e+00,1.8439e+01,1.5488e+01,-5.0957e+00,1.9288e+01,1.3498e+01,-5.2037e+00,2.0586e+01,1.2227e+01,-5.3073e+00,2.1177e+01,1.0956e+01,-5.4109e+00,2.1768e+01,8.8070e+00,-5.5103e+00,2.2587e+01};
			return value;
		}
		private double[] getCoordinate_5_11_point_3()
		{
			double[] value = {7.4387e+00,-5.6050e+00,2.2894e+01,6.0705e+00,-5.6998e+00,2.3202e+01,3.8772e+00,-5.7900e+00,2.3532e+01,2.4743e+00,-5.8754e+00,2.3542e+01,1.0714e+00,-5.9609e+00,2.3552e+01,-1.0568e+00,-6.0415e+00,2.3413e+01,-2.4306e+00,-6.1172e+00,2.3125e+01,-3.8043e+00,-6.1929e+00,2.2838e+01,-5.7687e+00,-6.2637e+00,2.2273e+01,-7.0511e+00,-6.3292e+00,2.1701e+01,-8.3335e+00,-6.3948e+00,2.1130e+01,-1.0051e+01,-6.4552e+00,2.0202e+01,-1.1185e+01,-6.5104e+00,1.9373e+01,-1.2318e+01,-6.5655e+00,1.8543e+01,-1.3727e+01,-6.6154e+00,1.7332e+01,-1.4660e+01,-6.6598e+00,1.6282e+01,-1.5594e+01,-6.7043e+00,1.5233e+01,-1.6653e+01,-6.7433e+00,1.3825e+01,-1.7346e+01,-6.7768e+00,1.2602e+01,-1.8039e+01,-6.8103e+00,1.1380e+01,-1.8730e+01,-6.8383e+00,9.8674e+00,-1.9152e+01,-6.8608e+00,8.5269e+00,-1.9574e+01,-6.8832e+00,7.1864e+00,-1.9903e+01,-6.9001e+00,5.6579e+00,-2.0036e+01,-6.9113e+00,4.2587e+00,-2.0169e+01,-6.9226e+00,2.8595e+00,-2.0161e+01,-6.9282e+00,1.3963e+00,-2.0000e+01,-6.9282e+00,2.4493e-15,-1.9839e+01,-6.9282e+00,-1.3963e+00,-1.9538e+01,-6.9226e+00,-2.7254e+00,-1.9090e+01,-6.9113e+00,-4.0578e+00,-1.8643e+01,-6.9001e+00,-5.3901e+00,-1.8104e+01,-6.8832e+00,-6.5319e+00,-1.7390e+01,-6.8608e+00,-7.7425e+00,-1.6676e+01,-6.8383e+00,-8.9532e+00,-1.5963e+01,-6.8103e+00,-9.8721e+00,-1.5015e+01,-6.7768e+00,-1.0909e+01,-1.4067e+01,-6.7433e+00,-1.1946e+01,-1.3246e+01,-6.7043e+00,-1.2625e+01,-1.2105e+01,-6.6598e+00,-1.3444e+01,-1.0963e+01,-6.6154e+00,-1.4263e+01,-1.0100e+01,-6.5655e+00,-1.4701e+01,-8.8152e+00,-6.5104e+00,-1.5268e+01,-7.5303e+00,-6.4552e+00,-1.5835e+01,-6.6830e+00,-6.3948e+00,-1.6050e+01,-5.3095e+00,-6.3292e+00,-1.6341e+01,-3.9361e+00,-6.2637e+00,-1.6632e+01,-3.1541e+00,-6.1929e+00,-1.6651e+01,-1.7506e+00,-6.1172e+00,-1.6656e+01,-3.4709e-01,-6.0415e+00,-1.6660e+01,3.3248e-01,-5.9609e+00,-1.6521e+01,1.7068e+00,-5.8754e+00,-1.6239e+01,3.0811e+00,-5.7900e+00,-1.5957e+01,3.6343e+00,-5.6998e+00,-1.5704e+01,4.9219e+00,-5.6050e+00,-1.5148e+01,6.2096e+00,-5.5103e+00,-1.4593e+01,6.6259e+00,-5.4109e+00,-1.4269e+01,7.7733e+00,-5.3073e+00,-1.3464e+01,8.9208e+00,-5.2037e+00,-1.2659e+01,9.2022e+00,-5.0957e+00,-1.2307e+01,1.0162e+01,-4.9837e+00,-1.1286e+01,1.1122e+01,-4.8717e+00,-1.0266e+01,1.1282e+01,-4.7557e+00,-9.9224e+00,1.2015e+01,-4.6359e+00,-8.7294e+00,1.2748e+01,-4.5161e+00,-7.5364e+00,1.2806e+01,-4.3925e+00,-7.2301e+00,1.3283e+01,-4.2654e+00,-5.9142e+00,1.3761e+01,-4.1384e+00,-4.5982e+00,1.3743e+01,-4.0079e+00,-4.3485e+00,1.3945e+01,-3.8742e+00,-2.9640e+00,1.4147e+01,-3.7405e+00,-1.5795e+00,1.4081e+01,-3.6037e+00,-1.3963e+00,1.4000e+01,-3.4641e+00,-3.4290e-15};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getNurbsPatchSurface_4_18_weight_1()
		{
			double[] value = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
			return value;
		}
		private double[] getNurbsPatchSurface_4_18_weight_2()
		{
			double[] value = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
			return value;
		}
		private double[] getNurbsPatchSurface_4_18_weight_3()
		{
			double[] value = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
			return value;
		}



		/** Define subarrays using type double[] */
		private double[] getCoordinate_5_18_point_1()
		{
			double[] value = {2.0000e+01,6.9282e+00,0.0000e+00,2.0161e+01,6.9282e+00,1.3963e+00,2.0169e+01,6.9226e+00,2.8595e+00,2.0036e+01,6.9113e+00,4.2587e+00,1.9903e+01,6.9001e+00,5.6579e+00,1.9574e+01,6.8832e+00,7.1864e+00,1.9152e+01,6.8608e+00,8.5269e+00,1.8730e+01,6.8383e+00,9.8674e+00,1.8039e+01,6.8103e+00,1.1380e+01,1.7346e+01,6.7768e+00,1.2602e+01,1.6653e+01,6.7433e+00,1.3825e+01,1.5594e+01,6.7043e+00,1.5233e+01,1.4660e+01,6.6598e+00,1.6282e+01,1.3727e+01,6.6154e+00,1.7332e+01,1.2318e+01,6.5655e+00,1.8543e+01,1.1185e+01,6.5104e+00,1.9373e+01,1.0051e+01,6.4552e+00,2.0202e+01,8.3335e+00,6.3948e+00,2.1130e+01,7.0511e+00,6.3292e+00,2.1701e+01,5.7687e+00,6.2637e+00,2.2273e+01,3.8043e+00,6.1929e+00,2.2838e+01,2.4306e+00,6.1172e+00,2.3125e+01,1.0568e+00,6.0415e+00,2.3413e+01,-1.0714e+00,5.9609e+00,2.3552e+01,-2.4743e+00,5.8754e+00,2.3542e+01,-3.8772e+00,5.7900e+00,2.3532e+01,-6.0705e+00,5.6998e+00,2.3202e+01,-7.4387e+00,5.6050e+00,2.2894e+01,-8.8070e+00,5.5103e+00,2.2587e+01,-1.0956e+01,5.4109e+00,2.1768e+01,-1.2227e+01,5.3073e+00,2.1177e+01,-1.3498e+01,5.2037e+00,2.0586e+01,-1.5488e+01,5.0957e+00,1.9288e+01,-1.6603e+01,4.9837e+00,1.8439e+01,-1.7718e+01,4.8717e+00,1.7591e+01,-1.9438e+01,4.7557e+00,1.5848e+01,-2.0346e+01,4.6359e+00,1.4782e+01,-2.1254e+01,4.5161e+00,1.3716e+01,-2.2600e+01,4.3925e+00,1.1590e+01,-2.3258e+01,4.2654e+00,1.0355e+01,-2.3917e+01,4.1384e+00,9.1201e+00,-2.4803e+01,4.0079e+00,6.6994e+00,-2.5181e+01,3.8742e+00,5.3524e+00,-2.5560e+01,3.7405e+00,4.0054e+00,-2.5919e+01,3.6037e+00,1.3963e+00,-2.6000e+01,3.4641e+00,2.6277e-14,-2.6081e+01,3.3245e+00,-1.3963e+00,-2.5875e+01,3.1820e+00,-4.0725e+00,-2.5654e+01,3.0371e+00,-5.4529e+00,-2.5433e+01,2.8922e+00,-6.8334e+00,-2.4652e+01,2.7448e+00,-9.4474e+00,-2.4139e+01,2.5954e+00,-1.0747e+01,-2.3627e+01,2.4459e+00,-1.2048e+01,-2.2291e+01,2.2943e+00,-1.4470e+01,-2.1511e+01,2.1409e+00,-1.5629e+01,-2.0731e+01,1.9876e+00,-1.6788e+01,-1.8892e+01,1.8325e+00,-1.8895e+01,-1.7881e+01,1.6761e+00,-1.9859e+01,-1.6869e+01,1.5196e+00,-2.0822e+01,-1.4607e+01,1.3618e+00,-2.2507e+01,-1.3411e+01,1.2031e+00,-2.3229e+01,-1.2216e+01,1.0443e+00,-2.3952e+01,-9.6323e+00,8.8454e-01,-2.5127e+01,-8.3095e+00,7.2419e-01,-2.5574e+01,-6.9868e+00,5.6385e-01,-2.6022e+01,-4.2023e+00,4.0292e-01,-2.6625e+01,-2.8143e+00,2.4179e-01,-2.6776e+01,-1.4263e+00,8.0662e-02,-2.6928e+01,1.4263e+00,-8.0662e-02,-2.6928e+01,2.8143e+00,-2.4179e-01,-2.6776e+01,4.2023e+00,-4.0292e-01,-2.6625e+01,6.9868e+00,-5.6385e-01,-2.6022e+01,8.3095e+00,-7.2419e-01,-2.5574e+01,9.6323e+00,-8.8454e-01,-2.5127e+01,1.2216e+01,-1.0443e+00,-2.3952e+01,1.3411e+01,-1.2031e+00,-2.3229e+01,1.4607e+01,-1.3618e+00,-2.2507e+01,1.6869e+01,-1.5196e+00,-2.0822e+01,1.7881e+01,-1.6761e+00,-1.9859e+01,1.8892e+01,-1.8325e+00,-1.8895e+01,2.0731e+01,-1.9876e+00,-1.6788e+01,2.1511e+01,-2.1409e+00,-1.5629e+01,2.2291e+01,-2.2943e+00,-1.4470e+01,2.3627e+01,-2.4459e+00,-1.2048e+01,2.4139e+01,-2.5954e+00,-1.0747e+01,2.4652e+01,-2.7448e+00,-9.4474e+00,2.5433e+01,-2.8922e+00,-6.8334e+00,2.5654e+01,-3.0371e+00,-5.4529e+00,2.5875e+01,-3.1820e+00,-4.0725e+00,2.6081e+01,-3.3245e+00,-1.3963e+00,2.6000e+01,-3.4641e+00,-6.3682e-15,2.3750e+01,-2.1651e+00,0.0000e+00,2.3609e+01,-2.2000e+00,1.3963e+00,2.3240e+01,-2.2235e+00,3.5125e+00,2.2804e+01,-2.2352e+00,4.8472e+00,2.2368e+01,-2.2469e+00,6.1820e+00,2.1591e+01,-2.2464e+00,8.0844e+00,2.0883e+01,-2.2336e+00,9.2976e+00,2.0174e+01,-2.2208e+00,1.0511e+01,1.9064e+01,-2.1954e+00,1.2125e+01};
			return value;
		}
		private double[] getCoordinate_5_18_point_2()
		{
			double[] value = {1.8119e+01,-2.1574e+00,1.3164e+01,1.7173e+01,-2.1195e+00,1.4203e+01,1.5817e+01,-2.0686e+00,1.5480e+01,1.4678e+01,-2.0054e+00,1.6302e+01,1.3540e+01,-1.9422e+00,1.7124e+01,1.2027e+01,-1.8661e+00,1.8039e+01,1.0746e+01,-1.7780e+00,1.8613e+01,9.4645e+00,-1.6899e+00,1.9186e+01,7.8813e+00,-1.5892e+00,1.9738e+01,6.5120e+00,-1.4772e+00,2.0042e+01,5.1427e+00,-1.3652e+00,2.0346e+01,3.5640e+00,-1.2413e+00,2.0551e+01,2.1629e+00,-1.1068e+00,2.0578e+01,7.6173e-01,-9.7244e-01,2.0605e+01,-7.5001e-01,-8.2688e-01,2.0494e+01,-2.1279e+00,-6.7205e-01,2.0246e+01,-3.5058e+00,-5.1722e-01,1.9998e+01,-4.9024e+00,-3.5233e-01,1.9607e+01,-6.2050e+00,-1.7954e-01,1.9097e+01,-7.5076e+00,-6.7486e-03,1.8588e+01,-8.7542e+00,1.7479e-01,1.7955e+01,-9.9340e+00,3.6265e-01,1.7206e+01,-1.1114e+01,5.5051e-01,1.6457e+01,-1.2186e+01,7.4559e-01,1.5621e+01,-1.3201e+01,9.4527e-01,1.4661e+01,-1.4216e+01,1.1449e+00,1.3702e+01,-1.5097e+01,1.3502e+00,1.2694e+01,-1.5912e+01,1.5581e+00,1.1561e+01,-1.6728e+01,1.7660e+00,1.0428e+01,-1.7402e+01,1.9776e+00,9.2761e+00,-1.7990e+01,2.1900e+00,8.0095e+00,-1.8578e+01,2.4024e+00,6.7430e+00,-1.9029e+01,2.6165e+00,5.4722e+00,-1.9369e+01,2.8294e+00,4.1171e+00,-1.9710e+01,3.0422e+00,2.7620e+00,-1.9919e+01,3.2548e+00,1.3963e+00,-2.0000e+01,3.4641e+00,2.0213e-14,-2.0081e+01,3.6734e+00,-1.3963e+00,-2.0025e+01,3.8803e+00,-2.8291e+00,-1.9842e+01,4.0819e+00,-4.2176e+00,-1.9659e+01,4.2836e+00,-5.6061e+00,-1.9313e+01,4.4808e+00,-7.0702e+00,-1.8871e+01,4.6708e+00,-8.4017e+00,-1.8428e+01,4.8607e+00,-9.7332e+00,-1.7766e+01,5.0443e+00,-1.1182e+01,-1.7078e+01,5.2187e+00,-1.2408e+01,-1.6390e+01,5.3931e+00,-1.3634e+01,-1.5391e+01,5.5593e+00,-1.5006e+01,-1.4479e+01,5.7145e+00,-1.6081e+01,-1.3568e+01,5.8698e+00,-1.7155e+01,-1.2223e+01,6.0150e+00,-1.8378e+01,-1.1119e+01,6.1477e+00,-1.9258e+01,-1.0015e+01,6.2805e+00,-2.0139e+01,-8.3329e+00,6.4016e+00,-2.1128e+01,-7.0758e+00,6.5088e+00,-2.1777e+01,-5.8187e+00,6.6160e+00,-2.2427e+01,-3.8309e+00,6.7102e+00,-2.3091e+01,-2.4679e+00,6.7893e+00,-2.3481e+01,-1.1049e+00,6.8684e+00,-2.3870e+01,1.1312e+00,6.9333e+00,-2.4120e+01,2.5466e+00,6.9823e+00,-2.4230e+01,3.9621e+00,7.0313e+00,-2.4339e+01,6.3608e+00,7.0650e+00,-2.4095e+01,7.7704e+00,7.0823e+00,-2.3915e+01,9.1800e+00,7.0995e+00,-2.3735e+01,1.1629e+01,7.1008e+00,-2.2935e+01,1.2973e+01,7.0853e+00,-2.2469e+01,1.4316e+01,7.0697e+00,-2.2003e+01,1.6682e+01,7.0379e+00,-2.0614e+01,1.7899e+01,6.9891e+00,-1.9879e+01,1.9115e+01,6.9403e+00,-1.9143e+01,2.1251e+01,6.8752e+00,-1.7166e+01,2.2284e+01,6.7933e+00,-1.6190e+01,2.3317e+01,6.7114e+00,-1.5215e+01,2.5071e+01,6.6133e+00,-1.2691e+01,2.5870e+01,6.4990e+00,-1.1518e+01,2.6669e+01,6.3848e+00,-1.0345e+01,2.7898e+01,6.2548e+00,-7.3574e+00,2.8423e+01,6.1094e+00,-6.0414e+00,2.8947e+01,5.9641e+00,-4.7254e+00,2.9528e+01,5.8037e+00,-1.3963e+00,2.9750e+01,5.6292e+00,-7.2866e-15,1.4000e+01,-3.4641e+00,0.0000e+00,1.3919e+01,-3.3245e+00,1.3963e+00,1.3831e+01,-3.1820e+00,1.5125e+00,1.3472e+01,-3.0371e+00,2.8636e+00,1.3113e+01,-2.8922e+00,4.2146e+00,1.3026e+01,-2.7448e+00,4.2710e+00,1.2403e+01,-2.5954e+00,5.5220e+00,1.1779e+01,-2.4459e+00,6.7730e+00,1.1711e+01,-2.2943e+00,6.7824e+00,1.0850e+01,-2.1409e+00,7.8827e+00,9.9886e+00,-1.9876e+00,8.9830e+00,9.9482e+00,-1.8325e+00,8.9619e+00,8.8844e+00,-1.6761e+00,9.8672e+00,7.8207e+00,-1.5196e+00,1.0772e+01,7.8117e+00,-1.3618e+00,1.0738e+01,6.5885e+00,-1.2031e+00,1.1412e+01,5.3653e+00,-1.0443e+00,1.2086e+01,5.3843e+00,-8.8454e-01,1.2053e+01};
			return value;
		}
		private double[] getCoordinate_5_18_point_3()
		{
			double[] value = {4.0511e+00,-7.2419e-01,1.2468e+01,2.7180e+00,-5.6385e-01,1.2884e+01,2.7560e+00,-4.0292e-01,1.2864e+01,1.3668e+00,-2.4179e-01,1.3004e+01,-2.2387e-02,-8.0662e-02,1.3145e+01,2.2387e-02,8.0662e-02,1.3145e+01,-1.3668e+00,2.4179e-01,1.3004e+01,-2.7560e+00,4.0292e-01,1.2864e+01,-2.7180e+00,5.6385e-01,1.2884e+01,-4.0511e+00,7.2419e-01,1.2468e+01,-5.3843e+00,8.8454e-01,1.2053e+01,-5.3653e+00,1.0443e+00,1.2086e+01,-6.5885e+00,1.2031e+00,1.1412e+01,-7.8117e+00,1.3618e+00,1.0738e+01,-7.8207e+00,1.5196e+00,1.0772e+01,-8.8844e+00,1.6761e+00,9.8672e+00,-9.9482e+00,1.8325e+00,8.9619e+00,-9.9886e+00,1.9876e+00,8.9830e+00,-1.0850e+01,2.1409e+00,7.8827e+00,-1.1711e+01,2.2943e+00,6.7824e+00,-1.1779e+01,2.4459e+00,6.7730e+00,-1.2403e+01,2.5954e+00,5.5220e+00,-1.3026e+01,2.7448e+00,4.2710e+00,-1.3113e+01,2.8922e+00,4.2146e+00,-1.3472e+01,3.0371e+00,2.8636e+00,-1.3831e+01,3.1820e+00,1.5125e+00,-1.3919e+01,3.3245e+00,1.3963e+00,-1.4000e+01,3.4641e+00,1.4149e-14,-1.4081e+01,3.6037e+00,-1.3963e+00,-1.4147e+01,3.7405e+00,-1.5795e+00,-1.3945e+01,3.8742e+00,-2.9640e+00,-1.3743e+01,4.0079e+00,-4.3485e+00,-1.3761e+01,4.1384e+00,-4.5982e+00,-1.3283e+01,4.2654e+00,-5.9142e+00,-1.2806e+01,4.3925e+00,-7.2301e+00,-1.2748e+01,4.5161e+00,-7.5364e+00,-1.2015e+01,4.6359e+00,-8.7294e+00,-1.1282e+01,4.7557e+00,-9.9224e+00,-1.1122e+01,4.8717e+00,-1.0266e+01,-1.0162e+01,4.9837e+00,-1.1286e+01,-9.2022e+00,5.0957e+00,-1.2307e+01,-8.9208e+00,5.2037e+00,-1.2659e+01,-7.7733e+00,5.3073e+00,-1.3464e+01,-6.6259e+00,5.4109e+00,-1.4269e+01,-6.2096e+00,5.5103e+00,-1.4593e+01,-4.9219e+00,5.6050e+00,-1.5148e+01,-3.6343e+00,5.6998e+00,-1.5704e+01,-3.0811e+00,5.7900e+00,-1.5957e+01,-1.7068e+00,5.8754e+00,-1.6239e+01,-3.3248e-01,5.9609e+00,-1.6521e+01,3.4709e-01,6.0415e+00,-1.6660e+01,1.7506e+00,6.1172e+00,-1.6656e+01,3.1541e+00,6.1929e+00,-1.6651e+01,3.9361e+00,6.2637e+00,-1.6632e+01,5.3095e+00,6.3292e+00,-1.6341e+01,6.6830e+00,6.3948e+00,-1.6050e+01,7.5303e+00,6.4552e+00,-1.5835e+01,8.8152e+00,6.5104e+00,-1.5268e+01,1.0100e+01,6.5655e+00,-1.4701e+01,1.0963e+01,6.6154e+00,-1.4263e+01,1.2105e+01,6.6598e+00,-1.3444e+01,1.3246e+01,6.7043e+00,-1.2625e+01,1.4067e+01,6.7433e+00,-1.1946e+01,1.5015e+01,6.7768e+00,-1.0909e+01,1.5963e+01,6.8103e+00,-9.8721e+00,1.6676e+01,6.8383e+00,-8.9532e+00,1.7390e+01,6.8608e+00,-7.7425e+00,1.8104e+01,6.8832e+00,-6.5319e+00,1.8643e+01,6.9001e+00,-5.3901e+00,1.9090e+01,6.9113e+00,-4.0578e+00,1.9538e+01,6.9226e+00,-2.7254e+00,1.9839e+01,6.9282e+00,-1.3963e+00,2.0000e+01,6.9282e+00,-4.8986e-15};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getNurbsPatchSurface_4_25_weight_1()
		{
			double[] value = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
			return value;
		}
		private double[] getNurbsPatchSurface_4_25_weight_2()
		{
			double[] value = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
			return value;
		}
		private double[] getNurbsPatchSurface_4_25_weight_3()
		{
			double[] value = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
			return value;
		}



		/** Define subarrays using type double[] */
		private double[] getCoordinate_5_25_point_1()
		{
			double[] value = {2.6000e+01,-3.4641e+00,0.0000e+00,2.5919e+01,-3.6037e+00,1.3963e+00,2.5560e+01,-3.7405e+00,4.0054e+00,2.5181e+01,-3.8742e+00,5.3524e+00,2.4803e+01,-4.0079e+00,6.6994e+00,2.3917e+01,-4.1384e+00,9.1201e+00,2.3258e+01,-4.2654e+00,1.0355e+01,2.2600e+01,-4.3925e+00,1.1590e+01,2.1254e+01,-4.5161e+00,1.3716e+01,2.0346e+01,-4.6359e+00,1.4782e+01,1.9438e+01,-4.7557e+00,1.5848e+01,1.7718e+01,-4.8717e+00,1.7591e+01,1.6603e+01,-4.9837e+00,1.8439e+01,1.5488e+01,-5.0957e+00,1.9288e+01,1.3498e+01,-5.2037e+00,2.0586e+01,1.2227e+01,-5.3073e+00,2.1177e+01,1.0956e+01,-5.4109e+00,2.1768e+01,8.8070e+00,-5.5103e+00,2.2587e+01,7.4387e+00,-5.6050e+00,2.2894e+01,6.0705e+00,-5.6998e+00,2.3202e+01,3.8772e+00,-5.7900e+00,2.3532e+01,2.4743e+00,-5.8754e+00,2.3542e+01,1.0714e+00,-5.9609e+00,2.3552e+01,-1.0568e+00,-6.0415e+00,2.3413e+01,-2.4306e+00,-6.1172e+00,2.3125e+01,-3.8043e+00,-6.1929e+00,2.2838e+01,-5.7687e+00,-6.2637e+00,2.2273e+01,-7.0511e+00,-6.3292e+00,2.1701e+01,-8.3335e+00,-6.3948e+00,2.1130e+01,-1.0051e+01,-6.4552e+00,2.0202e+01,-1.1185e+01,-6.5104e+00,1.9373e+01,-1.2318e+01,-6.5655e+00,1.8543e+01,-1.3727e+01,-6.6154e+00,1.7332e+01,-1.4660e+01,-6.6598e+00,1.6282e+01,-1.5594e+01,-6.7043e+00,1.5233e+01,-1.6653e+01,-6.7433e+00,1.3825e+01,-1.7346e+01,-6.7768e+00,1.2602e+01,-1.8039e+01,-6.8103e+00,1.1380e+01,-1.8730e+01,-6.8383e+00,9.8674e+00,-1.9152e+01,-6.8608e+00,8.5269e+00,-1.9574e+01,-6.8832e+00,7.1864e+00,-1.9903e+01,-6.9001e+00,5.6579e+00,-2.0036e+01,-6.9113e+00,4.2587e+00,-2.0169e+01,-6.9226e+00,2.8595e+00,-2.0161e+01,-6.9282e+00,1.3963e+00,-2.0000e+01,-6.9282e+00,2.4493e-15,-1.9839e+01,-6.9282e+00,-1.3963e+00,-1.9538e+01,-6.9226e+00,-2.7254e+00,-1.9090e+01,-6.9113e+00,-4.0578e+00,-1.8643e+01,-6.9001e+00,-5.3901e+00,-1.8104e+01,-6.8832e+00,-6.5319e+00,-1.7390e+01,-6.8608e+00,-7.7425e+00,-1.6676e+01,-6.8383e+00,-8.9532e+00,-1.5963e+01,-6.8103e+00,-9.8721e+00,-1.5015e+01,-6.7768e+00,-1.0909e+01,-1.4067e+01,-6.7433e+00,-1.1946e+01,-1.3246e+01,-6.7043e+00,-1.2625e+01,-1.2105e+01,-6.6598e+00,-1.3444e+01,-1.0963e+01,-6.6154e+00,-1.4263e+01,-1.0100e+01,-6.5655e+00,-1.4701e+01,-8.8152e+00,-6.5104e+00,-1.5268e+01,-7.5303e+00,-6.4552e+00,-1.5835e+01,-6.6830e+00,-6.3948e+00,-1.6050e+01,-5.3095e+00,-6.3292e+00,-1.6341e+01,-3.9361e+00,-6.2637e+00,-1.6632e+01,-3.1541e+00,-6.1929e+00,-1.6651e+01,-1.7506e+00,-6.1172e+00,-1.6656e+01,-3.4709e-01,-6.0415e+00,-1.6660e+01,3.3248e-01,-5.9609e+00,-1.6521e+01,1.7068e+00,-5.8754e+00,-1.6239e+01,3.0811e+00,-5.7900e+00,-1.5957e+01,3.6343e+00,-5.6998e+00,-1.5704e+01,4.9219e+00,-5.6050e+00,-1.5148e+01,6.2096e+00,-5.5103e+00,-1.4593e+01,6.6259e+00,-5.4109e+00,-1.4269e+01,7.7733e+00,-5.3073e+00,-1.3464e+01,8.9208e+00,-5.2037e+00,-1.2659e+01,9.2022e+00,-5.0957e+00,-1.2307e+01,1.0162e+01,-4.9837e+00,-1.1286e+01,1.1122e+01,-4.8717e+00,-1.0266e+01,1.1282e+01,-4.7557e+00,-9.9224e+00,1.2015e+01,-4.6359e+00,-8.7294e+00,1.2748e+01,-4.5161e+00,-7.5364e+00,1.2806e+01,-4.3925e+00,-7.2301e+00,1.3283e+01,-4.2654e+00,-5.9142e+00,1.3761e+01,-4.1384e+00,-4.5982e+00,1.3743e+01,-4.0079e+00,-4.3485e+00,1.3945e+01,-3.8742e+00,-2.9640e+00,1.4147e+01,-3.7405e+00,-1.5795e+00,1.4081e+01,-3.6037e+00,-1.3963e+00,1.4000e+01,-3.4641e+00,-3.4290e-15,2.9750e+01,5.6292e+00,0.0000e+00,2.9972e+01,5.4546e+00,1.3963e+00,2.9814e+01,5.2660e+00,4.9098e+00,2.9720e+01,5.0646e+00,6.3172e+00,2.9626e+01,4.8632e+00,7.7246e+00,2.8681e+01,4.6491e+00,1.1241e+01,2.8273e+01,4.4236e+00,1.2588e+01,2.7866e+01,4.1982e+00,1.3935e+01,2.6133e+01,3.9616e+00,1.7261e+01};
			return value;
		}
		private double[] getCoordinate_5_25_point_2()
		{
			double[] value = {2.5432e+01,3.7155e+00,1.8477e+01,2.4731e+01,3.4694e+00,1.9694e+01,2.2260e+01,3.2138e+00,2.2636e+01,2.1301e+01,2.9507e+00,2.3658e+01,2.0343e+01,2.6875e+00,2.4679e+01,1.7236e+01,2.4168e+00,2.7062e+01,1.6070e+01,2.1406e+00,2.7834e+01,1.4904e+01,1.8644e+00,2.8606e+01,1.1308e+01,1.5827e+00,3.0283e+01,9.9957e+00,1.2977e+00,3.0764e+01,8.6838e+00,1.0127e+00,3.1245e+01,4.7789e+00,7.2429e-01,3.2110e+01,3.3921e+00,4.3480e-01,3.2273e+01,2.0053e+00,1.4531e-01,3.2437e+01,-2.0053e+00,-1.4531e-01,3.2437e+01,-3.3921e+00,-4.3480e-01,3.2273e+01,-4.7789e+00,-7.2429e-01,3.2110e+01,-8.6838e+00,-1.0127e+00,3.1245e+01,-9.9957e+00,-1.2977e+00,3.0764e+01,-1.1308e+01,-1.5827e+00,3.0283e+01,-1.4904e+01,-1.8644e+00,2.8606e+01,-1.6070e+01,-2.1406e+00,2.7834e+01,-1.7236e+01,-2.4168e+00,2.7062e+01,-2.0343e+01,-2.6875e+00,2.4679e+01,-2.1301e+01,-2.9507e+00,2.3658e+01,-2.2260e+01,-3.2138e+00,2.2636e+01,-2.4731e+01,-3.4694e+00,1.9694e+01,-2.5432e+01,-3.7155e+00,1.8477e+01,-2.6133e+01,-3.9616e+00,1.7261e+01,-2.7866e+01,-4.1982e+00,1.3935e+01,-2.8273e+01,-4.4236e+00,1.2588e+01,-2.8681e+01,-4.6491e+00,1.1241e+01,-2.9626e+01,-4.8632e+00,7.7246e+00,-2.9720e+01,-5.0646e+00,6.3172e+00,-2.9814e+01,-5.2660e+00,4.9098e+00,-2.9972e+01,-5.4546e+00,1.3963e+00,-2.9750e+01,-5.6292e+00,3.6433e-15,-2.9528e+01,-5.8037e+00,-1.3963e+00,-2.8947e+01,-5.9641e+00,-4.7254e+00,-2.8423e+01,-6.1094e+00,-6.0414e+00,-2.7898e+01,-6.2548e+00,-7.3574e+00,-2.6669e+01,-6.3848e+00,-1.0345e+01,-2.5870e+01,-6.4990e+00,-1.1518e+01,-2.5071e+01,-6.6133e+00,-1.2691e+01,-2.3317e+01,-6.7114e+00,-1.5215e+01,-2.2284e+01,-6.7933e+00,-1.6190e+01,-2.1251e+01,-6.8752e+00,-1.7166e+01,-1.9115e+01,-6.9403e+00,-1.9143e+01,-1.7899e+01,-6.9891e+00,-1.9879e+01,-1.6682e+01,-7.0379e+00,-2.0614e+01,-1.4316e+01,-7.0697e+00,-2.2003e+01,-1.2973e+01,-7.0853e+00,-2.2469e+01,-1.1629e+01,-7.1008e+00,-2.2935e+01,-9.1800e+00,-7.0995e+00,-2.3735e+01,-7.7704e+00,-7.0823e+00,-2.3915e+01,-6.3608e+00,-7.0650e+00,-2.4095e+01,-3.9621e+00,-7.0313e+00,-2.4339e+01,-2.5466e+00,-6.9823e+00,-2.4230e+01,-1.1312e+00,-6.9333e+00,-2.4120e+01,1.1049e+00,-6.8684e+00,-2.3870e+01,2.4679e+00,-6.7893e+00,-2.3481e+01,3.8309e+00,-6.7102e+00,-2.3091e+01,5.8187e+00,-6.6160e+00,-2.2427e+01,7.0758e+00,-6.5088e+00,-2.1777e+01,8.3329e+00,-6.4016e+00,-2.1128e+01,1.0015e+01,-6.2805e+00,-2.0139e+01,1.1119e+01,-6.1477e+00,-1.9258e+01,1.2223e+01,-6.0150e+00,-1.8378e+01,1.3568e+01,-5.8698e+00,-1.7155e+01,1.4479e+01,-5.7145e+00,-1.6081e+01,1.5391e+01,-5.5593e+00,-1.5006e+01,1.6390e+01,-5.3931e+00,-1.3634e+01,1.7078e+01,-5.2187e+00,-1.2408e+01,1.7766e+01,-5.0443e+00,-1.1182e+01,1.8428e+01,-4.8607e+00,-9.7332e+00,1.8871e+01,-4.6708e+00,-8.4017e+00,1.9313e+01,-4.4808e+00,-7.0702e+00,1.9659e+01,-4.2836e+00,-5.6061e+00,1.9842e+01,-4.0819e+00,-4.2176e+00,2.0025e+01,-3.8803e+00,-2.8291e+00,2.0040e+01,-3.5687e+00,-6.9813e-01,2.0000e+01,-3.4641e+00,-4.8986e-15,2.0000e+01,6.9282e+00,0.0000e+00,2.0161e+01,6.9282e+00,1.3963e+00,2.0169e+01,6.9226e+00,2.8595e+00,2.0036e+01,6.9113e+00,4.2587e+00,1.9903e+01,6.9001e+00,5.6579e+00,1.9574e+01,6.8832e+00,7.1864e+00,1.9152e+01,6.8608e+00,8.5269e+00,1.8730e+01,6.8383e+00,9.8674e+00,1.8039e+01,6.8103e+00,1.1380e+01,1.7346e+01,6.7768e+00,1.2602e+01,1.6653e+01,6.7433e+00,1.3825e+01,1.5594e+01,6.7043e+00,1.5233e+01,1.4660e+01,6.6598e+00,1.6282e+01,1.3727e+01,6.6154e+00,1.7332e+01,1.2318e+01,6.5655e+00,1.8543e+01,1.1185e+01,6.5104e+00,1.9373e+01,1.0051e+01,6.4552e+00,2.0202e+01,8.3335e+00,6.3948e+00,2.1130e+01};
			return value;
		}
		private double[] getCoordinate_5_25_point_3()
		{
			double[] value = {7.0511e+00,6.3292e+00,2.1701e+01,5.7687e+00,6.2637e+00,2.2273e+01,3.8043e+00,6.1929e+00,2.2838e+01,2.4306e+00,6.1172e+00,2.3125e+01,1.0568e+00,6.0415e+00,2.3413e+01,-1.0714e+00,5.9609e+00,2.3552e+01,-2.4743e+00,5.8754e+00,2.3542e+01,-3.8772e+00,5.7900e+00,2.3532e+01,-6.0705e+00,5.6998e+00,2.3202e+01,-7.4387e+00,5.6050e+00,2.2894e+01,-8.8070e+00,5.5103e+00,2.2587e+01,-1.0956e+01,5.4109e+00,2.1768e+01,-1.2227e+01,5.3073e+00,2.1177e+01,-1.3498e+01,5.2037e+00,2.0586e+01,-1.5488e+01,5.0957e+00,1.9288e+01,-1.6603e+01,4.9837e+00,1.8439e+01,-1.7718e+01,4.8717e+00,1.7591e+01,-1.9438e+01,4.7557e+00,1.5848e+01,-2.0346e+01,4.6359e+00,1.4782e+01,-2.1254e+01,4.5161e+00,1.3716e+01,-2.2600e+01,4.3925e+00,1.1590e+01,-2.3258e+01,4.2654e+00,1.0355e+01,-2.3917e+01,4.1384e+00,9.1201e+00,-2.4803e+01,4.0079e+00,6.6994e+00,-2.5181e+01,3.8742e+00,5.3524e+00,-2.5560e+01,3.7405e+00,4.0054e+00,-2.5919e+01,3.6037e+00,1.3963e+00,-2.6000e+01,3.4641e+00,3.1841e-15,-2.6081e+01,3.3245e+00,-1.3963e+00,-2.5875e+01,3.1820e+00,-4.0725e+00,-2.5654e+01,3.0371e+00,-5.4529e+00,-2.5433e+01,2.8922e+00,-6.8334e+00,-2.4652e+01,2.7448e+00,-9.4474e+00,-2.4139e+01,2.5954e+00,-1.0747e+01,-2.3627e+01,2.4459e+00,-1.2048e+01,-2.2291e+01,2.2943e+00,-1.4470e+01,-2.1511e+01,2.1409e+00,-1.5629e+01,-2.0731e+01,1.9876e+00,-1.6788e+01,-1.8892e+01,1.8325e+00,-1.8895e+01,-1.7881e+01,1.6761e+00,-1.9859e+01,-1.6869e+01,1.5196e+00,-2.0822e+01,-1.4607e+01,1.3618e+00,-2.2507e+01,-1.3411e+01,1.2031e+00,-2.3229e+01,-1.2216e+01,1.0443e+00,-2.3952e+01,-9.6323e+00,8.8454e-01,-2.5127e+01,-8.3095e+00,7.2419e-01,-2.5574e+01,-6.9868e+00,5.6385e-01,-2.6022e+01,-4.2023e+00,4.0292e-01,-2.6625e+01,-2.8143e+00,2.4179e-01,-2.6776e+01,-1.4263e+00,8.0662e-02,-2.6928e+01,1.4263e+00,-8.0662e-02,-2.6928e+01,2.8143e+00,-2.4179e-01,-2.6776e+01,4.2023e+00,-4.0292e-01,-2.6625e+01,6.9868e+00,-5.6385e-01,-2.6022e+01,8.3095e+00,-7.2419e-01,-2.5574e+01,9.6323e+00,-8.8454e-01,-2.5127e+01,1.2216e+01,-1.0443e+00,-2.3952e+01,1.3411e+01,-1.2031e+00,-2.3229e+01,1.4607e+01,-1.3618e+00,-2.2507e+01,1.6869e+01,-1.5196e+00,-2.0822e+01,1.7881e+01,-1.6761e+00,-1.9859e+01,1.8892e+01,-1.8325e+00,-1.8895e+01,2.0731e+01,-1.9876e+00,-1.6788e+01,2.1511e+01,-2.1409e+00,-1.5629e+01,2.2291e+01,-2.2943e+00,-1.4470e+01,2.3627e+01,-2.4459e+00,-1.2048e+01,2.4139e+01,-2.5954e+00,-1.0747e+01,2.4652e+01,-2.7448e+00,-9.4474e+00,2.5433e+01,-2.8922e+00,-6.8334e+00,2.5654e+01,-3.0371e+00,-5.4529e+00,2.5875e+01,-3.1820e+00,-4.0725e+00,2.6081e+01,-3.3245e+00,-1.3963e+00,2.6000e+01,-3.4641e+00,-6.3682e-15};
			return value;
		}

		/** Large attribute array: NurbsPatchSurface weight field, scene-graph level=4, element #11, 273 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFDouble getNurbsPatchSurface_4_11_weight()
		{
			MFDouble NurbsPatchSurface_4_11_weight = new MFDouble()/*2.finalize*/
				.append(new MFDouble(getNurbsPatchSurface_4_11_weight_1()))
				.append(new MFDouble(getNurbsPatchSurface_4_11_weight_2()))
				.append(new MFDouble(getNurbsPatchSurface_4_11_weight_3()));
			return NurbsPatchSurface_4_11_weight;
		}
		/** Large attribute array: NurbsPatchSurface uKnot field, scene-graph level=4, element #11, 95 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFDouble getNurbsPatchSurface_4_11_uKnot()
		{
			MFDouble NurbsPatchSurface_4_11_uKnot = new MFDouble(new double[] {0.0,0.0,0.0,0.0,0.0333333333333,0.0333333333333,0.0333333333333,0.0666666666667,0.0666666666667,0.0666666666667,0.1,0.1,0.1,0.133333333333,0.133333333333,0.133333333333,0.166666666667,0.166666666667,0.166666666667,0.2,0.2,0.2,0.233333333333,0.233333333333,0.233333333333,0.266666666667,0.266666666667,0.266666666667,0.3,0.3,0.3,0.333333333333,0.333333333333,0.333333333333,0.366666666667,0.366666666667,0.366666666667,0.4,0.4,0.4,0.433333333333,0.433333333333,0.433333333333,0.466666666667,0.466666666667,0.466666666667,0.5,0.5,0.5,0.533333333333,0.533333333333,0.533333333333,0.566666666667,0.566666666667,0.566666666667,0.6,0.6,0.6,0.633333333333,0.633333333333,0.633333333333,0.666666666667,0.666666666667,0.666666666667,0.7,0.7,0.7,0.733333333333,0.733333333333,0.733333333333,0.766666666667,0.766666666667,0.766666666667,0.8,0.8,0.8,0.833333333333,0.833333333333,0.833333333333,0.866666666667,0.866666666667,0.866666666667,0.9,0.9,0.9,0.933333333333,0.933333333333,0.933333333333,0.966666666667,0.966666666667,0.966666666667,1.0,1.0,1.0,1.0});
			return NurbsPatchSurface_4_11_uKnot;
		}
		/** Large attribute array: Coordinate point field, scene-graph level=5, element #11, 819 total numbers made up of 273 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3f getCoordinate_5_11_point()
		{
			MFVec3f Coordinate_5_11_point = new MFVec3f()/*2.finalize*/
				.append(new MFVec3f(getCoordinate_5_11_point_1()))
				.append(new MFVec3f(getCoordinate_5_11_point_2()))
				.append(new MFVec3f(getCoordinate_5_11_point_3()));
			return Coordinate_5_11_point;
		}
		/** Large attribute array: NurbsPatchSurface weight field, scene-graph level=4, element #18, 273 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFDouble getNurbsPatchSurface_4_18_weight()
		{
			MFDouble NurbsPatchSurface_4_18_weight = new MFDouble()/*2.finalize*/
				.append(new MFDouble(getNurbsPatchSurface_4_18_weight_1()))
				.append(new MFDouble(getNurbsPatchSurface_4_18_weight_2()))
				.append(new MFDouble(getNurbsPatchSurface_4_18_weight_3()));
			return NurbsPatchSurface_4_18_weight;
		}
		/** Large attribute array: NurbsPatchSurface uKnot field, scene-graph level=4, element #18, 95 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFDouble getNurbsPatchSurface_4_18_uKnot()
		{
			MFDouble NurbsPatchSurface_4_18_uKnot = new MFDouble(new double[] {0.0,0.0,0.0,0.0,0.0333333333333,0.0333333333333,0.0333333333333,0.0666666666667,0.0666666666667,0.0666666666667,0.1,0.1,0.1,0.133333333333,0.133333333333,0.133333333333,0.166666666667,0.166666666667,0.166666666667,0.2,0.2,0.2,0.233333333333,0.233333333333,0.233333333333,0.266666666667,0.266666666667,0.266666666667,0.3,0.3,0.3,0.333333333333,0.333333333333,0.333333333333,0.366666666667,0.366666666667,0.366666666667,0.4,0.4,0.4,0.433333333333,0.433333333333,0.433333333333,0.466666666667,0.466666666667,0.466666666667,0.5,0.5,0.5,0.533333333333,0.533333333333,0.533333333333,0.566666666667,0.566666666667,0.566666666667,0.6,0.6,0.6,0.633333333333,0.633333333333,0.633333333333,0.666666666667,0.666666666667,0.666666666667,0.7,0.7,0.7,0.733333333333,0.733333333333,0.733333333333,0.766666666667,0.766666666667,0.766666666667,0.8,0.8,0.8,0.833333333333,0.833333333333,0.833333333333,0.866666666667,0.866666666667,0.866666666667,0.9,0.9,0.9,0.933333333333,0.933333333333,0.933333333333,0.966666666667,0.966666666667,0.966666666667,1.0,1.0,1.0,1.0});
			return NurbsPatchSurface_4_18_uKnot;
		}
		/** Large attribute array: Coordinate point field, scene-graph level=5, element #18, 819 total numbers made up of 273 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3f getCoordinate_5_18_point()
		{
			MFVec3f Coordinate_5_18_point = new MFVec3f()/*2.finalize*/
				.append(new MFVec3f(getCoordinate_5_18_point_1()))
				.append(new MFVec3f(getCoordinate_5_18_point_2()))
				.append(new MFVec3f(getCoordinate_5_18_point_3()));
			return Coordinate_5_18_point;
		}
		/** Large attribute array: NurbsPatchSurface weight field, scene-graph level=4, element #25, 273 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFDouble getNurbsPatchSurface_4_25_weight()
		{
			MFDouble NurbsPatchSurface_4_25_weight = new MFDouble()/*2.finalize*/
				.append(new MFDouble(getNurbsPatchSurface_4_25_weight_1()))
				.append(new MFDouble(getNurbsPatchSurface_4_25_weight_2()))
				.append(new MFDouble(getNurbsPatchSurface_4_25_weight_3()));
			return NurbsPatchSurface_4_25_weight;
		}
		/** Large attribute array: NurbsPatchSurface uKnot field, scene-graph level=4, element #25, 95 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFDouble getNurbsPatchSurface_4_25_uKnot()
		{
			MFDouble NurbsPatchSurface_4_25_uKnot = new MFDouble(new double[] {0.0,0.0,0.0,0.0,0.0333333333333,0.0333333333333,0.0333333333333,0.0666666666667,0.0666666666667,0.0666666666667,0.1,0.1,0.1,0.133333333333,0.133333333333,0.133333333333,0.166666666667,0.166666666667,0.166666666667,0.2,0.2,0.2,0.233333333333,0.233333333333,0.233333333333,0.266666666667,0.266666666667,0.266666666667,0.3,0.3,0.3,0.333333333333,0.333333333333,0.333333333333,0.366666666667,0.366666666667,0.366666666667,0.4,0.4,0.4,0.433333333333,0.433333333333,0.433333333333,0.466666666667,0.466666666667,0.466666666667,0.5,0.5,0.5,0.533333333333,0.533333333333,0.533333333333,0.566666666667,0.566666666667,0.566666666667,0.6,0.6,0.6,0.633333333333,0.633333333333,0.633333333333,0.666666666667,0.666666666667,0.666666666667,0.7,0.7,0.7,0.733333333333,0.733333333333,0.733333333333,0.766666666667,0.766666666667,0.766666666667,0.8,0.8,0.8,0.833333333333,0.833333333333,0.833333333333,0.866666666667,0.866666666667,0.866666666667,0.9,0.9,0.9,0.933333333333,0.933333333333,0.933333333333,0.966666666667,0.966666666667,0.966666666667,1.0,1.0,1.0,1.0});
			return NurbsPatchSurface_4_25_uKnot;
		}
		/** Large attribute array: Coordinate point field, scene-graph level=5, element #25, 819 total numbers made up of 273 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3f getCoordinate_5_25_point()
		{
			MFVec3f Coordinate_5_25_point = new MFVec3f()/*2.finalize*/
				.append(new MFVec3f(getCoordinate_5_25_point_1()))
				.append(new MFVec3f(getCoordinate_5_25_point_2()))
				.append(new MFVec3f(getCoordinate_5_25_point_3()));
			return Coordinate_5_25_point;
		}

	/** The initialized model object, created within initialize() method. */
	private X3D x3dModel;

	/** 
	 * Provide a 
	 * <a href="https://dzone.com/articles/java-copy-shallow-vs-deep-in-which-you-will-swim" target="_blank">shallow copy</a>
	 * of the X3D model.
	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3D.html">X3D</a>
	 * @return mobius model
	 */
	public X3D getX3dModel()
	{	  
		return x3dModel;
	}
	   
    /** 
     * Default main() method provided for test purposes, uses CommandLine to set global ConfigurationProperties for this object.
     * @param args array of input parameters, provided as arguments
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3D.html#handleArguments-java.lang.String:A-">X3D.handleArguments(args)</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3D.html#validationReport--">X3D.validationReport()</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/CommandLine.html">CommandLine</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/CommandLine.html#USAGE">CommandLine.USAGE</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/ConfigurationProperties.html">ConfigurationProperties</a>
     */
    public static void main(String args[])
    {
        System.out.println("Build this X3D model, showing validation diagnostics...");
        X3D thisExampleX3dModel = new mobius().getX3dModel();
//      System.out.println("X3D model construction complete.");
	
        // next handle command line arguments
        boolean hasArguments = (args != null) && (args.length > 0);
        boolean validate = true; // default
        boolean argumentsLoadNewModel = false;
        String  fileName = new String();

        if (args != null)
        {
                for (String arg : args)
                {
                        if (arg.toLowerCase().startsWith("-v") || arg.toLowerCase().contains("validate"))
                        {
                                validate = true; // making sure
                        }
                        if (arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_X3D) ||
                                arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_CLASSICVRML) ||
                                arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_X3DB) ||
                                arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_VRML97) ||
                                arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_EXI) ||
                                arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_GZIP) ||
                                arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_ZIP) ||
                                arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_HTML) ||
                                arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_XHTML))
                        {
                                argumentsLoadNewModel = true;
                                fileName = arg;
                        }
                }
        }
        if      (argumentsLoadNewModel)
                System.out.println("WARNING: \"net.x3djsonld.data.mobius\" model invocation is attempting to load file \"" + fileName + "\" instead of simply validating itself... file loading ignored.");
        else if (hasArguments) // if no arguments provided, this method produces usage warning
                thisExampleX3dModel.handleArguments(args);
	
        if (validate)
        {
            //  System.out.println("--- TODO fix duplicated outputs ---"); // omit when duplicated outputs problem is solved/refactored
		String validationResults = thisExampleX3dModel.validationReport();
            //  System.out.println("-----------------------------------"); // omit when duplicated outputs problem is solved/refactored
                System.out.print("net.x3djsonld.data.mobius self-validation test confirmation: ");
                if (!validationResults.equals("success"))
                    System.out.println();
                System.out.println(validationResults.trim());

                // experimental: test X3DJSAIL output files
                // ./mobius_JavaExport.* file validation is checked when building X3D Example Archives
                String filenameX3D  = "./mobius_JavaExport.x3d"; 
                String filenameX3DV = "./mobius_JavaExport.x3dv"; 
                String filenameJSON = "./mobius_JavaExport.json";
                thisExampleX3dModel.toFileX3D        (filenameX3D);
                thisExampleX3dModel.toFileClassicVRML(filenameX3DV);
// TODO         thisExampleX3dModel.toFileJSON       (filenameJSON);
        }
    }
}
