package net.x3djsonld.data;

import java.util.*;
import org.web3d.x3d.jsail.Core.*;
import org.web3d.x3d.jsail.fields.*;
import org.web3d.x3d.jsail.Geometry3D.*;
import org.web3d.x3d.jsail.Grouping.*;
import org.web3d.x3d.jsail.Rendering.*;
import org.web3d.x3d.jsail.Shape.*;

// Javadoc annotations follow, see below for source.
/**
 * <p> Template for an Indexed Face Set. </p>
 <p> Related links: cube.java source, <a href="https://www.web3d.org/x3d/content/examples/X3dResources.html" target="_blank">X3D Resources</a>, <a href="https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html" target="_blank">X3D Scene Authoring Hints</a>, and <a href="https://www.web3d.org/x3d/content/X3dTooltips.html" target="_blank">X3D Tooltips</a>. </p>
	<table style="color:black; border:0px solid; border-spacing:10px 0px;">
        <caption>Scene Meta Information</caption>
		<tr style="background-color:silver; border-color:silver;">
			<td style="text-align:center; padding:10px 0px;"><i>meta tags</i></td>
			<td style="text-align:left;   padding:10px 0px;">net.x3djsonld.data.cube&nbsp; Document Metadata </td>
		</tr>

		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> title </i> </td>
			<td> <a href="https://coderextreme.net/X3DJSONLD/cube.x3d">cube.x3d</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> description </i> </td>
			<td> Template for an Indexed Face Set </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> creator </i> </td>
			<td> John Carlson </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> created </i> </td>
			<td> 4 April 2017 </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
			<td> manual </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> license </i> </td>
			<td> <a href="https://coderextreme.net/X3DJSONLD/../license.html">../license.html</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> identifier </i> </td>
			<td> <a href="https://coderextreme.net/X3DJSONLD/cube.x3d" target="_blank">https://coderextreme.net/X3DJSONLD/cube.x3d</a> </td>
		</tr>
		<tr style="background-color:silver; border-color:silver;">
			<td style="text-align:center;" colspan="2">  &nbsp; </td>
		</tr>
	</table>

	<p>
		This program uses the
		<a href="https://www.web3d.org/specifications/java/X3DJSAIL.html" target="_blank">X3D Java Scene Access Interface Library (X3DJSAIL)</a>.
		It has been produced using the 
		<a href="https://www.web3d.org/x3d/stylesheets/X3dToJava.xslt" target="_blank">X3dToJava.xslt</a>
		stylesheet to create Java source code from an <code>.x3d</code> model.
	</p>

	* @author John Carlson
 */

public class cube
{
	/** Default constructor to create this object. */
	public cube ()
	{
	  initialize();
	}

	/** Create and initialize the X3D model for this object. */
	public final void initialize()
	{
  x3dModel = new X3DObject().setProfile(X3DObject.PROFILE_INTERCHANGE).setVersion(X3DObject.VERSION_3_3)
  .setHead(new headObject()
    .addMeta(new metaObject().setName(metaObject.NAME_TITLE      ).setContent("cube.x3d"))
    .addMeta(new metaObject().setName(metaObject.NAME_DESCRIPTION).setContent("Template for an Indexed Face Set"))
    .addMeta(new metaObject().setName(metaObject.NAME_CREATOR    ).setContent("John Carlson"))
    .addMeta(new metaObject().setName(metaObject.NAME_CREATED    ).setContent("4 April 2017"))
    .addMeta(new metaObject().setName(metaObject.NAME_GENERATOR  ).setContent("manual"))
    .addMeta(new metaObject().setName(metaObject.NAME_LICENSE    ).setContent("../license.html"))
    .addMeta(new metaObject().setName(metaObject.NAME_IDENTIFIER ).setContent("https://coderextreme.net/X3DJSONLD/cube.x3d")))
  .setScene(new SceneObject()
    .addChild(new GroupObject()
      .addChild(new ShapeObject()
        .setGeometry(new IndexedFaceSetObject("IndexedFaceSet").setDEF("IndexedFaceSet").setNormalPerVertex(false).setColorIndex(getIndexedFaceSet_5_9_colorIndex()).setCoordIndex(getIndexedFaceSet_5_9_coordIndex()).setNormalIndex(getIndexedFaceSet_5_9_normalIndex())
          .setCoord(new CoordinateObject().setPoint(getCoordinate_6_9_point()))
          .setNormal(new NormalObject().setVector(getNormal_6_10_vector()))
          .setColor(new ColorObject().setColor(new MFColorObject(new float[] {0.0f,1.0f,0.0f})))))));
    }
	// end of initialize() method

		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_5_9_coordIndex_1()
		{
			int[] value = {0,1,2,-1,2,3,0,-1,3,2,4,-1,4,5,3,-1,5,4,6,-1,6,7,5,-1,7,6,8,-1,9,10,11,-1,12,0,3,-1,3,13,12,-1,13,3,5,-1,5,14,13,-1,14,5,7,-1,15,16,17,-1,16,15,18,-1,18,19,16,-1,20,21,22,-1,22,23,20,-1,24,20,23,-1,23,22,25,-1,25,26,23,-1,26,25,1,-1,1,0,26,-1,26,0,27,-1,27,0,12,-1,12,28,27,-1,28,12,9,-1,9,29,28,-1,29,9,11,-1,30,29,11,-1,11,31,30,-1,30,31,32,-1,32,33,30,-1,33,32,34,-1,34,35,33,-1,35,34,36,-1,36,37,35,-1,37,36,38,-1,38,39,37,-1,39,38,40,-1,40,41,39,-1,42,19,24,-1,43,42,24,-1,44,43,24,-1,24,23,44,-1,44,23,26,-1,26,45,44,-1,45,26,27,-1,27,46,45,-1,46,27,28,-1,28,47,46,-1,47,28,29,-1,29,48,47,-1,48,29,30,-1,30,49,48,-1,49,30,33,-1,43,50,51,-1,51,42,43,-1,42,51,52,-1,52,19,42,-1,19,52,53,-1,53,16,19,-1,16,53,54,-1,50,55,56,-1,56,51,50,-1,51,56,52,-1,53,57,54,-1,58,59,60,-1,60,57,58,-1,61,62,63,-1,63,64,61,-1,16,54,64,-1,64,17,16,-1,17,64,63,-1,65,52,66,-1,66,67,65,-1,68,53,52,-1,52,65,68,-1,68,65,67,-1,67,69,68,-1,57,68,69,-1,69,58,57,-1,59,58,70,-1,70,71,59,-1,70,58,69,-1,69,72,70,-1,69,67,73,-1,72,73,74,-1,74,75,72,-1,64,54,57,-1,76,67,66,-1,76,66,77,-1,76,77,55,-1,76,55,78,-1,76,78,73,-1,76,73,67,-1,79,80,71,-1,71,70,79,-1,75,79,70,-1,70,72,75,-1,81,75,82,-1,82,74,81,-1,83,81,74,-1,75,81,84,-1,84,85,75,-1,83,74,86,-1,86,87,83,-1,86,74,88,-1,88,89,86,-1,74,78,88,-1,88,78,55,-1,55,90,88,-1,55,50,43,-1,43,91,55,-1,90,55,91,-1,88,90,92,-1,92,89,88,-1,89,92,93,-1,93,94,89,-1,94,93,95,-1,95,96,94,-1,96,95,97,-1,97,98,96,-1,98,97,99,-1,99,100,98,-1,100,99,101,-1,101,102,100,-1,102,101,103,-1,103,104,102,-1,104,103,105,-1,105,106,104,-1,106,105,107,-1,107,108,106,-1,92,90,91,-1,92,91,44,-1,44,91,43,-1,92,44,45,-1,45,93,92,-1,93,45,46,-1,46,95,93,-1,95,46,47,-1,47,97,95,-1,97,47,48,-1,48,99,97,-1,99,48,49,-1,49,101,99,-1,101,49,33,-1,33,103,101,-1,103,33,35,-1,35,105,103,-1,105,35,37,-1,37,107,105,-1,107,37,39,-1,39,109,107,-1,109,39,41,-1,86,89,94,-1,94,110,86,-1,110,94,96,-1,96,111,110,-1,111,96,98,-1,98,112,111,-1,112,98,100,-1,100,113,112,-1,113,100,102,-1,102,114,113,-1,114,102,104,-1,104,115,114,-1,115,104,106,-1,106,116,115,-1,116,106,108,-1,108,117,116,-1,117,108,118,-1,87,86,119,-1,119,120,87,-1,119,86,110,-1,110,121,119,-1,119,121,122,-1,122,123,119,-1,124,119,123,-1,110,111,125,-1,125,126,110,-1,127,113,114,-1,114,128,127,-1,129,116,117,-1,117,130,129,-1,131,83,87,-1,87,132,131,-1,132,87,110,-1,110,126,132,-1,133,81,83,-1,83,131,133,-1,134,84,81,-1,81,133,134,-1,135,136,84,-1,84,134,135,-1,136,85,84,-1,135,137,138,-1,138,136,135,-1,139,140,141,-1,142,143,41,-1,41,144,142,-1,145,142,144,-1,144,146,145,-1,107,109,147,-1,147,108,107,-1,108,147,118,-1,64,57,60,-1,60,61,64,-1,61,148,149,-1,149,62,61,-1,148,61,60,-1,60,59,148,-1,85,79,75,-1,85,136,80,-1,80,79,85,-1,138,80,136,-1,80,138,150,-1,150,71,80,-1,71,150,148,-1,148,59,71,-1,150,138,137,-1,137,151,150,-1,151,149,148,-1,148,150,151,-1,66,52,56,-1,56,55,77,-1,73,78,74,-1,53,68,57,-1,56,77,66,-1,123,152,153,-1,153,124,123,-1,120,119,124,-1,124,153,120,-1,152,123,122,-1,87,120,121,-1,121,110,87,-1,153,152,122,-1,122,121,153,-1,120,153,121,-1,12,13,10,-1,10,9,12,-1,14,154,10,-1,10,13,14,-1,8,155,154,-1,154,14,8,-1,7,8,14,-1,156,112,113,-1,113,127,156,-1,111,112,156,-1,156,125,111,-1};
			return value;
		}
		private int[] getIndexedFaceSet_5_9_coordIndex_2()
		{
			int[] value = {115,116,129,-1,129,157,115,-1,115,157,128,-1,128,114,115,-1,158,130,117,-1,117,118,158,-1,140,159,160,-1,160,161,140,-1,118,147,161,-1,161,160,118,-1,159,140,139,-1,40,144,41,-1,146,158,118,-1,162,145,146,-1,146,118,162,-1,160,162,118,-1,159,141,162,-1,162,160,159,-1,139,141,159,-1,162,141,140,-1,140,161,162,-1,142,145,162,-1,162,161,142,-1,143,142,161,-1,147,143,161,-1,109,41,143,-1,143,147,109,-1,20,163,21,-1,163,20,19,-1,19,18,163,-1,20,24,19,-1,164,2,1,-1,1,165,164,-1,166,4,2,-1,2,164,166,-1,167,6,4,-1,4,166,167,-1,8,6,167,-1,11,10,168,-1,169,164,165,-1,165,170,169,-1,171,166,164,-1,164,169,171,-1,167,166,171,-1,17,172,15,-1,173,18,15,-1,15,172,173,-1,22,21,174,-1,174,175,22,-1,176,22,175,-1,177,25,22,-1,22,176,177,-1,165,1,25,-1,25,177,165,-1,178,165,177,-1,179,170,165,-1,165,178,179,-1,180,168,170,-1,170,179,180,-1,11,168,180,-1,31,11,180,-1,180,181,31,-1,182,32,31,-1,31,181,182,-1,183,34,32,-1,32,182,183,-1,184,36,34,-1,34,183,184,-1,185,38,36,-1,36,184,185,-1,186,40,38,-1,38,185,186,-1,175,173,187,-1,175,187,188,-1,176,175,188,-1,188,189,176,-1,190,177,176,-1,176,189,190,-1,191,178,177,-1,177,190,191,-1,192,179,178,-1,178,191,192,-1,193,180,179,-1,179,192,193,-1,194,181,180,-1,180,193,194,-1,182,181,194,-1,187,195,196,-1,196,188,187,-1,173,197,195,-1,195,187,173,-1,198,197,173,-1,173,172,198,-1,199,198,172,-1,195,200,201,-1,201,196,195,-1,197,200,195,-1,199,202,198,-1,202,203,204,-1,204,205,202,-1,206,63,62,-1,62,207,206,-1,17,206,199,-1,199,172,17,-1,63,206,17,-1,208,209,197,-1,197,210,208,-1,210,197,198,-1,198,211,210,-1,212,208,210,-1,210,211,212,-1,205,212,211,-1,211,202,205,-1,213,214,205,-1,205,204,213,-1,215,212,205,-1,205,214,215,-1,216,208,212,-1,217,218,216,-1,216,215,217,-1,202,199,206,-1,209,208,219,-1,220,209,219,-1,201,220,219,-1,221,201,219,-1,216,221,219,-1,208,216,219,-1,214,213,222,-1,222,223,214,-1,215,214,223,-1,223,217,215,-1,224,217,225,-1,225,226,224,-1,218,224,226,-1,227,228,225,-1,225,217,227,-1,229,230,218,-1,218,226,229,-1,231,232,218,-1,218,230,231,-1,232,221,218,-1,233,201,221,-1,221,232,233,-1,188,196,201,-1,201,233,188,-1,234,188,233,-1,231,235,233,-1,233,232,231,-1,236,237,235,-1,235,231,236,-1,238,239,237,-1,237,236,238,-1,240,241,239,-1,239,238,240,-1,242,243,241,-1,241,240,242,-1,244,245,243,-1,243,242,244,-1,246,247,245,-1,245,244,246,-1,248,249,247,-1,247,246,248,-1,250,251,249,-1,249,248,250,-1,234,233,235,-1,189,234,235,-1,188,234,189,-1,237,190,189,-1,189,235,237,-1,239,191,190,-1,190,237,239,-1,241,192,191,-1,191,239,241,-1,243,193,192,-1,192,241,243,-1,245,194,193,-1,193,243,245,-1,247,182,194,-1,194,245,247,-1,249,183,182,-1,182,247,249,-1,251,184,183,-1,183,249,251,-1,252,185,184,-1,184,251,252,-1,186,185,252,-1,253,236,231,-1,231,230,253,-1,254,238,236,-1,236,253,254,-1,255,240,238,-1,238,254,255,-1,256,242,240,-1,240,255,256,-1,257,244,242,-1,242,256,257,-1,258,246,244,-1,244,257,258,-1,259,248,246,-1,246,258,259,-1,260,250,248,-1,248,259,260,-1,261,250,260,-1,262,263,230,-1,230,229,262,-1,264,253,230,-1,230,263,264,-1,265,264,263,-1,263,266,265,-1,267,265,266,-1,126,125,254,-1,254,253,126,-1,128,257,256,-1,256,127,128,-1,130,260,259,-1,259,129,130,-1,132,229,226,-1,226,131,132,-1,126,253,229,-1,229,132,126,-1,131,226,225,-1,225,133,131,-1,133,225,228,-1,228,134,133,-1,134,228,268,-1,268,135,134,-1,228,227,268,-1,268,269,137,-1,137,135,268,-1,270,271,272,-1,144,186,273,-1,273,274,144,-1,146,144,274,-1,274,275,146,-1,250,276,252,-1,252,251,250,-1,261,276,250,-1,207,203,202,-1,202,206,207,-1,62,149,277,-1,277,207,62,-1,204,203,207,-1,207,277,204,-1,217,223,227,-1,223,222,268,-1,268,227,223,-1,268,222,269,-1,213,278,269,-1,269,222,213,-1,204,277,278,-1};
			return value;
		}
		private int[] getIndexedFaceSet_5_9_coordIndex_3()
		{
			int[] value = {278,213,204,-1,151,137,269,-1,269,278,151,-1,278,277,149,-1,149,151,278,-1,200,197,209,-1,220,201,200,-1,218,221,216,-1,202,211,198,-1,209,220,200,-1,266,279,280,-1,280,267,266,-1,279,266,263,-1,263,262,279,-1,265,267,280,-1,253,264,262,-1,262,229,253,-1,265,280,279,-1,279,262,265,-1,264,265,262,-1,168,10,169,-1,169,170,168,-1,169,10,154,-1,154,171,169,-1,154,155,8,-1,8,167,154,-1,171,154,167,-1,127,256,255,-1,255,156,127,-1,125,156,255,-1,255,254,125,-1,157,129,259,-1,259,258,157,-1,257,128,157,-1,157,258,257,-1,261,260,130,-1,130,158,261,-1,281,282,283,-1,283,271,281,-1,282,281,276,-1,276,261,282,-1,272,271,283,-1,186,144,40,-1,261,158,146,-1,146,275,284,-1,284,282,146,-1,261,146,282,-1,282,284,270,-1,270,283,282,-1,283,270,272,-1,281,271,270,-1,270,284,281,-1,281,284,275,-1,275,274,281,-1,281,274,273,-1,281,273,276,-1,276,273,186,-1,186,252,276,-1,21,163,174,-1,18,173,174,-1,174,163,18,-1,173,175,174,-1,212,215,216,-1,73,72,69,-1};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_5_9_normalIndex_1()
		{
			int[] value = {0,-1,1,-1,2,-1,3,-1,4,-1,5,-1,6,-1,7,-1,8,-1,9,-1,10,-1,11,-1,12,-1,13,-1,14,-1,15,-1,16,-1,17,-1,18,-1,19,-1,20,-1,21,-1,22,-1,23,-1,24,-1,25,-1,26,-1,27,-1,28,-1,29,-1,30,-1,31,-1,32,-1,33,-1,34,-1,35,-1,36,-1,37,-1,38,-1,39,-1,40,-1,41,-1,42,-1,43,-1,44,-1,45,-1,46,-1,47,-1,48,-1,49,-1,50,-1,51,-1,52,-1,53,-1,54,-1,55,-1,56,-1,57,-1,58,-1,59,-1,60,-1,61,-1,62,-1,63,-1,64,-1,65,-1,66,-1,67,-1,68,-1,69,-1,70,-1,71,-1,72,-1,73,-1,74,-1,75,-1,76,-1,77,-1,78,-1,79,-1,80,-1,81,-1,82,-1,83,-1,84,-1,85,-1,86,-1,87,-1,88,-1,89,-1,90,-1,91,-1,92,-1,93,-1,94,-1,95,-1,96,-1,97,-1,98,-1,99,-1,100,-1,101,-1,102,-1,103,-1,104,-1,105,-1,106,-1,107,-1,108,-1,109,-1,110,-1,111,-1,112,-1,113,-1,114,-1,115,-1,116,-1,117,-1,118,-1,119,-1,120,-1,121,-1,122,-1,123,-1,124,-1,125,-1,126,-1,127,-1,128,-1,129,-1,130,-1,131,-1,132,-1,133,-1,134,-1,135,-1,136,-1,137,-1,138,-1,139,-1,140,-1,141,-1,142,-1,143,-1,144,-1,145,-1,146,-1,147,-1,148,-1,149,-1,150,-1,151,-1,152,-1,153,-1,154,-1,155,-1,156,-1,157,-1,158,-1,159,-1,160,-1,161,-1,162,-1,163,-1,164,-1,165,-1,166,-1,167,-1,168,-1,169,-1,170,-1,171,-1,172,-1,173,-1,174,-1,175,-1,176,-1,177,-1,178,-1,179,-1,180,-1,181,-1,182,-1,183,-1,184,-1,185,-1,186,-1,187,-1,188,-1,189,-1,190,-1,191,-1,192,-1,193,-1,194,-1,195,-1,196,-1,197,-1,198,-1,199,-1,200,-1,201,-1,202,-1,203,-1,204,-1,205,-1,206,-1,207,-1,208,-1,209,-1,210,-1,211,-1,212,-1,213,-1,214,-1,215,-1,216,-1,217,-1,218,-1,219,-1,220,-1,221,-1,222,-1,223,-1,224,-1,225,-1,226,-1,227,-1,228,-1,229,-1,230,-1,231,-1,232,-1,233,-1,234,-1,235,-1,236,-1,237,-1,238,-1,239,-1,240,-1,241,-1,242,-1,243,-1,244,-1,245,-1,246,-1,247,-1,248,-1,249,-1,250,-1,251,-1,252,-1,253,-1,254,-1,255,-1,256,-1,257,-1,258,-1,259,-1,260,-1,261,-1,262,-1,263,-1,264,-1,265,-1,266,-1,267,-1,268,-1,269,-1,270,-1,271,-1,272,-1,273,-1,274,-1,275,-1,276,-1,277,-1,278,-1,279,-1,280,-1,281,-1,282,-1,283,-1,284,-1,285,-1,286,-1,287,-1,288,-1,289,-1,290,-1,291,-1,292,-1,293,-1,294,-1,295,-1,296,-1,297,-1,298,-1,299,-1,300,-1,301,-1,302,-1,303,-1,304,-1,305,-1,306,-1,307,-1,308,-1,309,-1,310,-1,311,-1,312,-1,313,-1,314,-1,315,-1,316,-1,317,-1,318,-1,319,-1,320,-1,321,-1,322,-1,323,-1,324,-1,325,-1,326,-1,327,-1,328,-1,329,-1,330,-1,331,-1,332,-1,333,-1,334,-1,335,-1,336,-1,337,-1,338,-1,339,-1,340,-1,341,-1,342,-1,343,-1,344,-1,345,-1,346,-1,347,-1,348,-1,349,-1,350,-1,351,-1,352,-1,353,-1,354,-1,355,-1,356,-1,357,-1,358,-1,359,-1,360,-1,361,-1,362,-1,363,-1,364,-1,365,-1,366,-1,367,-1,368,-1,369,-1,370,-1,371,-1,372,-1,373,-1,374,-1,375,-1,376,-1,377,-1,378,-1,379,-1,380,-1,381,-1,382,-1,383,-1,384,-1,385,-1,386,-1,387,-1,388,-1,389,-1,390,-1,391,-1,392,-1,393,-1,394,-1,395,-1,396,-1,397,-1,398,-1,399,-1,400,-1,401,-1,402,-1,403,-1,404,-1,405,-1,406,-1,407,-1,408,-1,409,-1,410,-1,411,-1,412,-1,413,-1,414,-1,415,-1,416,-1,417,-1,418,-1,419,-1,420,-1,421,-1,422,-1,423,-1,424,-1,425,-1,426,-1,427,-1,428,-1,429,-1,430,-1,431,-1,432,-1,433,-1,434,-1,435,-1,436,-1,437,-1,438,-1,439,-1,440,-1,441,-1,442,-1,443,-1,444,-1,445,-1,446,-1,447,-1,448,-1,449,-1,450,-1,451,-1,452,-1,453,-1,454,-1,455,-1,456,-1,457,-1,458,-1,459,-1,460,-1,461,-1,462,-1,463,-1,464,-1,465,-1,466,-1,467,-1,468,-1,469,-1,470,-1,471,-1,472,-1,473,-1,474,-1,475,-1,476,-1,477,-1,478,-1,479,-1,480,-1,481,-1,482,-1,483,-1,484,-1,485,-1,486,-1,487,-1,488,-1,489,-1,490,-1,491,-1,492,-1,493,-1,494,-1,495,-1,496,-1,497,-1,498,-1,499,-1};
			return value;
		}
		private int[] getIndexedFaceSet_5_9_normalIndex_2()
		{
			int[] value = {500,-1,501,-1,502,-1,503,-1,504,-1,505,-1,506,-1,507,-1,508,-1,509,-1,510,-1,511,-1,512,-1,513,-1,514,-1,515,-1,516,-1,517,-1,518,-1,519,-1,520,-1,521,-1,522,-1,523,-1,524,-1,525,-1,526,-1,527,-1,528,-1,529,-1,530,-1,531,-1,532,-1,533,-1,534,-1,535,-1,536,-1,537,-1,538,-1,539,-1,540,-1,541,-1,542,-1,543,-1,544,-1,545,-1,546,-1,547,-1,548,-1,549,-1,550,-1,551,-1,552,-1,553,-1,554,-1,555,-1,556,-1,557,-1,558,-1,559,-1,560,-1,561,-1,562,-1,563,-1};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_5_9_colorIndex_1()
		{
			int[] value = {0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1};
			return value;
		}
		private int[] getIndexedFaceSet_5_9_colorIndex_2()
		{
			int[] value = {0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1};
			return value;
		}
		private int[] getIndexedFaceSet_5_9_colorIndex_3()
		{
			int[] value = {};
			return value;
		}


		/** Define subarrays using type float[] */
		private float[] getCoordinate_6_9_point_1()
		{
			float[] value = {-23.495f,90.55f,-8.13f,-28.825f,91.31f,0.0f,9.77497f,126.11f,0.0f,17.395f,124.84f,-6.1f,42.795f,142.11f,0.0f,46.105f,139.07f,-3.56f,74.295f,144.4f,0.0f,76.075f,140.08f,-1.27f,92.325f,139.57f,0.0f,74.805f,80.9f,-9.91f,74.295f,98.93f,0.0f,84.965f,74.04f,0.0f,35.175f,88.77f,-11.68f,50.165f,110.11f,-6.1f,60.835f,121.79f,-3.56f,-194.695f,-8.0f,0.0f,-200.025f,-15.87f,-7.62f,-205.105f,-19.68f,0.0f,-177.165f,7.75f,0.0f,-180.975f,1.39999f,-13.97f,-156.335f,22.23f,-5.33f,-151.515f,27.05f,0.0f,-117.475f,50.67f,0.0f,-118.495f,44.58f,-18.29f,-155.325f,20.19f,-13.97f,-74.805f,71.25f,0.0f,-75.565f,65.91f,-22.35f,-26.545f,75.57f,-24.64f,31.625f,74.04f,-26.67f,87.755f,62.1f,-20.32f,154.055f,26.04f,-11.68f,155.325f,30.1f,0.0f,195.965f,-4.95001f,0.0f,188.345f,-14.1f,-14.73f,213.995f,-28.57f,0.0f,204.085f,-41.02f,-11.94f,226.445f,-52.45f,0.0f,217.045f,-63.88f,-7.87f,232.535f,-72.52f,0.0f,226.945f,-79.88f,-9.65f,228.725f,-91.31f,0.0f,224.665f,-87.5f,-7.37f,-157.865f,13.84f,-22.35f,-141.605f,12.57f,-32.77f,-112.145f,30.61f,-29.97f,-75.055f,47.12f,-32.0f,-26.545f,57.79f,-35.81f,24.005f,56.52f,-34.04f,84.455f,48.64f,-28.45f,150.745f,19.18f,-18.29f,-153.285f,-0.380005f,-36.58f,-163.445f,1.14001f,-31.75f,-171.065f,-5.97f,-27.43f,-187.325f,-22.99f,-20.83f,-201.545f,-37.21f,-10.16f,-151.005f,-10.29f,-35.81f,-161.925f,-5.97f,-30.99f,-203.325f,-44.83f,-13.97f,-196.465f,-54.48f,-14.99f,-223.135f,-77.6f,-7.37f,-228.215f,-75.31f,-7.37f,-233.045f,-79.12f,-4.06f,-234.315f,-77.6f,0.0f,-210.695f,-46.1f,0.0f,-207.895f,-43.81f,-5.08f,-171.835f,-19.68f,-30.48f,-164.465f,-11.81f,-30.73f,-170.815f,-22.48f,-30.73f,-184.275f,-27.05f,-26.42f,-180.975f,-32.38f,-25.91f,-192.655f,-58.29f,-16.26f,-216.785f,-78.61f,-8.38f,-174.375f,-43.31f,-25.91f,-165.485f,-28.07f,-34.54f,-142.625f,-35.94f,-34.8f,-171.835f,-48.89f,-27.43f,-160.405f,-22.73f,-34.8f,-158.365f,-13.59f,-34.54f,-144.655f,-24.26f,-38.61f,-191.135f,-63.37f,-18.29f,-212.975f,-81.41f,-10.92f,-167.765f,-70.48f,-17.02f,-154.555f,-41.02f,-31.75f,-132.205f,-61.09f,-22.35f,-185.295f,-71.25f,-10.16f,-190.625f,-66.93f,-17.27f,-103.755f,-39.75f,-43.18f,-101.985f,-49.66f,-35.05f,-140.335f,-23.24f,-40.39f,-100.715f,-9.51999f,-49.28f,-135.255f,-5.45999f,-40.13f,-134.235f,7.48999f,-36.58f,-104.015f,14.1f,-42.67f,-72.515f,23.75f,-46.23f,-60.575f,-1.39999f,-51.05f,-21.975f,26.04f,-48.01f,-16.895f,7.23999f,-51.05f,26.035f,31.12f,-46.23f,28.065f,7.48999f,-49.02f,81.915f,25.02f,-43.94f};
			return value;
		}
		private float[] getCoordinate_6_9_point_2()
		{
			float[] value = {81.405f,-1.89999f,-44.7f,141.095f,0.130005f,-33.02f,130.935f,-22.22f,-28.45f,176.405f,-24.76f,-23.37f,161.675f,-44.58f,-21.84f,194.185f,-48.89f,-13.97f,183.515f,-59.82f,-14.22f,206.125f,-65.4f,-9.91f,195.455f,-72.26f,-10.67f,220.345f,-83.69f,-18.29f,-64.895f,-34.16f,-41.15f,-15.365f,-26.8f,-37.59f,22.475f,-24.76f,-38.1f,70.735f,-27.3f,-30.99f,120.525f,-40.77f,-17.27f,154.055f,-60.83f,-9.65f,174.875f,-69.21f,-7.11f,195.965f,-86.23f,-5.59f,205.355f,-94.36f,-11.94f,-75.565f,-64.9f,-73.66f,-76.325f,-67.69f,-71.37f,-53.465f,-53.72f,-64.52f,-29.845f,-68.96f,-77.22f,-44.065f,-71.75f,-80.77f,-64.385f,-69.21f,-80.01f,-18.925f,-40.0f,0.0f,-62.355f,-49.91f,0.0f,68.455f,-38.23f,0.0f,123.825f,-45.08f,0.0f,171.325f,-71.75f,0.0f,195.705f,-88.26f,0.0f,-127.635f,-63.63f,0.0f,-92.835f,-56.51f,0.0f,-159.895f,-73.28f,0.0f,-182.495f,-73.28f,0.0f,-207.395f,-85.72f,0.0f,-210.435f,-84.45f,-7.87f,-226.185f,-93.85f,0.0f,-223.905f,-91.57f,-4.57f,232.285f,-144.4f,-86.61f,217.555f,-117.73f,-73.15f,231.015f,-135.76f,-63.25f,229.745f,-112.14f,-9.65f,224.155f,-97.92f,-16.51f,228.215f,-104.01f,0.0f,234.315f,-121.03f,-5.84f,230.505f,-113.92f,0.0f,218.565f,-86.23f,-24.13f,-230.505f,-84.45f,-3.81f,-231.015f,-84.2f,0.0f,-228.725f,-89.53f,-4.83f,-230.505f,-90.3f,0.0f,-43.815f,-73.02f,-79.25f,-63.885f,-72.01f,-78.23f,83.695f,119.76f,0.0f,95.375f,131.45f,0.0f,24.255f,-36.45f,0.0f,151.005f,-61.59f,0.0f,205.615f,-96.9f,0.0f,215.775f,-119.51f,-73.15f,210.695f,-104.52f,-52.32f,213.745f,-101.47f,-52.32f,232.535f,-127.89f,-21.59f,-154.815f,25.02f,0.0f,17.395f,124.84f,6.1f,-23.495f,90.55f,8.13f,46.105f,139.07f,3.56f,76.075f,140.08f,1.27f,74.805f,80.9f,9.91f,50.165f,110.11f,6.1f,35.175f,88.77f,11.68f,60.835f,121.79f,3.56f,-200.025f,-15.87f,7.62f,-180.975f,1.39999f,13.97f,-156.335f,22.23f,5.33f,-155.325f,20.19f,13.97f,-118.495f,44.58f,18.29f,-75.565f,65.91f,22.35f,-26.545f,75.57f,24.64f,31.625f,74.04f,26.67f,87.755f,62.1f,20.32f,154.055f,26.04f,11.68f,188.345f,-14.1f,14.73f,204.085f,-41.02f,11.94f,217.045f,-63.88f,7.87f,226.945f,-79.88f,9.65f,224.665f,-87.5f,7.37f,-157.865f,13.84f,22.35f,-141.605f,12.57f,32.77f,-112.145f,30.61f,29.97f,-75.055f,47.12f,32.0f,-26.545f,57.79f,35.81f,24.005f,56.52f,34.04f,84.455f,48.64f,28.45f,150.745f,19.18f,18.29f,-163.445f,1.14001f,31.75f,-153.285f,-0.380005f,36.58f,-171.065f,-5.97f,27.43f,-187.325f,-22.99f,20.83f,-201.545f,-37.21f,10.16f};
			return value;
		}
		private float[] getCoordinate_6_9_point_3()
		{
			float[] value = {-161.925f,-5.97f,30.99f,-151.005f,-10.29f,35.81f,-203.325f,-44.83f,13.97f,-228.215f,-75.31f,7.37f,-223.135f,-77.6f,7.37f,-196.465f,-54.48f,14.99f,-207.895f,-43.81f,5.08f,-233.045f,-79.12f,4.06f,-170.815f,-22.48f,30.73f,-164.465f,-11.81f,30.73f,-171.835f,-19.68f,30.48f,-184.275f,-27.05f,26.42f,-180.975f,-32.38f,25.91f,-216.785f,-78.61f,8.38f,-192.655f,-58.29f,16.26f,-174.375f,-43.31f,25.91f,-165.485f,-28.07f,34.54f,-171.835f,-48.89f,27.43f,-142.625f,-35.94f,34.8f,-160.405f,-22.73f,34.8f,-158.365f,-13.59f,34.54f,-144.655f,-24.26f,38.61f,-212.975f,-81.41f,10.92f,-191.135f,-63.37f,18.29f,-154.555f,-41.02f,31.75f,-167.765f,-70.48f,17.02f,-132.205f,-61.09f,22.35f,-190.625f,-66.93f,17.27f,-185.295f,-71.25f,10.16f,-101.985f,-49.66f,35.05f,-103.755f,-39.75f,43.18f,-100.715f,-9.51999f,49.28f,-140.335f,-23.24f,40.39f,-135.255f,-5.45999f,40.13f,-134.235f,7.48999f,36.58f,-104.015f,14.1f,42.67f,-60.575f,-1.39999f,51.05f,-72.515f,23.75f,46.23f,-16.895f,7.23999f,51.05f,-21.975f,26.04f,48.01f,28.065f,7.48999f,49.02f,26.035f,31.12f,46.23f,81.405f,-1.89999f,44.7f,81.915f,25.02f,43.94f,130.935f,-22.22f,28.45f,141.095f,0.130005f,33.02f,161.675f,-44.58f,21.84f,176.405f,-24.76f,23.37f,183.515f,-59.82f,14.22f,194.185f,-48.89f,13.97f,195.455f,-72.26f,10.67f,206.125f,-65.4f,9.91f,220.345f,-83.69f,18.29f,-64.895f,-34.16f,41.15f,-15.365f,-26.8f,37.59f,22.475f,-24.76f,38.1f,70.735f,-27.3f,30.99f,120.525f,-40.77f,17.27f,154.055f,-60.83f,9.65f,174.875f,-69.21f,7.11f,195.965f,-86.23f,5.59f,205.355f,-94.36f,11.94f,-76.325f,-67.69f,71.37f,-75.565f,-64.9f,73.66f,-53.465f,-53.72f,64.52f,-29.845f,-68.96f,77.22f,-64.385f,-69.21f,80.01f,-44.065f,-71.75f,80.77f,-210.435f,-84.45f,7.87f,-223.905f,-91.57f,4.57f,231.015f,-135.76f,63.25f,217.555f,-117.73f,73.15f,232.285f,-144.4f,86.61f,224.155f,-97.92f,16.51f,229.745f,-112.14f,9.65f,234.315f,-121.03f,5.84f,218.565f,-86.23f,24.13f,-230.505f,-84.45f,3.81f,-228.725f,-89.53f,4.83f,-63.885f,-72.01f,78.23f,-43.815f,-73.02f,79.25f,213.745f,-101.47f,52.32f,210.695f,-104.52f,52.32f,215.775f,-119.51f,73.15f,232.535f,-127.89f,21.59f};
			return value;
		}


		/** Define subarrays using type float[] */
		private float[] getNormal_6_10_vector_1()
		{
			float[] value = {0.5968871433635611f,-0.6620639605522747f,0.4532075134252782f,0.44979346400519843f,-0.5767400040518986f,0.6819507368310558f,0.35185071417349506f,-0.726132571095639f,0.5907051414450684f,0.23951339274762967f,-0.6170354363763614f,0.749600296791799f,0.05338412365833096f,-0.7343230983569567f,0.6766976596388311f,-0.062331354465761483f,-0.30505160771811207f,0.9502938066088081f,-0.08375917902054308f,-0.3126662521201632f,0.9461628901594772f,-0.7637257057344001f,-0.3273986854233045f,0.5563570321147965f,0.056123390602575374f,-0.12556412505391162f,0.990496751901144f,-0.08728173543653076f,-0.1941766782250585f,0.9770759009885923f,-0.04185567634495949f,-0.0931168033825066f,0.9947750314948247f,-0.12156206539310052f,-0.10362321893752155f,0.9871600137537936f,-0.07392474084737069f,-0.06301570790982473f,0.995270894403766f,0.7365670224863352f,-0.6564779712399613f,0.1628056960375746f,0.6400066250818098f,-0.7123375325513732f,0.28803951043218523f,0.6898340476520036f,-0.7112398789808807f,0.13515480475112718f,0.5558927094815065f,-0.8011256490580219f,0.2217678740635633f,0.5527724102116306f,-0.7994077118888455f,0.23535074395774758f,0.554688521231741f,-0.7929579115994875f,0.25206823450312765f,0.4187955141023903f,-0.8683189789479587f,0.26576769586706556f,0.45117344092621886f,-0.8713510721344503f,0.19284666264402883f,0.39170049882741015f,-0.8978259688975235f,0.2011945545773579f,0.33807280924082406f,-0.8903706033899822f,0.30487204573554527f,0.17685212494034372f,-0.744953944118038f,0.6432471896923175f,0.01802610741979338f,-0.7421238530876585f,0.6700203326240314f,0.005657632940100126f,-0.7139235716766859f,0.7002007747738638f,-0.16740350851418662f,-0.6830913022053445f,0.710888414723821f,-0.21251288977192542f,-0.5813043668886549f,0.7854447814563194f,-0.7102634087386234f,-0.6451666456311698f,0.28157750189249103f,-0.4781063128860536f,-0.7843484704847795f,0.39523642345650517f,-0.49957818532917175f,-0.7999617915284596f,0.33238948364499893f,-0.6194212832326863f,-0.7182103785584192f,0.3170033533093051f,-0.568948570420444f,-0.5335787881013867f,0.6257724834992255f,-0.6243031734671689f,-0.4765533862466943f,0.6189849898467902f,-0.5881763202583925f,-0.26470339729711856f,0.7641863174296311f,-0.5626672970917738f,-0.29335041242849985f,0.7728848868437438f,-0.5234536802383188f,-0.147346740262086f,0.8392170057732965f,-0.515323514476313f,-0.15636871963929988f,0.8426093394605517f,-0.589590817004138f,-0.44015185683885644f,0.6772363039779393f,-0.9048306380702189f,0.18347018259965592f,0.38421375366622373f,-0.7074554647652609f,0.38836238996744654f,0.5904925227575214f,0.5424646492136312f,-0.7405114873451181f,0.3967049803864997f,0.274550861287121f,-0.8046274004485165f,0.5264946068232444f,0.3869588857481044f,-0.7211147881438168f,0.5746792871340359f,0.40420351684560546f,-0.4715464162067921f,0.7837496375324045f,0.3297582208395269f,-0.5128178142726979f,0.7926395177842969f,0.24235439597049022f,-0.43801243139558577f,0.8656843863075654f,0.12998260488805038f,-0.4501754863356574f,0.8834288618383324f,0.18049971445707957f,-0.5232291740871128f,0.8328571813132373f,0.015556385071861913f,-0.5319023355032726f,0.8466628044089688f,-0.041813873441320905f,-0.37190569459401235f,0.9273282883188555f,-0.1729385705256972f,-0.31705387237407245f,0.9325068862143238f,-0.14306209700833794f,-0.4857659702543572f,0.8623019532289254f,-0.33989939868423824f,-0.4237778782121876f,0.8395717412538786f,-0.3603172327749309f,-0.5512474224102036f,0.752527588232832f,-0.48756159979919844f,-0.47230051300764525f,0.73431322459422f,0.30526942702818144f,-0.5116252157918161f,0.8031501823991969f,0.3722044645072944f,-0.6522691338759009f,0.6603096346363729f,0.7374182964631479f,-0.5800890627435127f,0.34599268103059894f,0.5248256882684198f,-0.5221048495109559f,0.6722830676513588f,0.6476096233239098f,-0.3578209855784403f,0.6727301970760173f,0.5700177820716849f,-0.35660027993166415f,0.7402134614249702f,0.6771825048911256f,-0.13434270699792086f,0.7234472283075326f,0.454036824971483f,0.17238133281897844f,0.8741482927200439f,0.44451584580315767f,0.18863324066027992f,0.8756843971134259f,0.3573712899945561f,0.17447515138992856f,0.917520671502876f,0.7744296042856523f,-0.41824718039131403f,0.47468735405599716f,0.09509221424185792f,0.21094692067626247f,0.9728611758353723f,0.20622181515404067f,0.043272821410372815f,0.9775479660260967f,0.7227147334976523f,-0.5419213334988747f,0.42895766957150766f,0.8026697494189426f,-0.5663061117658955f,0.18713273669864675f,0.6999343759109797f,-0.13336817755284272f,0.701644353383066f,0.8584108460156017f,-0.19880456163815924f,0.472871616524653f,0.8935259146727903f,-0.18905412047770254f,0.4072713829113896f,0.27044107423824476f,-0.2235124346197824f,0.93643142671271f,0.0925219576113947f,-0.05506227093086746f,0.9941870214802098f,0.663421357964409f,-0.38499916286974756f,0.6415978073421487f,0.41781774913061553f,-0.21959023976941666f,0.8815942689862701f,0.2977080804710039f,0.023238830671186664f,0.9543740648044173f,0.2250982846789191f,0.22996195004239942f,0.946809518206965f,0.32264128855232094f,0.2860907403662764f,0.9022497920188033f,0.3848030676452451f,0.17781619803631238f,0.9057085617607465f,0.29411536550296097f,-0.024371020934455874f,0.9554591593122502f,0.1801267037948687f,0.16232210056497923f,0.9701576708185986f,0.4333686828179824f,0.13642503011787366f,0.8908309581003259f,0.3264602440735567f,0.1971306139876919f,0.9244258921451028f,0.5056339621796127f,-0.10180271429038647f,0.8567207851182648f,0.15388140155574084f,0.41739162100824917f,0.8956030085743052f,0.294177100484124f,-0.12423064228040172f,0.9476426441804698f,0.7905379847415837f,-0.4114633862507419f,0.4535940657193261f,0.3516999060146208f,-0.20930594219239365f,0.9124133924226787f,0.4962197211547714f,-0.13514963762142654f,0.8576132950158117f,0.20115069604667f,-0.07268391882371092f,0.976859992744287f,0.22569674073490462f,-0.09179967531653715f,0.9698627742280964f,0.21739289996898747f,-0.15992576723681842f,0.9628935953763472f,0.34333868509127463f,-0.28301800247743625f,0.895555334746813f,0.44768079062811533f,-0.1845345424810334f,0.8749450910393756f,0.45775778235537046f,-0.2084143924849593f,0.8643039128097353f,0.5257334401031221f,-0.1753207480473017f,0.8323863197226824f,0.4798361982612759f,-0.020508239922241527f,0.8771183699669374f};
			return value;
		}
		private float[] getNormal_6_10_vector_2()
		{
			float[] value = {0.025159179575629093f,0.4380240647760681f,0.8986111140866956f,0.04764919604095344f,0.4295309607625592f,0.9017941604729117f,0.015439567864267801f,0.4487242386718812f,0.8935368920041887f,0.30605469303771393f,0.45967179229984934f,0.833686012976969f,-0.3105540652267321f,0.6910539434334522f,0.6526872297174395f,0.2288728371149724f,0.5063832851277006f,0.8313802938332262f,0.07867238000164604f,0.640652250648461f,0.7637901219339891f,0.23016722726215885f,0.35697735166844724f,0.9053122212199676f,0.1554753431546136f,0.18034739519413492f,0.9712374759643728f,0.2878849684767474f,0.341844028007617f,0.8945752653861326f,0.38315332295350624f,-0.010960032071382879f,0.9236197317114229f,0.29082790692655697f,-0.09701261698439834f,0.9518443573917726f,-0.31212581459239475f,0.002006349032099022f,0.9500386573337927f,0.30475851284131156f,-0.24761815119725714f,0.9196779327832132f,0.3315595296871804f,-0.2736240693758175f,0.9028832410294442f,0.10939304349715963f,-0.045775120638152623f,0.9929440066614992f,0.2857654882062865f,-0.221022686724942f,0.9324628988346458f,0.18168334847771397f,-0.24138701485625094f,0.9532698830576333f,0.07449575466478353f,-0.15347372413202967f,0.9853406510126183f,0.042324278114006596f,-0.16863763172142826f,0.9847690108088882f,0.02999713792524888f,-0.15165254833632386f,0.9879785808909991f,-0.019142241959205192f,-0.16463790447593865f,0.9861683096624769f,-0.04410377216240556f,-0.12087755799291648f,0.9916871851822607f,-0.05389596910978853f,-0.1216504772001817f,0.991108665036627f,-0.08533138843657186f,-0.026502278116375587f,0.9960000920693377f,-0.191191201902207f,-0.024080547505913808f,0.9812573829261133f,-0.19351173968787055f,0.2802202492984945f,0.9402285990577309f,-0.09449433645202972f,0.24048648836850875f,0.966041960419253f,-0.10140392825549477f,0.15126616208646762f,0.983278084542712f,-0.20129137892016521f,0.2232225564339081f,0.9537575536117808f,-0.20855991324934042f,0.18161799707866383f,0.9609982652026807f,-0.15491955663175472f,0.12883064246459855f,0.9794909884910525f,-0.15423777360223928f,0.1314114736600937f,0.9792557039837484f,0.24726402941486747f,-0.2742346962702403f,0.9293308512683158f,0.27465141125580494f,-0.4976399755901691f,0.8227521236616837f,0.1719435414185403f,-0.41915794261361644f,0.8914830551998005f,0.2680493400956171f,-0.5009982051350133f,0.8228914568312151f,0.24349927499375237f,-0.48497694131723845f,0.8399437299415318f,0.17620680466944927f,-0.49789498805366156f,0.8491476566882975f,0.048873712936172195f,-0.35211747133480087f,0.9346789002457573f,-0.04172045779751332f,-0.36359814119362427f,0.9306211877674542f,0.012256837206838523f,-0.43184450317617623f,0.9018647875475605f,-0.13918046976012424f,-0.43748129863033675f,0.8883911920916738f,-0.09314398356527387f,-0.5389860449297227f,0.8371488766620946f,-0.34064099515146856f,-0.4897073687959371f,0.8025898114037937f,-0.3441760289065861f,-0.45898280841087397f,0.8190712073497394f,-0.43343854925786895f,-0.40350476583537476f,0.805800799183876f,-0.41359934819608496f,-0.24699682943980109f,0.8763150948251773f,-0.4646907418754944f,-0.18188874199965419f,0.8665904453367727f,-0.3056276478219343f,0.14159319238246165f,0.9415641819641266f,-0.23217222527604334f,0.04139315948663388f,0.9717935295926209f,-0.1959430224123743f,0.09822620232425898f,0.9756833221618876f,-0.1526018806946521f,-0.20204720651489813f,0.967413868180512f,-0.4508324123193487f,-0.6369997724309513f,0.6252850757256511f,-0.8086965163949947f,0.37706095242956794f,0.451480877251193f,0.003278081594060283f,0.197481621535569f,0.9803011085053127f,-0.0926511532063158f,0.29920852135143255f,0.949678906030996f,-0.05851859626902291f,0.29584469929686424f,0.9534419163161703f,-0.12004036499444737f,0.36038439964888724f,0.9250477799885317f,-0.04401086473492711f,0.36564632060480917f,0.9297127577985843f,-0.004565924117685607f,0.3214244689627365f,0.9469242119034523f,-0.019627347375950784f,0.32370657171499845f,0.9459539220614851f,-0.09976475485319698f,0.5047471771686042f,0.8574831081889644f,-0.07851390004263066f,0.4988616414838879f,0.8631179700111085f,-0.08134492451391849f,0.5475716456730634f,0.8327954707554059f,0.13970789381965706f,0.4524416250916176f,0.880782765662982f,0.14232498943473892f,0.5503983854682762f,0.8226817213578507f,0.10769985314591923f,0.5637784973204888f,0.8188739509786587f,0.11191136777962638f,0.5323701489856544f,0.8390815635149452f,0.2168154325039377f,0.45462872675478544f,0.8638887596429607f,0.20907312961999616f,0.34092274714600695f,0.916547929433764f,0.6887169115917531f,0.2698489335151427f,0.6729417276170778f,0.8091358548834242f,0.4522847360094034f,0.3751502177994498f,0.8435329056526985f,0.18428474655579727f,0.5044713760640751f,0.07075839483390714f,-0.7362786786395354f,0.672968763718903f,0.09818067399459547f,-0.738985997404268f,0.666528507188092f,0.003453988682928586f,-0.6370158845755199f,0.7708429365056451f,-0.01587189157686001f,-0.7542715654036515f,0.656370694563139f,-0.09528502398442f,-0.8935534117795131f,0.4387289191533657f,-0.16157693401272147f,0.9358036867149987f,0.3133119121987947f,-0.2074785967538087f,0.909262911908972f,0.36082348720099594f,0.15760035867420705f,0.927583701141341f,0.33874858571319927f,0.11980271054163658f,0.9683906690059002f,0.21878487774337144f,0.5195174938766336f,0.6888941374325028f,0.5054962323967112f,0.5329864668608876f,0.7870508820150485f,0.3106063992619633f,-0.2870984869997861f,0.943421815978383f,0.16592087240152642f,-0.1947415164462348f,0.9518265129675518f,0.2368586730188526f,-0.33458932449920986f,0.9045897837401674f,0.26413501676998347f,-0.1973573118187278f,0.9114319491264881f,0.36102893732106334f,-0.2113662234102195f,0.944082032109351f,0.25304828837512355f,-0.2826483013015476f,0.9448947357500445f,0.16517831614108217f,0.030363811909655827f,0.9817403642000934f,0.18778683720267272f,0.0f,0.9867364722956423f,0.16233032446696805f,-0.42169716422710624f,0.8553466821790986f,0.30092117733390744f,-0.42785244106154624f,0.8563927477839635f,0.28902205836355993f,-0.30548106238878775f,0.6947653728514286f,0.6511393070675682f,-0.3843442358532833f,0.8882937505145382f,0.251423390246753f,-0.39017601041586325f,0.8733295927170321f,0.2916472241950252f,-0.8303342717226622f,-0.5358380546793196f,0.15304436075948377f,-0.9278641778974158f,-0.21921235670457323f,0.3016852831060533f};
			return value;
		}
		private float[] getNormal_6_10_vector_3()
		{
			float[] value = {-0.9789796451979944f,-0.2033230655984937f,0.016080587167131614f,-0.9040466884304891f,-0.38658274520010977f,0.1823550554588851f,-0.9162799032958324f,-0.21173370116523205f,-0.3399999685397814f,-0.5815734628610248f,-0.6661136454092617f,0.46697421630687563f,0.22906233483412272f,-0.45180374849197447f,0.8622086868090235f,0.586146445645828f,0.21772573808376774f,0.7804023623956049f,0.740176317544726f,-0.5093827064089645f,0.43893994732469693f,0.7220919473864342f,-0.5005241097665434f,0.477555059717805f,0.8972479406437827f,0.4318857491589607f,0.09176509512823644f,0.8888347018919582f,0.44441735094598006f,0.11165164974504972f,0.4139383925275154f,0.238467582014931f,0.8785147804787855f,0.14728249960246295f,0.3267227502098324f,0.9335738373616593f,0.21710247198262514f,0.2974810187716512f,0.929715849133279f,-0.1818387291920123f,0.6165876281309128f,0.7659989382510455f,0.08601722936673195f,0.2857819375194634f,0.9544263829335884f,-0.14998830646655792f,0.6349920038960585f,0.7578183574652714f,0.12987916887073545f,0.42126976685577266f,0.897587424726266f,0.43999723975535876f,-0.1962182993803482f,0.8762994967452334f,0.34143190618403635f,-0.06858272489946707f,0.9374010151930172f,0.19405951637794236f,0.2798516853727148f,0.9402254720529594f,0.3025635814089869f,0.7839689260237784f,0.5420774872968722f,0.5979039649000705f,0.7275901770051557f,0.33633819747745203f,0.9884678494405316f,0.08264239396961681f,0.12689186475649814f,0.8977234396361317f,0.24043238722856683f,0.3691678386580354f,0.3605054852588789f,-0.11558842373093751f,0.9255674537264464f,0.2877871180234538f,-0.29067139272401243f,0.912517789498724f,0.1232489941822467f,0.3270481100441492f,0.9369360806104196f,0.7108748613105271f,-0.32484942277442475f,0.6238026804045186f,0.48501958697927966f,-0.172784437511409f,0.857263984079767f,0.07096148248281557f,0.771170263282307f,0.6326617524656746f,0.0994042723736231f,0.5464095520584403f,0.8315980952678795f,0.5653842151348336f,0.4258089323175291f,0.7064187443966746f,0.5439768306523776f,0.5171921764633042f,0.660758246500598f,-0.29870036656253357f,0.7076146237647554f,0.640358989356495f,-0.28991016897250443f,0.7597668567743774f,-0.5819848943688459f,-0.37130579495393234f,0.6145908146295395f,-0.6959957882104082f,-0.018956061128775948f,0.4985519324516142f,-0.8666525476771202f,-0.03125745743678653f,0.6108373988195717f,-0.7911388269816663f,-0.17880622330424714f,0.6533163742860431f,-0.7356670779621789f,-0.27102564403775764f,-0.0608129397967213f,0.9606492006071722f,-0.13408407428963812f,-0.4802367018280916f,0.8668299552041147f,-0.14775007172937188f,0.06667550044436364f,0.9867746925942411f,-0.2410745485462321f,0.009185709355998432f,0.9704631290197776f,0.0f,0.0f,1.0f,-0.1479648064810115f,0.06445917617017322f,0.9868897763430825f,-0.07960133376303047f,-0.05826713742058461f,0.9951223886336581f,0.007151091754144319f,0.9560811919574207f,0.29301470316692574f,0.03791589041326801f,0.9415069417227258f,0.3348537948748513f,-0.047471742311897644f,0.954310083257079f,0.2950232171808512f,-0.07752370939536427f,0.9429503582230513f,0.32378186547211435f,0.28681484697165205f,0.8477940725863344f,0.4460744938282226f,0.4375090606652149f,0.8750181213304298f,0.2071934100766882f,0.5057938625508535f,0.8326757834120041f,0.22544091981069805f,0.48897767028018446f,0.8637062350885413f,0.12211624558812982f,0.6286954330082968f,0.7211078404065068f,0.29111086379380335f,0.698958403911503f,0.702455628675688f,0.1342134097001045f,0.5843698503053854f,-0.5843698503053854f,0.5630486267704797f,0.5843698503053839f,-0.5843698503053866f,0.5630486267704801f,0.6693203777740281f,-0.6954270150654123f,0.2615176831758095f,0.6824160716494077f,-0.6824160716494109f,0.2619477243825124f,0.2953926420446791f,-0.2953926420446791f,0.9085628068833371f,-0.8676362688391348f,0.034842086386452815f,0.4959771506946099f,0.5570782570787152f,0.8146696720733969f,0.16117425630033136f,0.6667880112635076f,0.6527198421662564f,-0.35965338268632147f,0.6731360485896233f,0.6481400671946764f,-0.3560931245980867f,0.767044532604036f,0.6388472392633642f,-0.05930337163967861f,0.7645084048506687f,0.6277498656092675f,-0.14648209836096865f,0.8263492674953921f,0.5329402675226517f,-0.1819932948289943f,0.7703933914286524f,0.6104690541620894f,-0.18390637931704049f,-0.8278539911052764f,-0.5449130978383601f,0.13314460265165431f,-0.886456525882099f,-0.42927946834104874f,0.1729565430443906f,-0.8999981003213433f,-0.35314209007854813f,0.255527070254656f,-0.9025061785077397f,-0.3500615473107524f,0.2508774817510689f,-0.9295882152093777f,-0.22433501922124024f,0.29247145039276795f,-0.9227691426188362f,-0.2502301930898054f,0.293056240160036f,-0.931724763090523f,-0.2126374194371635f,0.29440498246295427f,-0.9102079288720328f,-0.19821633812883324f,0.3636369199040167f,0.5023474270536862f,-0.8166238961956499f,0.28420498710398767f,0.5743615621039944f,-0.7810619401390877f,0.24505314044840082f,0.6003668306871504f,-0.7769657594590508f,0.1894304020976752f,0.572001466069713f,-0.7808318146019156f,0.2512289794581398f,0.4755947036593009f,-0.5275270486611467f,-0.7039352887745306f,0.5654182131156911f,-0.7000668674613274f,-0.436129138398185f,0.28277069554782697f,-0.5835685531318816f,-0.7612414055573703f,0.32580698863474034f,-0.7581596135873295f,-0.5648396289938173f,0.019949544255921596f,-0.27441512841114957f,-0.9614043649698462f,-0.02269829697439505f,-0.7705896494310043f,-0.6369272953047812f,-0.08375917902054308f,-0.3126662521201632f,-0.9461628901594772f,-0.7637257057344001f,-0.3273986854233045f,-0.5563570321147965f,-0.01730901517250599f,-0.03850756464378962f,-0.999108385241042f,0.04927872263072062f,-0.2849260278082376f,-0.9572819679557868f,-0.06198714140123417f,-0.05283973338195487f,-0.9966772581317521f,-0.06832637638294355f,-0.15200647346022128f,-0.9860149787485804f,-0.07392474084737069f,-0.06301570790982473f,-0.995270894403766f,0.7365670224863352f,-0.6564779712399613f,-0.1628056960375746f,0.6603599925689901f,-0.73499115363393f,-0.15398923434496334f,0.694454687628474f,-0.6846431370205058f,-0.221351444001523f,0.5558927094815065f,-0.8011256490580219f,-0.2217678740635633f,0.548702658674884f,-0.797028926548362f,-0.2523297101180904f,0.5557087184654563f,-0.7975953755178581f,-0.23458353986161773f};
			return value;
		}
		private float[] getNormal_6_10_vector_4()
		{
			float[] value = {0.42594698267167724f,-0.8831466351117815f,-0.19652274383295057f,0.44928400178724237f,-0.854845860325128f,-0.25958127980082235f,0.3776813636339336f,-0.8656923778608309f,-0.3285323339905414f,0.37278765838352956f,-0.9052993582633343f,-0.20362326410535697f,0.17685212494034372f,-0.744953944118038f,-0.6432471896923175f,0.02054169967521429f,-0.7155427033979775f,-0.6982669104206265f,0.003947126333250143f,-0.7409462365006197f,-0.671552749089211f,-0.1467200848485286f,-0.5546064979811398f,-0.8190756064608056f,-0.22248982749888208f,-0.6685291246503053f,-0.7096246093208818f,-0.7102634087386234f,-0.6451666456311698f,-0.28157750189249103f,-0.4873783970107452f,-0.7804265820135643f,-0.39165884161328685f,-0.4835854654034248f,-0.8091334058495413f,-0.3338386274667363f,-0.5079371054673141f,-0.5889460221606684f,-0.6286035951779245f,-0.7145628538552481f,-0.6330464110721403f,-0.2977451415538565f,-0.48642866438105853f,-0.3713087439406403f,-0.7908963087166886f,-0.7191992862217412f,-0.3588504939867091f,-0.5949610992860229f,-0.4436536530732977f,-0.2313018417404753f,-0.8658353735683143f,-0.6247984283612291f,-0.22088374649040807f,-0.748890709285206f,-0.7560764539672447f,-0.2294223021754123f,-0.6129549763407186f,-0.3527669914851711f,-0.3162468236594224f,-0.8806494173300902f,-0.8244879540682407f,0.16717930308674817f,-0.5406206564827096f,-0.9017699433961924f,0.3469456558928556f,-0.2577589591930883f,0.5424646492136312f,-0.7405114873451181f,-0.3967049803864997f,0.274550861287121f,-0.8046274004485165f,-0.5264946068232444f,0.4863830366696792f,-0.6266053359313695f,-0.6089312724949484f,0.25951423807339175f,-0.5472958052131165f,-0.7956881687151779f,0.29447429358259575f,-0.43025178926021324f,-0.8533277730493812f,0.2823553561246449f,-0.5365370738565225f,-0.7952379651684176f,0.14290586312861384f,-0.5265067531073351f,-0.8380743124662859f,0.1673028176233641f,-0.44680920690595455f,-0.8788465735493057f,0.021635118150218978f,-0.395640883206383f,-0.9181504305931023f,-0.04297454975059962f,-0.531475259428618f,-0.845983000236421f,-0.19744334508275543f,-0.4709200820654271f,-0.8597967212021824f,-0.1300493530429273f,-0.33586802307126473f,-0.9328879015462235f,-0.38877456272348443f,-0.5350972869969347f,-0.750016821696476f,-0.3207517985178517f,-0.43084464304359094f,-0.8434993641421459f,-0.48756159979919844f,-0.47230051300764525f,-0.73431322459422f,0.2475802775219544f,-0.644330093463724f,-0.7235625313953042f,0.4084402581386511f,-0.5765748095678193f,-0.7076284650178122f,0.6734139153871069f,-0.31550463985853083f,-0.668558539539168f,0.5420575318669741f,-0.6406646894096701f,-0.5438036298976819f,0.6476096233239098f,-0.3578209855784403f,-0.6727301970760173f,0.5700177820716849f,-0.35660027993166415f,-0.7402134614249702f,0.6771825048911256f,-0.13434270699792086f,-0.7234472283075326f,0.4585809268651375f,0.19081076370568448f,-0.8679255647632259f,0.44374842432474554f,0.17045275113673972f,-0.8797915636895038f,0.3573712899945561f,0.17447515138992856f,-0.917520671502876f,0.7744296042856523f,-0.41824718039131403f,-0.47468735405599716f,0.07029595409939203f,0.1559403697925387f,-0.9852619346682497f,0.22696347001821127f,0.05858935658672604f,-0.9721393267284509f,0.7886739429556104f,-0.5913802708765564f,-0.16811539763157132f,0.742752939606098f,-0.5167353149374657f,-0.42579653005042006f,0.7383688042371717f,-0.2196124591841126f,-0.6376377315533294f,0.8528197998188578f,-0.12120275497941511f,-0.5079451557228625f,0.8935259146727903f,-0.18905412047770254f,-0.4072713829113896f,0.306049958918902f,-0.18213844790393874f,-0.9344297771587132f,-0.2963796380572145f,-0.191509072728023f,-0.9356726912804109f,0.5489394218379089f,-0.21077173598451998f,-0.8088515231254337f,0.5283059548882362f,-0.5234947555674311f,-0.6684654508073131f,0.3821607186418772f,0.056863485804306294f,-0.9223446910506438f,0.18929904249542318f,0.2090037758617566f,-0.9594182060946334f,0.278932617654952f,0.26112245211273716f,-0.9241275127442032f,0.4042781671796906f,0.19289140043034445f,-0.8940649144116162f,0.3130833035102204f,-0.0034897820454961193f,-0.9497192566671491f,0.17462027486170684f,0.12064318692921325f,-0.9772169570032976f,0.3463301039074339f,0.2091288825058611f,-0.9145056422074801f,0.40102850692438063f,0.09740437443394345f,-0.9108723974713112f,0.5056339621796127f,-0.10180271429038647f,-0.8567207851182648f,0.11089616458735381f,0.29072338244625573f,-0.9503588562110747f,0.6265581715118412f,0.07386021311169384f,-0.7758669516294873f,0.7905379847415837f,-0.4114633862507419f,-0.4535940657193261f,0.3516999060146208f,-0.20930594219239365f,-0.9124133924226787f,0.4962197211547714f,-0.13514963762142654f,-0.8576132950158117f,0.20115069604667f,-0.07268391882371092f,-0.976859992744287f,0.22569674073490462f,-0.09179967531653715f,-0.9698627742280964f,0.21739289996898747f,-0.15992576723681842f,-0.9628935953763472f,0.34333868509127463f,-0.28301800247743625f,-0.895555334746813f,0.44488639781228256f,-0.188803544059402f,-0.8754594878075289f,0.46172274300838045f,-0.20656227450348932f,-0.8626378935223993f,0.5591033051579488f,-0.15795393017202725f,-0.813912802519206f,0.45071364769794325f,-0.03778273638106295f,-0.8918686408941472f,0.025159179575629093f,0.4380240647760681f,-0.8986111140866956f,0.01817965910548631f,0.44060632337491423f,-0.8975163328858415f,0.03394321119928428f,0.4546509259545661f,-0.8900226929366107f,0.1331136488293549f,0.8881521379919529f,-0.4398483105295032f,0.058940150636833735f,0.4425555893328483f,-0.8948019942943594f,0.22120630558421123f,0.6418562442865599f,-0.7342263493229706f,0.17178238402448603f,0.49329837630107565f,-0.8527294556174229f,0.07042835960832272f,0.3911934745973019f,-0.9176096727886921f,0.22363972913622088f,0.1711304114565598f,-0.9595309551163976f,0.2878849684767474f,0.341844028007617f,-0.8945752653861326f,0.2820851867019419f,-0.06364578405869972f,-0.957275906734774f,0.40360155993772384f,-0.12856116919790056f,-0.905857497948935f,-0.31212581459239475f,0.002006349032099022f,-0.9500386573337927f,0.32788061599780854f,-0.255764292983501f,-0.9094387984287604f,0.2856826672151368f,-0.2742236691890732f,-0.918252031257937f,0.22323378617588505f,-0.23364514823302052f,-0.9463491012394681f,0.24588496159150222f,-0.08437322434639877f,-0.9656198758706958f,0.14722472337657802f,-0.11830573978269297f,-0.9820023588368614f,0.09422247241442597f,-0.2560652766460338f,-0.9620564951125806f};
			return value;
		}
		private float[] getNormal_6_10_vector_5()
		{
			float[] value = {0.0415288486634483f,-0.14854536851767516f,-0.9880332121040448f,0.03411467503101574f,-0.17246903411289935f,-0.984424004796557f,-0.02417994167893657f,-0.1192698735764573f,-0.9925673920079479f,-0.043493080923028185f,-0.17091966874321973f,-0.9843245495000778f,-0.043912694765690735f,-0.027362067411751956f,-0.9986605992555078f,-0.10198054332807652f,-0.1252803977295443f,-0.986866146307207f,-0.0801300349792107f,0.23452121020419256f,-0.968802858923626f,-0.319324514467732f,-0.020697749768899387f,-0.9474193673418605f,-0.1398747677446636f,0.17912804440933003f,-0.9738317067411933f,-0.04852764385484646f,0.22122106735219008f,-0.9740155579565734f,-0.22924282968154047f,0.2020107006096533f,-0.9521761401541194f,-0.18635719125616587f,0.21254501165561324f,-0.9592161462816543f,-0.15334769054073208f,0.12999055280104052f,-0.9795850866506205f,-0.15590407909922582f,0.12979824115216218f,-0.9792069927824388f,0.24726402941486747f,-0.2742346962702403f,-0.9293308512683158f,0.27465141125580494f,-0.4976399755901691f,-0.8227521236616837f,0.1719435414185403f,-0.41915794261361644f,-0.8914830551998005f,0.2600967628824455f,-0.4813949707933943f,-0.8370236293157441f,0.2493528383585807f,-0.5103200102757369f,-0.8230410980714703f,0.1470249604818763f,-0.3362751741861965f,-0.9302164630995013f,0.05346815450429039f,-0.5150846825786197f,-0.8554700031133692f,-0.04242250536547211f,-0.43503758335233395f,-0.8994123815633615f,0.0032945723100268245f,-0.3582683593639789f,-0.93361283649698f,-0.14642942516143007f,-0.5314234375731464f,-0.8343545729753228f,-0.08436665554928074f,-0.43660318786700975f,-0.8956896358537334f,-0.3326220567535397f,-0.4656265918419865f,-0.8200941679652777f,-0.3521479985706083f,-0.48649176076408834f,-0.7995733573671473f,-0.35883911663662316f,-0.3112885965957568f,-0.87996244124445f,-0.4793671852998349f,-0.3718453448785564f,-0.7949453699153552f,-0.19254694952181345f,-0.010886501356556572f,-0.9812273723852478f,-0.5413507426527425f,-0.07257452221325338f,-0.8376588280170167f,-0.19203993953555587f,0.06546419500040165f,-0.9792012565331651f,-0.24603499896736272f,0.059963878818092176f,-0.9674043169844856f,-0.6045363856081752f,-0.44737960612198996f,-0.65908060698365f,-0.09704595260072388f,-0.4759429858352359f,-0.8741054612105214f,-0.8086965163949947f,0.37706095242956794f,-0.451480877251193f,-0.016741986643028815f,0.29125914317612944f,-0.9564976829033887f,-0.0804355840308326f,0.20492462092091526f,-0.9754670761035649f,-0.07199188547283022f,0.36395981905666736f,-0.9286282456065531f,-0.11279273444429189f,0.3010309286705964f,-0.9469203657332003f,-0.04443705689284634f,0.32730268243617966f,-0.9438740922627251f,-0.007273427014435353f,0.36742146743661813f,-0.9300261085185662f,0.011521844185517691f,0.4712038897436787f,-0.8819490582777395f,-0.11984591781134081f,0.33698032795065513f,-0.9338528869999955f,-0.0552622822632844f,0.5379700291167557f,-0.8411505976525072f,-0.09973743649558632f,0.504739770047243f,-0.8574906461845196f,0.20379463385695767f,0.5245396401381575f,-0.8266352963277341f,0.08724038289293275f,0.4778554049815364f,-0.8740957198857722f,0.09097971286097031f,0.5465991023960971f,-0.8324374529702014f,0.12424784696992969f,0.557489075524901f,-0.8208339681042252f,0.07933444032760387f,0.34322263693110105f,-0.9358975734961424f,0.2693216871007453f,0.4114854299438135f,-0.8707155504532829f,0.6887169115917531f,0.2698489335151427f,-0.6729417276170778f,0.8021804537304882f,0.23278315305004263f,-0.5498349964387758f,0.8211522331768255f,0.4424236335083961f,-0.36051399204738316f,0.07292815147302614f,-0.7469627508276473f,-0.6608540940318987f,0.08664347496909955f,-0.7276045810710672f,-0.6805031093607697f,0.003453988682928586f,-0.6370158845755199f,-0.7708429365056451f,-0.035617901005018965f,-0.8549101597388792f,-0.5175519142107784f,-0.055321472670973704f,-0.6653336386107753f,-0.744493575522624f,-0.21180181483656296f,0.9282091643140193f,-0.30588844129095205f,-0.16241160739459057f,0.9181414126353323f,-0.36143992057809826f,0.2040936017340496f,0.9582716658866118f,-0.20015298171678805f,0.11555415433659587f,0.9340486898711405f,-0.3379353227550501f,0.5857646524509725f,0.752682654058242f,-0.300580428868601f,0.48593134807392874f,0.7175654915834276f,-0.49896942816939005f,-0.249740813466749f,0.9359838789191353f,-0.24812034276224915f,-0.1981595812214512f,0.9685327846216993f,-0.1505889288197382f,-0.3097344332340015f,0.8814624607336204f,-0.35649475618393406f,-0.20549182436475075f,0.9489986070663031f,-0.2391124294248687f,-0.23021726105255877f,0.9605161699263025f,-0.15623283913302025f,-0.2752350817567984f,0.9201123044014838f,-0.2786377523942508f,0.017108973359269586f,0.9878291600908723f,-0.1545989440609276f,0.0f,0.9806177802387792f,-0.19593052105164593f,-0.42438777599396116f,0.8583074793761108f,-0.288449798810688f,-0.42603314876307374f,0.8527512382797863f,-0.30217723568679367f,-0.30548106238878775f,0.6947653728514286f,-0.6511393070675682f,-0.4082116607785286f,0.8817828153919731f,-0.23626744694062454f,-0.3801963046633113f,0.8787070805195104f,-0.2886600709575906f,-0.8303342717226622f,-0.5358380546793196f,-0.15304436075948377f,-0.9732852886523559f,-0.12262754832938164f,-0.19410881299834237f,-0.9421598027449961f,-0.3145790362073262f,-0.11565005867002232f,-0.9737216563127952f,-0.2250073252226331f,-0.03518294506750552f,-0.886552376589999f,-0.46236967272589824f,0.015465099610746928f,-0.25522675138802964f,-0.8557810635973913f,-0.44999786284384796f,0.13950271531825284f,-0.320770085028423f,-0.9368273826963498f,0.586146445645828f,0.21772573808376774f,-0.7804023623956049f,0.7211157492446236f,-0.4808647442565186f,-0.4987596354181824f,0.7380540787853923f,-0.5130282490737734f,-0.4382672614290783f,0.8907961961350048f,0.44539809806750336f,-0.0900148387170521f,0.8942537799989194f,0.43169457742624767f,-0.11810998593860492f,0.2130922113048741f,0.47271110630077157f,-0.8550648627215947f,0.2865446488564829f,0.18068333005091575f,-0.940874964303667f,0.21710247198262514f,0.2974810187716512f,-0.929715849133279f,-0.2254149519480063f,0.5897214842671015f,-0.7755105869245661f,0.18400413462224738f,0.2950018062784132f,-0.9376120800919704f,-0.14998830646655792f,0.6349920038960585f,-0.7578183574652714f,0.055225967154495736f,0.2535693232522482f,-0.9657394528842898f,0.5318229108993184f,-0.04354377563015976f,-0.8457353788546662f,0.4507841116559593f,-0.021226865331608655f,-0.8923805829727255f};
			return value;
		}
		private float[] getNormal_6_10_vector_6()
		{
			float[] value = {0.17531041874079153f,0.12574987175252209f,-0.9764492955781946f,0.5195845832613172f,0.6322832111799687f,-0.5746736479925894f,0.3620557017116442f,0.8905452551559385f,-0.275399377953788f,0.9448697778919307f,0.30976222794207936f,-0.10615302617830873f,0.931369210428678f,0.07786857333092095f,-0.3556513449333037f,0.3605054852588789f,-0.11558842373093751f,-0.9255674537264464f,0.2877871180234538f,-0.29067139272401243f,-0.912517789498724f,0.1232489941822467f,0.3270481100441492f,-0.9369360806104196f,0.7108748613105271f,-0.32484942277442475f,-0.6238026804045186f,0.48501958697927966f,-0.172784437511409f,-0.857263984079767f,0.06987269011186815f,0.5440304648088675f,-0.8361510991061235f,0.11980563914969011f,0.7714728480048556f,-0.6248809915649629f,0.5649079844955068f,0.5121632931827064f,-0.646968105990913f,0.5459487427042915f,0.4376661444086099f,-0.7144146669673748f,-0.29870036656253357f,0.7076146237647554f,-0.640358989356495f,-0.2178882597900539f,0.6933445439066225f,0.6868755707408581f,-0.38802731128310375f,0.6865048640730481f,0.6149356692390279f,-0.018956061128775948f,0.4985519324516142f,0.8666525476771202f,-0.05371236530365374f,0.7981663063010854f,0.6000379398831118f,-0.08921999324060875f,0.5523869102903232f,0.8287994293832835f,-0.40872393891344744f,-0.4484574504913393f,-0.7948777622111995f,-0.0828029278774427f,-0.19726302608545349f,-0.9768474669438073f,-0.20378881890861303f,0.09196422936826505f,-0.9746859482954157f,-0.15945071516425383f,-0.0685033870365252f,-0.9848262564524424f,0.0f,0.0f,-1.0f,-0.07682850613954731f,0.033469460271796786f,-0.9964824011860322f,-0.15351100978779444f,0.004191999174980781f,-0.9881380455264581f,0.0006252315924398466f,0.9430487316350306f,-0.33265402274287326f,0.03849175049048082f,0.955806388583853f,-0.2914661776029445f,-0.07827163863799311f,0.9520477060249422f,-0.29576801050412604f,-0.04647710654639252f,0.9438656555209569f,-0.3270435795044286f,0.3930412515393809f,0.7860825030787618f,-0.4770669480710079f,0.3478954376639096f,0.9196223554466678f,-0.18238280570097415f,0.5158121068952202f,0.849168568468327f,-0.11336054298461261f,0.4650588785042172f,0.8588682379211771f,-0.21462895753968567f,0.7271588661684018f,0.6336968917435528f,-0.2639474052671182f,0.6502600292338787f,0.745842232605062f,-0.14450348938157795f,0.5843698503053838f,-0.5843698503053865f,-0.5630486267704802f,0.5843698503053855f,-0.5843698503053855f,-0.5630486267704795f,0.6841248470197209f,-0.684124847019724f,-0.2528762293701859f,0.6700680215655612f,-0.6940546711731552f,-0.2632431573620444f,0.2953926420446791f,-0.2953926420446791f,-0.9085628068833371f,-0.8676362688391348f,0.034842086386452815f,-0.4959771506946099f,0.5570782570787152f,0.8146696720733969f,-0.16117425630033136f,0.6667880112635076f,0.6527198421662564f,0.35965338268632147f,0.8442514176540135f,0.4826782402209914f,0.2329404649397685f,0.6414069258802624f,0.759794006537652f,0.10634953249682853f,0.8075469004611378f,0.573479817452956f,0.13780022688563842f,0.7760915319412962f,0.5861728738015592f,0.23255815631414228f,0.7703933914286524f,0.6104690541620894f,0.18390637931704049f,-0.836297311836257f,-0.4958046489450144f,-0.23406100978155522f,-0.8703089248590792f,-0.477182467371814f,-0.12189859779169422f,-0.9028365553976487f,-0.34741612430980395f,-0.2533538845316235f,-0.9006396980824202f,-0.3564490762068009f,-0.24858034980530005f,-0.9295882152093777f,-0.22433501922124024f,-0.29247145039276795f,-0.9227691426188362f,-0.2502301930898054f,-0.293056240160036f,-0.9193681350585208f,-0.23302420941452298f,-0.3169573316169767f,-0.9367596287861517f,-0.10852703016424818f,-0.3327210266877641f,0.5023474270536862f,-0.8166238961956499f,-0.28420498710398767f,0.592905566351132f,-0.7816542764434401f,-0.1935964398110805f,0.5945762068827909f,-0.7694718137713014f,-0.23322148704691967f,0.572001466069713f,-0.7808318146019156f,-0.2512289794581398f,0.41667300165890303f,0.2516049232341041f,-0.8735436865394428f,0.41667300165890303f,0.2516049232341041f,0.8735436865394428f};
			return value;
		}

		/** Large attribute array: IndexedFaceSet DEF='IndexedFaceSet' coordIndex field, scene-graph level=5, element #9, 2256 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32Object getIndexedFaceSet_5_9_coordIndex()
		{
			MFInt32Object IndexedFaceSet_5_9_coordIndex = new MFInt32Object()/*2.finalize*/
				.append(new MFInt32Object(getIndexedFaceSet_5_9_coordIndex_1()))
				.append(new MFInt32Object(getIndexedFaceSet_5_9_coordIndex_2()))
				.append(new MFInt32Object(getIndexedFaceSet_5_9_coordIndex_3()));
			return IndexedFaceSet_5_9_coordIndex;
		}
		/** Large attribute array: IndexedFaceSet DEF='IndexedFaceSet' normalIndex field, scene-graph level=5, element #9, 1128 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32Object getIndexedFaceSet_5_9_normalIndex()
		{
			MFInt32Object IndexedFaceSet_5_9_normalIndex = new MFInt32Object()/*2.finalize*/
				.append(new MFInt32Object(getIndexedFaceSet_5_9_normalIndex_1()))
				.append(new MFInt32Object(getIndexedFaceSet_5_9_normalIndex_2()));
			return IndexedFaceSet_5_9_normalIndex;
		}
		/** Large attribute array: IndexedFaceSet DEF='IndexedFaceSet' colorIndex field, scene-graph level=5, element #9, 2256 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32Object getIndexedFaceSet_5_9_colorIndex()
		{
			MFInt32Object IndexedFaceSet_5_9_colorIndex = new MFInt32Object()/*2.finalize*/
				.append(new MFInt32Object(getIndexedFaceSet_5_9_colorIndex_1()))
				.append(new MFInt32Object(getIndexedFaceSet_5_9_colorIndex_2()))
				.append(new MFInt32Object(getIndexedFaceSet_5_9_colorIndex_3()));
			return IndexedFaceSet_5_9_colorIndex;
		}
		/** Large attribute array: Coordinate point field, scene-graph level=6, element #9, 855 total numbers made up of 285 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3fObject getCoordinate_6_9_point()
		{
			MFVec3fObject Coordinate_6_9_point = new MFVec3fObject()/*2.finalize*/
				.append(new MFVec3fObject(getCoordinate_6_9_point_1()))
				.append(new MFVec3fObject(getCoordinate_6_9_point_2()))
				.append(new MFVec3fObject(getCoordinate_6_9_point_3()));
			return Coordinate_6_9_point;
		}
		/** Large attribute array: Normal vector field, scene-graph level=6, element #10, 1692 total numbers made up of 564 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3fObject getNormal_6_10_vector()
		{
			MFVec3fObject Normal_6_10_vector = new MFVec3fObject()/*2.finalize*/
				.append(new MFVec3fObject(getNormal_6_10_vector_1()))
				.append(new MFVec3fObject(getNormal_6_10_vector_2()))
				.append(new MFVec3fObject(getNormal_6_10_vector_3()))
				.append(new MFVec3fObject(getNormal_6_10_vector_4()))
				.append(new MFVec3fObject(getNormal_6_10_vector_5()))
				.append(new MFVec3fObject(getNormal_6_10_vector_6()));
			return Normal_6_10_vector;
		}

	/** The initialized model object, created within initialize() method. */
	private X3DObject x3dModel;

	/** Provide a 
	 * <a href="https://dzone.com/articles/java-copy-shallow-vs-deep-in-which-you-will-swim" target="_blank">shallow copy</a>
	 * of the X3D model.
	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3DObject.html">X3DObject</a>
	 * @return cube model
	 */
	public X3DObject getX3dModel()
	{	  
		return x3dModel;
	}
	   
    /** Default main() method provided for test purposes, uses CommandLine to set global ConfigurationProperties for this object.
     * @param args array of input parameters, provided as arguments
	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3DObject.html#handleArguments-java.lang.String:A-">X3DObject.handleArguments(args)</a>
	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3DObject.html#validationReport--">X3DObject.validationReport()</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/CommandLine.html">CommandLine</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/CommandLine.html#USAGE">CommandLine.USAGE</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/ConfigurationProperties.html">ConfigurationProperties</a>
     */
    public static void main(String args[])
    {
        X3DObject thisExampleX3dObject = new cube().getX3dModel();

		boolean hasArguments = (args != null) && (args.length > 0);
		boolean validate = true; // default
		boolean argumentsLoadNewModel = false;
		String  fileName = new String();

		if (args != null)
		{
			for (String arg : args)
			{
				if (arg.toLowerCase().startsWith("-v") || arg.toLowerCase().contains("validate"))
				{
					validate = true; // making sure
				}
				if (arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_X3D) ||
					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_CLASSICVRML) ||
					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_X3DB) ||
					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_VRML97) ||
					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_EXI) ||
					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_GZIP) ||
					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_ZIP) ||
					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_HTML) ||
					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_XHTML))
				{
					argumentsLoadNewModel = true;
					fileName = arg;
				}
			}
		}
		if      (argumentsLoadNewModel)
			System.out.println("WARNING: \"cube\" model invocation is attempting to load file \"" + fileName + "\" instead of simply validating itself... file loading ignored.");
		else if (hasArguments) // if no arguments provided, this method produces usage warning
			thisExampleX3dObject.handleArguments(args);

		if (validate)
		{
			System.out.print("Java program \"cube\" self-validation test results: ");
			String validationResults = thisExampleX3dObject.validationReport();
			System.out.println(validationResults);
		}
    }
}
