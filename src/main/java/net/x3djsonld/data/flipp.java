package net.x3djsonld.data;

import java.util.*;
import org.web3d.x3d.jsail.Core.*;
import org.web3d.x3d.jsail.EnvironmentalEffects.*;
import org.web3d.x3d.jsail.fields.*;
import org.web3d.x3d.jsail.Geometry3D.*;
import org.web3d.x3d.jsail.Grouping.*;
import org.web3d.x3d.jsail.Interpolation.*;
import org.web3d.x3d.jsail.Navigation.*;
import org.web3d.x3d.jsail.Rendering.*;
import org.web3d.x3d.jsail.Shape.*;
import org.web3d.x3d.jsail.Time.*;

// Javadoc annotations follow, see below for source.
/**
 * <p> flipper flopping around. </p>
 <p> Related links: flipp.java source, <a href="https://www.web3d.org/x3d/content/examples/X3dResources.html" target="_blank">X3D Resources</a>, <a href="https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html" target="_blank">X3D Scene Authoring Hints</a>, and <a href="https://www.web3d.org/x3d/content/X3dTooltips.html" target="_blank">X3D Tooltips</a>. </p>
	<table style="color:black; border:0px solid; border-spacing:10px 0px;">
        <caption>Scene Meta Information</caption>
		<tr style="background-color:silver; border-color:silver;">
			<td style="text-align:center; padding:10px 0px;"><i>meta tags</i></td>
			<td style="text-align:left;   padding:10px 0px;">net.x3djsonld.data.flipp&nbsp; Document Metadata </td>
		</tr>

		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
			<td> hand conversion from <a href="http://www.x3dom.org/x3dom/test/functional/flipper.html" target="_blank">http://www.x3dom.org/x3dom/test/functional/flipper.html</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> title </i> </td>
			<td> <a href="http://www.x3dom.org/x3dom/test/functional/flipp.x3d">flipp.x3d</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> description </i> </td>
			<td> flipper flopping around </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> identifier </i> </td>
			<td> <a href="http://www.x3dom.org/x3dom/test/functional/flipp.x3d" target="_blank">http://www.x3dom.org/x3dom/test/functional/flipp.x3d</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> creator </i> </td>
			<td> Yvonne Jung, metadata by John Carlson </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> translated </i> </td>
			<td> 13 March 2016 </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
			<td> X3dToJson.xslt, <a href="http://www.web3d.org/x3d/stylesheets/X3dToJson.html" target="_blank">http://www.web3d.org/x3d/stylesheets/X3dToJson.html</a> </td>
		</tr>
		<tr style="background-color:silver; border-color:silver;">
			<td style="text-align:center;" colspan="2">  &nbsp; </td>
		</tr>
	</table>

	<p>
		This program uses the
		<a href="https://www.web3d.org/specifications/java/X3DJSAIL.html" target="_blank">X3D Java Scene Access Interface Library (X3DJSAIL)</a>.
		It has been produced using the 
		<a href="https://www.web3d.org/x3d/stylesheets/X3dToJava.xslt" target="_blank">X3dToJava.xslt</a>
		stylesheet to create Java source code from an <code>.x3d</code> model.
	</p>

	* @author Yvonne Jung, metadata by John Carlson
 */

public class flipp
{
	/** Default constructor to create this object. */
	public flipp ()
	{
	  initialize();
	}

	/** Create and initialize the X3D model for this object. */
	public final void initialize()
	{
  x3dModel = new X3D().setProfile(X3D.PROFILE_IMMERSIVE).setVersion(X3D.VERSION_3_3)
  .setHead(new head()
    .addMeta(new meta().setName(meta.NAME_GENERATOR  ).setContent("hand conversion from http://www.x3dom.org/x3dom/test/functional/flipper.html"))
    .addMeta(new meta().setName(meta.NAME_TITLE      ).setContent("flipp.x3d"))
    .addMeta(new meta().setName(meta.NAME_DESCRIPTION).setContent("flipper flopping around"))
    .addMeta(new meta().setName(meta.NAME_IDENTIFIER ).setContent("http://www.x3dom.org/x3dom/test/functional/flipp.x3d"))
    .addMeta(new meta().setName(meta.NAME_CREATOR    ).setContent("Yvonne Jung, metadata by John Carlson"))
    .addMeta(new meta().setName(meta.NAME_TRANSLATED ).setContent("13 March 2016"))
    .addMeta(new meta().setName(meta.NAME_GENERATOR  ).setContent("X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html")))
  .setScene(new Scene()
    .addChild(new Viewpoint("cam0").setDescription("cam0 description").setPosition(0.0f,0.0f,800.0f))
    .addChild(new Viewpoint("cam1").setDescription("cam1 description").setPosition(0.0f,0.0f,2000.0f))
    .addChild(new Viewpoint("cam2").setDescription("cam2 description").setPosition(0.0f,200.0f,1000.0f))
    .addChild(new Background().setGroundAngle(new float[] {0.9f,1.5f,1.57f}).setGroundColor(new MFColor(new float[] {0.21f,0.18f,0.66f,0.2f,0.44f,0.85f,0.51f,0.81f,0.95f,0.51f,0.81f,0.95f})).setSkyAngle(new float[] {0.9f,1.5f,1.57f}).setSkyColor(new MFColor(new float[] {0.21f,0.18f,0.66f,0.2f,0.44f,0.85f,0.51f,0.81f,0.95f,0.51f,0.81f,0.95f})))
    .addChild(new NavigationInfo("user01").setSpeed(50f))
    .addChild(new Fog())
    .addChild(new Transform("trans").setRotation(1.0f,0.0f,0.0f,0.78f)
      .addChild(new Shape()
        .setAppearance(new Appearance()
          .setMaterial(new Material("mat").setAmbientIntensity(0.508497f).setDiffuseColor(0.337255f,0.4f,0.788235f).setSpecularColor(1.0f,1.0f,1.0f)))
        .setGeometry(new IndexedFaceSet().setCreaseAngle(2f).setCoordIndex(getIndexedFaceSet_5_17_coordIndex())
          .setCoord(new Coordinate("pointList").setPoint(getpointList_6_17_point())))))
    .addChild(new TimeSensor("ts").setCycleInterval(2).setLoop(true))
    .addChild(new ScalarInterpolator("si").setKey(new float[] {0.0f,0.5f,1.0f}).setKeyValue(new float[] {0.0f,1.0f,0.0f}))
    .addChild(new CoordinateInterpolator("ci").setKey(new float[] {0.0f,0.5f,1.0f}).setKeyValue(getci_3_23_keyValue()))
    .addChild(new ROUTE().setFromNode("ci").setFromField("value_changed").setToNode("pointList").setToField("set_point"))
    .addChild(new ROUTE().setFromNode("si").setFromField("value_changed").setToNode("ci").setToField("set_fraction"))
    .addChild(new ROUTE().setFromNode("ts").setFromField("fraction_changed").setToNode("si").setToField("set_fraction")));
    }
	// end of initialize() method

		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_5_17_coordIndex_1()
		{
			int[] value = {0,1,2,-1,2,3,0,-1,3,2,4,-1,4,5,3,-1,5,4,6,-1,6,7,5,-1,7,6,8,-1,9,10,11,-1,12,0,3,-1,3,13,12,-1,13,3,5,-1,5,14,13,-1,14,5,7,-1,15,16,17,-1,16,15,18,-1,18,19,16,-1,20,21,22,-1,22,23,20,-1,24,20,23,-1,23,22,25,-1,25,26,23,-1,26,25,1,-1,1,0,26,-1,26,0,27,-1,27,0,12,-1,12,28,27,-1,28,12,9,-1,9,29,28,-1,29,9,11,-1,30,29,11,-1,11,31,30,-1,30,31,32,-1,32,33,30,-1,33,32,34,-1,34,35,33,-1,35,34,36,-1,36,37,35,-1,37,36,38,-1,38,39,37,-1,39,38,40,-1,40,41,39,-1,42,19,24,-1,43,42,24,-1,44,43,24,-1,24,23,44,-1,44,23,26,-1,26,45,44,-1,45,26,27,-1,27,46,45,-1,46,27,28,-1,28,47,46,-1,47,28,29,-1,29,48,47,-1,48,29,30,-1,30,49,48,-1,49,30,33,-1,43,50,51,-1,51,42,43,-1,42,51,52,-1,52,19,42,-1,19,52,53,-1,53,16,19,-1,16,53,54,-1,50,55,56,-1,56,51,50,-1,51,56,52,-1,53,57,54,-1,58,59,60,-1,60,57,58,-1,61,62,63,-1,63,64,61,-1,16,54,64,-1,64,17,16,-1,17,64,63,-1,65,52,66,-1,66,67,65,-1,68,53,52,-1,52,65,68,-1,68,65,67,-1,67,69,68,-1,57,68,69,-1,69,58,57,-1,59,58,70,-1,70,71,59,-1,70,58,69,-1,69,72,70,-1,69,67,73,-1,72,73,74,-1,74,75,72,-1,64,54,57,-1,76,67,66,-1,76,66,77,-1,76,77,55,-1,76,55,78,-1,76,78,73,-1,76,73,67,-1,79,80,71,-1,71,70,79,-1,75,79,70,-1,70,72,75,-1,81,75,82,-1,82,74,81,-1,83,81,74,-1,75,81,84,-1,84,85,75,-1,83,74,86,-1,86,87,83,-1,86,74,88,-1,88,89,86,-1,74,78,88,-1,88,78,55,-1,55,90,88,-1,55,50,43,-1,43,91,55,-1,90,55,91,-1,88,90,92,-1,92,89,88,-1,89,92,93,-1,93,94,89,-1,94,93,95,-1,95,96,94,-1,96,95,97,-1,97,98,96,-1,98,97,99,-1,99,100,98,-1,100,99,101,-1,101,102,100,-1,102,101,103,-1,103,104,102,-1,104,103,105,-1,105,106,104,-1,106,105,107,-1,107,108,106,-1,92,90,91,-1,92,91,44,-1,44,91,43,-1,92,44,45,-1,45,93,92,-1,93,45,46,-1,46,95,93,-1,95,46,47,-1,47,97,95,-1,97,47,48,-1,48,99,97,-1,99,48,49,-1,49,101,99,-1,101,49,33,-1,33,103,101,-1,103,33,35,-1,35,105,103,-1,105,35,37,-1,37,107,105,-1,107,37,39,-1,39,109,107,-1,109,39,41,-1,86,89,94,-1,94,110,86,-1,110,94,96,-1,96,111,110,-1,111,96,98,-1,98,112,111,-1,112,98,100,-1,100,113,112,-1,113,100,102,-1,102,114,113,-1,114,102,104,-1,104,115,114,-1,115,104,106,-1,106,116,115,-1,116,106,108,-1,108,117,116,-1,117,108,118,-1,87,86,119,-1,119,120,87,-1,119,86,110,-1,110,121,119,-1,119,121,122,-1,122,123,119,-1,124,119,123,-1,110,111,125,-1,125,126,110,-1,127,113,114,-1,114,128,127,-1,129,116,117,-1,117,130,129,-1,131,83,87,-1,87,132,131,-1,132,87,110,-1,110,126,132,-1,133,81,83,-1,83,131,133,-1,134,84,81,-1,81,133,134,-1,135,136,84,-1,84,134,135,-1,136,85,84,-1,135,137,138,-1,138,136,135,-1,139,140,141,-1,142,143,41,-1,41,144,142,-1,145,142,144,-1,144,146,145,-1,107,109,147,-1,147,108,107,-1,108,147,118,-1,64,57,60,-1,60,61,64,-1,61,148,149,-1,149,62,61,-1,148,61,60,-1,60,59,148,-1,85,79,75,-1,85,136,80,-1,80,79,85,-1,138,80,136,-1,80,138,150,-1,150,71,80,-1,71,150,148,-1,148,59,71,-1,150,138,137,-1,137,151,150,-1,151,149,148,-1,148,150,151,-1,66,52,56,-1,56,55,77,-1,73,78,74,-1,53,68,57,-1,56,77,66,-1,123,152,153,-1,153,124,123,-1,120,119,124,-1,124,153,120,-1,152,123,122,-1,87,120,121,-1,121,110,87,-1,153,152,122,-1,122,121,153,-1,120,153,121,-1,12,13,10,-1,10,9,12,-1,14,154,10,-1,10,13,14,-1,8,155,154,-1,154,14,8,-1,7,8,14,-1,156,112,113,-1,113,127,156,-1,111,112,156,-1,156,125,111,-1};
			return value;
		}
		private int[] getIndexedFaceSet_5_17_coordIndex_2()
		{
			int[] value = {115,116,129,-1,129,157,115,-1,115,157,128,-1,128,114,115,-1,158,130,117,-1,117,118,158,-1,140,159,160,-1,160,161,140,-1,118,147,161,-1,161,160,118,-1,159,140,139,-1,40,144,41,-1,146,158,118,-1,162,145,146,-1,146,118,162,-1,160,162,118,-1,159,141,162,-1,162,160,159,-1,139,141,159,-1,162,141,140,-1,140,161,162,-1,142,145,162,-1,162,161,142,-1,143,142,161,-1,147,143,161,-1,109,41,143,-1,143,147,109,-1,20,163,21,-1,163,20,19,-1,19,18,163,-1,20,24,19,-1,164,2,1,-1,1,165,164,-1,166,4,2,-1,2,164,166,-1,167,6,4,-1,4,166,167,-1,8,6,167,-1,11,10,168,-1,169,164,165,-1,165,170,169,-1,171,166,164,-1,164,169,171,-1,167,166,171,-1,17,172,15,-1,173,18,15,-1,15,172,173,-1,22,21,174,-1,174,175,22,-1,176,22,175,-1,177,25,22,-1,22,176,177,-1,165,1,25,-1,25,177,165,-1,178,165,177,-1,179,170,165,-1,165,178,179,-1,180,168,170,-1,170,179,180,-1,11,168,180,-1,31,11,180,-1,180,181,31,-1,182,32,31,-1,31,181,182,-1,183,34,32,-1,32,182,183,-1,184,36,34,-1,34,183,184,-1,185,38,36,-1,36,184,185,-1,186,40,38,-1,38,185,186,-1,175,173,187,-1,175,187,188,-1,176,175,188,-1,188,189,176,-1,190,177,176,-1,176,189,190,-1,191,178,177,-1,177,190,191,-1,192,179,178,-1,178,191,192,-1,193,180,179,-1,179,192,193,-1,194,181,180,-1,180,193,194,-1,182,181,194,-1,187,195,196,-1,196,188,187,-1,173,197,195,-1,195,187,173,-1,198,197,173,-1,173,172,198,-1,199,198,172,-1,195,200,201,-1,201,196,195,-1,197,200,195,-1,199,202,198,-1,202,203,204,-1,204,205,202,-1,206,63,62,-1,62,207,206,-1,17,206,199,-1,199,172,17,-1,63,206,17,-1,208,209,197,-1,197,210,208,-1,210,197,198,-1,198,211,210,-1,212,208,210,-1,210,211,212,-1,205,212,211,-1,211,202,205,-1,213,214,205,-1,205,204,213,-1,215,212,205,-1,205,214,215,-1,216,208,212,-1,217,218,216,-1,216,215,217,-1,202,199,206,-1,209,208,219,-1,220,209,219,-1,201,220,219,-1,221,201,219,-1,216,221,219,-1,208,216,219,-1,214,213,222,-1,222,223,214,-1,215,214,223,-1,223,217,215,-1,224,217,225,-1,225,226,224,-1,218,224,226,-1,227,228,225,-1,225,217,227,-1,229,230,218,-1,218,226,229,-1,231,232,218,-1,218,230,231,-1,232,221,218,-1,233,201,221,-1,221,232,233,-1,188,196,201,-1,201,233,188,-1,234,188,233,-1,231,235,233,-1,233,232,231,-1,236,237,235,-1,235,231,236,-1,238,239,237,-1,237,236,238,-1,240,241,239,-1,239,238,240,-1,242,243,241,-1,241,240,242,-1,244,245,243,-1,243,242,244,-1,246,247,245,-1,245,244,246,-1,248,249,247,-1,247,246,248,-1,250,251,249,-1,249,248,250,-1,234,233,235,-1,189,234,235,-1,188,234,189,-1,237,190,189,-1,189,235,237,-1,239,191,190,-1,190,237,239,-1,241,192,191,-1,191,239,241,-1,243,193,192,-1,192,241,243,-1,245,194,193,-1,193,243,245,-1,247,182,194,-1,194,245,247,-1,249,183,182,-1,182,247,249,-1,251,184,183,-1,183,249,251,-1,252,185,184,-1,184,251,252,-1,186,185,252,-1,253,236,231,-1,231,230,253,-1,254,238,236,-1,236,253,254,-1,255,240,238,-1,238,254,255,-1,256,242,240,-1,240,255,256,-1,257,244,242,-1,242,256,257,-1,258,246,244,-1,244,257,258,-1,259,248,246,-1,246,258,259,-1,260,250,248,-1,248,259,260,-1,261,250,260,-1,262,263,230,-1,230,229,262,-1,264,253,230,-1,230,263,264,-1,265,264,263,-1,263,266,265,-1,267,265,266,-1,126,125,254,-1,254,253,126,-1,128,257,256,-1,256,127,128,-1,130,260,259,-1,259,129,130,-1,132,229,226,-1,226,131,132,-1,126,253,229,-1,229,132,126,-1,131,226,225,-1,225,133,131,-1,133,225,228,-1,228,134,133,-1,134,228,268,-1,268,135,134,-1,228,227,268,-1,268,269,137,-1,137,135,268,-1,270,271,272,-1,144,186,273,-1,273,274,144,-1,146,144,274,-1,274,275,146,-1,250,276,252,-1,252,251,250,-1,261,276,250,-1,207,203,202,-1,202,206,207,-1,62,149,277,-1,277,207,62,-1,204,203,207,-1,207,277,204,-1,217,223,227,-1,223,222,268,-1,268,227,223,-1,268,222,269,-1,213,278,269,-1,269,222,213,-1,204,277,278,-1};
			return value;
		}
		private int[] getIndexedFaceSet_5_17_coordIndex_3()
		{
			int[] value = {278,213,204,-1,151,137,269,-1,269,278,151,-1,278,277,149,-1,149,151,278,-1,200,197,209,-1,220,201,200,-1,218,221,216,-1,202,211,198,-1,209,220,200,-1,266,279,280,-1,280,267,266,-1,279,266,263,-1,263,262,279,-1,265,267,280,-1,253,264,262,-1,262,229,253,-1,265,280,279,-1,279,262,265,-1,264,265,262,-1,168,10,169,-1,169,170,168,-1,169,10,154,-1,154,171,169,-1,154,155,8,-1,8,167,154,-1,171,154,167,-1,127,256,255,-1,255,156,127,-1,125,156,255,-1,255,254,125,-1,157,129,259,-1,259,258,157,-1,257,128,157,-1,157,258,257,-1,261,260,130,-1,130,158,261,-1,281,282,283,-1,283,271,281,-1,282,281,276,-1,276,261,282,-1,272,271,283,-1,186,144,40,-1,261,158,146,-1,146,275,284,-1,284,282,146,-1,261,146,282,-1,282,284,270,-1,270,283,282,-1,283,270,272,-1,281,271,270,-1,270,284,281,-1,281,284,275,-1,275,274,281,-1,281,274,273,-1,281,273,276,-1,276,273,186,-1,186,252,276,-1,21,163,174,-1,18,173,174,-1,174,163,18,-1,173,175,174,-1,212,215,216,-1,73,72,69,-1};
			return value;
		}


		/** Define subarrays using type float[] */
		private float[] getpointList_6_17_point_1()
		{
			float[] value = {-23.495f,90.55f,-8.13f,-28.825f,91.31f,0.0f,9.77497f,126.11f,0.0f,17.395f,124.84f,-6.1f,42.795f,142.11f,0.0f,46.105f,139.07f,-3.56f,74.295f,144.4f,0.0f,76.075f,140.08f,-1.27f,92.325f,139.57f,0.0f,74.805f,80.9f,-9.91f,74.295f,98.93f,0.0f,84.965f,74.04f,0.0f,35.175f,88.77f,-11.68f,50.165f,110.11f,-6.1f,60.835f,121.79f,-3.56f,-194.695f,-8.0f,0.0f,-200.025f,-15.87f,-7.62f,-205.105f,-19.68f,0.0f,-177.165f,7.75f,0.0f,-180.975f,1.39999f,-13.97f,-156.335f,22.23f,-5.33f,-151.515f,27.05f,0.0f,-117.475f,50.67f,0.0f,-118.495f,44.58f,-18.29f,-155.325f,20.19f,-13.97f,-74.805f,71.25f,0.0f,-75.565f,65.91f,-22.35f,-26.545f,75.57f,-24.64f,31.625f,74.04f,-26.67f,87.755f,62.1f,-20.32f,154.055f,26.04f,-11.68f,155.325f,30.1f,0.0f,195.965f,-4.95001f,0.0f,188.345f,-14.1f,-14.73f,213.995f,-28.57f,0.0f,204.085f,-41.02f,-11.94f,226.445f,-52.45f,0.0f,217.045f,-63.88f,-7.87f,232.535f,-72.52f,0.0f,226.945f,-79.88f,-9.65f,228.725f,-91.31f,0.0f,224.665f,-87.5f,-7.37f,-157.865f,13.84f,-22.35f,-141.605f,12.57f,-32.77f,-112.145f,30.61f,-29.97f,-75.055f,47.12f,-32.0f,-26.545f,57.79f,-35.81f,24.005f,56.52f,-34.04f,84.455f,48.64f,-28.45f,150.745f,19.18f,-18.29f,-153.285f,-0.380005f,-36.58f,-163.445f,1.14001f,-31.75f,-171.065f,-5.97f,-27.43f,-187.325f,-22.99f,-20.83f,-201.545f,-37.21f,-10.16f,-151.005f,-10.29f,-35.81f,-161.925f,-5.97f,-30.99f,-203.325f,-44.83f,-13.97f,-196.465f,-54.48f,-14.99f,-223.135f,-77.6f,-7.37f,-228.215f,-75.31f,-7.37f,-233.045f,-79.12f,-4.06f,-234.315f,-77.6f,0.0f,-210.695f,-46.1f,0.0f,-207.895f,-43.81f,-5.08f,-171.835f,-19.68f,-30.48f,-164.465f,-11.81f,-30.73f,-170.815f,-22.48f,-30.73f,-184.275f,-27.05f,-26.42f,-180.975f,-32.38f,-25.91f,-192.655f,-58.29f,-16.26f,-216.785f,-78.61f,-8.38f,-174.375f,-43.31f,-25.91f,-165.485f,-28.07f,-34.54f,-142.625f,-35.94f,-34.8f,-171.835f,-48.89f,-27.43f,-160.405f,-22.73f,-34.8f,-158.365f,-13.59f,-34.54f,-144.655f,-24.26f,-38.61f,-191.135f,-63.37f,-18.29f,-212.975f,-81.41f,-10.92f,-167.765f,-70.48f,-17.02f,-154.555f,-41.02f,-31.75f,-132.205f,-61.09f,-22.35f,-185.295f,-71.25f,-10.16f,-190.625f,-66.93f,-17.27f,-103.755f,-39.75f,-43.18f,-101.985f,-49.66f,-35.05f,-140.335f,-23.24f,-40.39f,-100.715f,-9.51999f,-49.28f,-135.255f,-5.45999f,-40.13f,-134.235f,7.48999f,-36.58f,-104.015f,14.1f,-42.67f,-72.515f,23.75f,-46.23f,-60.575f,-1.39999f,-51.05f,-21.975f,26.04f,-48.01f,-16.895f,7.23999f,-51.05f,26.035f,31.12f,-46.23f,28.065f,7.48999f,-49.02f,81.915f,25.02f,-43.94f};
			return value;
		}
		private float[] getpointList_6_17_point_2()
		{
			float[] value = {81.405f,-1.89999f,-44.7f,141.095f,0.130005f,-33.02f,130.935f,-22.22f,-28.45f,176.405f,-24.76f,-23.37f,161.675f,-44.58f,-21.84f,194.185f,-48.89f,-13.97f,183.515f,-59.82f,-14.22f,206.125f,-65.4f,-9.91f,195.455f,-72.26f,-10.67f,220.345f,-83.69f,-18.29f,-64.895f,-34.16f,-41.15f,-15.365f,-26.8f,-37.59f,22.475f,-24.76f,-38.1f,70.735f,-27.3f,-30.99f,120.525f,-40.77f,-17.27f,154.055f,-60.83f,-9.65f,174.875f,-69.21f,-7.11f,195.965f,-86.23f,-5.59f,205.355f,-94.36f,-11.94f,-75.565f,-64.9f,-73.66f,-76.325f,-67.69f,-71.37f,-53.465f,-53.72f,-64.52f,-29.845f,-68.96f,-77.22f,-44.065f,-71.75f,-80.77f,-64.385f,-69.21f,-80.01f,-18.925f,-40.0f,0.0f,-62.355f,-49.91f,0.0f,68.455f,-38.23f,0.0f,123.825f,-45.08f,0.0f,171.325f,-71.75f,0.0f,195.705f,-88.26f,0.0f,-127.635f,-63.63f,0.0f,-92.835f,-56.51f,0.0f,-159.895f,-73.28f,0.0f,-182.495f,-73.28f,0.0f,-207.395f,-85.72f,0.0f,-210.435f,-84.45f,-7.87f,-226.185f,-93.85f,0.0f,-223.905f,-91.57f,-4.57f,232.285f,-144.4f,-86.61f,217.555f,-117.73f,-73.15f,231.015f,-135.76f,-63.25f,229.745f,-112.14f,-9.65f,224.155f,-97.92f,-16.51f,228.215f,-104.01f,0.0f,234.315f,-121.03f,-5.84f,230.505f,-113.92f,0.0f,218.565f,-86.23f,-24.13f,-230.505f,-84.45f,-3.81f,-231.015f,-84.2f,0.0f,-228.725f,-89.53f,-4.83f,-230.505f,-90.3f,0.0f,-43.815f,-73.02f,-79.25f,-63.885f,-72.01f,-78.23f,83.695f,119.76f,0.0f,95.375f,131.45f,0.0f,24.255f,-36.45f,0.0f,151.005f,-61.59f,0.0f,205.615f,-96.9f,0.0f,215.775f,-119.51f,-73.15f,210.695f,-104.52f,-52.32f,213.745f,-101.47f,-52.32f,232.535f,-127.89f,-21.59f,-154.815f,25.02f,0.0f,17.395f,124.84f,6.1f,-23.495f,90.55f,8.13f,46.105f,139.07f,3.56f,76.075f,140.08f,1.27f,74.805f,80.9f,9.91f,50.165f,110.11f,6.1f,35.175f,88.77f,11.68f,60.835f,121.79f,3.56f,-200.025f,-15.87f,7.62f,-180.975f,1.39999f,13.97f,-156.335f,22.23f,5.33f,-155.325f,20.19f,13.97f,-118.495f,44.58f,18.29f,-75.565f,65.91f,22.35f,-26.545f,75.57f,24.64f,31.625f,74.04f,26.67f,87.755f,62.1f,20.32f,154.055f,26.04f,11.68f,188.345f,-14.1f,14.73f,204.085f,-41.02f,11.94f,217.045f,-63.88f,7.87f,226.945f,-79.88f,9.65f,224.665f,-87.5f,7.37f,-157.865f,13.84f,22.35f,-141.605f,12.57f,32.77f,-112.145f,30.61f,29.97f,-75.055f,47.12f,32.0f,-26.545f,57.79f,35.81f,24.005f,56.52f,34.04f,84.455f,48.64f,28.45f,150.745f,19.18f,18.29f,-163.445f,1.14001f,31.75f,-153.285f,-0.380005f,36.58f,-171.065f,-5.97f,27.43f,-187.325f,-22.99f,20.83f,-201.545f,-37.21f,10.16f};
			return value;
		}
		private float[] getpointList_6_17_point_3()
		{
			float[] value = {-161.925f,-5.97f,30.99f,-151.005f,-10.29f,35.81f,-203.325f,-44.83f,13.97f,-228.215f,-75.31f,7.37f,-223.135f,-77.6f,7.37f,-196.465f,-54.48f,14.99f,-207.895f,-43.81f,5.08f,-233.045f,-79.12f,4.06f,-170.815f,-22.48f,30.73f,-164.465f,-11.81f,30.73f,-171.835f,-19.68f,30.48f,-184.275f,-27.05f,26.42f,-180.975f,-32.38f,25.91f,-216.785f,-78.61f,8.38f,-192.655f,-58.29f,16.26f,-174.375f,-43.31f,25.91f,-165.485f,-28.07f,34.54f,-171.835f,-48.89f,27.43f,-142.625f,-35.94f,34.8f,-160.405f,-22.73f,34.8f,-158.365f,-13.59f,34.54f,-144.655f,-24.26f,38.61f,-212.975f,-81.41f,10.92f,-191.135f,-63.37f,18.29f,-154.555f,-41.02f,31.75f,-167.765f,-70.48f,17.02f,-132.205f,-61.09f,22.35f,-190.625f,-66.93f,17.27f,-185.295f,-71.25f,10.16f,-101.985f,-49.66f,35.05f,-103.755f,-39.75f,43.18f,-100.715f,-9.51999f,49.28f,-140.335f,-23.24f,40.39f,-135.255f,-5.45999f,40.13f,-134.235f,7.48999f,36.58f,-104.015f,14.1f,42.67f,-60.575f,-1.39999f,51.05f,-72.515f,23.75f,46.23f,-16.895f,7.23999f,51.05f,-21.975f,26.04f,48.01f,28.065f,7.48999f,49.02f,26.035f,31.12f,46.23f,81.405f,-1.89999f,44.7f,81.915f,25.02f,43.94f,130.935f,-22.22f,28.45f,141.095f,0.130005f,33.02f,161.675f,-44.58f,21.84f,176.405f,-24.76f,23.37f,183.515f,-59.82f,14.22f,194.185f,-48.89f,13.97f,195.455f,-72.26f,10.67f,206.125f,-65.4f,9.91f,220.345f,-83.69f,18.29f,-64.895f,-34.16f,41.15f,-15.365f,-26.8f,37.59f,22.475f,-24.76f,38.1f,70.735f,-27.3f,30.99f,120.525f,-40.77f,17.27f,154.055f,-60.83f,9.65f,174.875f,-69.21f,7.11f,195.965f,-86.23f,5.59f,205.355f,-94.36f,11.94f,-76.325f,-67.69f,71.37f,-75.565f,-64.9f,73.66f,-53.465f,-53.72f,64.52f,-29.845f,-68.96f,77.22f,-64.385f,-69.21f,80.01f,-44.065f,-71.75f,80.77f,-210.435f,-84.45f,7.87f,-223.905f,-91.57f,4.57f,231.015f,-135.76f,63.25f,217.555f,-117.73f,73.15f,232.285f,-144.4f,86.61f,224.155f,-97.92f,16.51f,229.745f,-112.14f,9.65f,234.315f,-121.03f,5.84f,218.565f,-86.23f,24.13f,-230.505f,-84.45f,3.81f,-228.725f,-89.53f,4.83f,-63.885f,-72.01f,78.23f,-43.815f,-73.02f,79.25f,213.745f,-101.47f,52.32f,210.695f,-104.52f,52.32f,215.775f,-119.51f,73.15f,232.535f,-127.89f,21.59f};
			return value;
		}


		/** Define subarrays using type float[] */
		private float[] getci_3_23_keyValue_1()
		{
			float[] value = {-23.495f,90.55f,-8.13f,-28.825f,91.31f,0.0f,9.77497f,126.11f,0.0f,17.395f,124.84f,-6.1f,42.795f,142.11f,0.0f,46.105f,139.07f,-3.56f,74.295f,144.4f,0.0f,76.075f,140.08f,-1.27f,92.325f,139.57f,0.0f,74.805f,80.9f,-9.91f,74.295f,98.93f,0.0f,84.965f,74.04f,0.0f,35.175f,88.77f,-11.68f,50.165f,110.11f,-6.1f,60.835f,121.79f,-3.56f,-194.695f,-8.0f,0.0f,-200.025f,-15.87f,-7.62f,-205.105f,-19.68f,0.0f,-177.165f,7.75f,0.0f,-180.975f,1.39999f,-13.97f,-156.335f,22.23f,-5.33f,-151.515f,27.05f,0.0f,-117.475f,50.67f,0.0f,-118.495f,44.58f,-18.29f,-155.325f,20.19f,-13.97f,-74.805f,71.25f,0.0f,-75.565f,65.91f,-22.35f,-26.545f,75.57f,-24.64f,31.625f,74.04f,-26.67f,87.755f,62.1f,-20.32f,154.055f,26.04f,-11.68f,155.325f,30.1f,0.0f,195.965f,-4.95001f,0.0f,188.345f,-14.1f,-14.73f,213.995f,-28.57f,0.0f,204.085f,-41.02f,-11.94f,226.445f,-52.45f,0.0f,217.045f,-63.88f,-7.87f,232.535f,-72.52f,0.0f,226.945f,-79.88f,-9.65f,228.725f,-91.31f,0.0f,224.665f,-87.5f,-7.37f,-157.865f,13.84f,-22.35f,-141.605f,12.57f,-32.77f,-112.145f,30.61f,-29.97f,-75.055f,47.12f,-32.0f,-26.545f,57.79f,-35.81f,24.005f,56.52f,-34.04f,84.455f,48.64f,-28.45f,150.745f,19.18f,-18.29f,-153.285f,-0.380005f,-36.58f,-163.445f,1.14001f,-31.75f,-171.065f,-5.97f,-27.43f,-187.325f,-22.99f,-20.83f,-201.545f,-37.21f,-10.16f,-151.005f,-10.29f,-35.81f,-161.925f,-5.97f,-30.99f,-203.325f,-44.83f,-13.97f,-196.465f,-54.48f,-14.99f,-223.135f,-77.6f,-7.37f,-228.215f,-75.31f,-7.37f,-233.045f,-79.12f,-4.06f,-234.315f,-77.6f,0.0f,-210.695f,-46.1f,0.0f,-207.895f,-43.81f,-5.08f,-171.835f,-19.68f,-30.48f,-164.465f,-11.81f,-30.73f,-170.815f,-22.48f,-30.73f,-184.275f,-27.05f,-26.42f,-180.975f,-32.38f,-25.91f,-192.655f,-58.29f,-16.26f,-216.785f,-78.61f,-8.38f,-174.375f,-43.31f,-25.91f,-165.485f,-28.07f,-34.54f,-142.625f,-35.94f,-34.8f,-171.835f,-48.89f,-27.43f,-160.405f,-22.73f,-34.8f,-158.365f,-13.59f,-34.54f,-144.655f,-24.26f,-38.61f,-191.135f,-63.37f,-18.29f,-212.975f,-81.41f,-10.92f,-167.765f,-70.48f,-17.02f,-154.555f,-41.02f,-31.75f,-132.205f,-61.09f,-22.35f,-185.295f,-71.25f,-10.16f,-190.625f,-66.93f,-17.27f,-103.755f,-39.75f,-43.18f,-101.985f,-49.66f,-35.05f,-140.335f,-23.24f,-40.39f,-100.715f,-9.51999f,-49.28f,-135.255f,-5.45999f,-40.13f,-134.235f,7.48999f,-36.58f,-104.015f,14.1f,-42.67f,-72.515f,23.75f,-46.23f,-60.575f,-1.39999f,-51.05f,-21.975f,26.04f,-48.01f,-16.895f,7.23999f,-51.05f,26.035f,31.12f,-46.23f,28.065f,7.48999f,-49.02f,81.915f,25.02f,-43.94f};
			return value;
		}
		private float[] getci_3_23_keyValue_2()
		{
			float[] value = {81.405f,-1.89999f,-44.7f,141.095f,0.130005f,-33.02f,130.935f,-22.22f,-28.45f,176.405f,-24.76f,-23.37f,161.675f,-44.58f,-21.84f,194.185f,-48.89f,-13.97f,183.515f,-59.82f,-14.22f,206.125f,-65.4f,-9.91f,195.455f,-72.26f,-10.67f,220.345f,-83.69f,-18.29f,-64.895f,-34.16f,-41.15f,-15.365f,-26.8f,-37.59f,22.475f,-24.76f,-38.1f,70.735f,-27.3f,-30.99f,120.525f,-40.77f,-17.27f,154.055f,-60.83f,-9.65f,174.875f,-69.21f,-7.11f,195.965f,-86.23f,-5.59f,205.355f,-94.36f,-11.94f,-75.565f,-64.9f,-73.66f,-76.325f,-67.69f,-71.37f,-53.465f,-53.72f,-64.52f,-29.845f,-68.96f,-77.22f,-44.065f,-71.75f,-80.77f,-64.385f,-69.21f,-80.01f,-18.925f,-40.0f,0.0f,-62.355f,-49.91f,0.0f,68.455f,-38.23f,0.0f,123.825f,-45.08f,0.0f,171.325f,-71.75f,0.0f,195.705f,-88.26f,0.0f,-127.635f,-63.63f,0.0f,-92.835f,-56.51f,0.0f,-159.895f,-73.28f,0.0f,-182.495f,-73.28f,0.0f,-207.395f,-85.72f,0.0f,-210.435f,-84.45f,-7.87f,-226.185f,-93.85f,0.0f,-223.905f,-91.57f,-4.57f,232.285f,-144.4f,-86.61f,217.555f,-117.73f,-73.15f,231.015f,-135.76f,-63.25f,229.745f,-112.14f,-9.65f,224.155f,-97.92f,-16.51f,228.215f,-104.01f,0.0f,234.315f,-121.03f,-5.84f,230.505f,-113.92f,0.0f,218.565f,-86.23f,-24.13f,-230.505f,-84.45f,-3.81f,-231.015f,-84.2f,0.0f,-228.725f,-89.53f,-4.83f,-230.505f,-90.3f,0.0f,-43.815f,-73.02f,-79.25f,-63.885f,-72.01f,-78.23f,83.695f,119.76f,0.0f,95.375f,131.45f,0.0f,24.255f,-36.45f,0.0f,151.005f,-61.59f,0.0f,205.615f,-96.9f,0.0f,215.775f,-119.51f,-73.15f,210.695f,-104.52f,-52.32f,213.745f,-101.47f,-52.32f,232.535f,-127.89f,-21.59f,-154.815f,25.02f,0.0f,17.395f,124.84f,6.1f,-23.495f,90.55f,8.13f,46.105f,139.07f,3.56f,76.075f,140.08f,1.27f,74.805f,80.9f,9.91f,50.165f,110.11f,6.1f,35.175f,88.77f,11.68f,60.835f,121.79f,3.56f,-200.025f,-15.87f,7.62f,-180.975f,1.39999f,13.97f,-156.335f,22.23f,5.33f,-155.325f,20.19f,13.97f,-118.495f,44.58f,18.29f,-75.565f,65.91f,22.35f,-26.545f,75.57f,24.64f,31.625f,74.04f,26.67f,87.755f,62.1f,20.32f,154.055f,26.04f,11.68f,188.345f,-14.1f,14.73f,204.085f,-41.02f,11.94f,217.045f,-63.88f,7.87f,226.945f,-79.88f,9.65f,224.665f,-87.5f,7.37f,-157.865f,13.84f,22.35f,-141.605f,12.57f,32.77f,-112.145f,30.61f,29.97f,-75.055f,47.12f,32.0f,-26.545f,57.79f,35.81f,24.005f,56.52f,34.04f,84.455f,48.64f,28.45f,150.745f,19.18f,18.29f,-163.445f,1.14001f,31.75f,-153.285f,-0.380005f,36.58f,-171.065f,-5.97f,27.43f,-187.325f,-22.99f,20.83f,-201.545f,-37.21f,10.16f};
			return value;
		}
		private float[] getci_3_23_keyValue_3()
		{
			float[] value = {-161.925f,-5.97f,30.99f,-151.005f,-10.29f,35.81f,-203.325f,-44.83f,13.97f,-228.215f,-75.31f,7.37f,-223.135f,-77.6f,7.37f,-196.465f,-54.48f,14.99f,-207.895f,-43.81f,5.08f,-233.045f,-79.12f,4.06f,-170.815f,-22.48f,30.73f,-164.465f,-11.81f,30.73f,-171.835f,-19.68f,30.48f,-184.275f,-27.05f,26.42f,-180.975f,-32.38f,25.91f,-216.785f,-78.61f,8.38f,-192.655f,-58.29f,16.26f,-174.375f,-43.31f,25.91f,-165.485f,-28.07f,34.54f,-171.835f,-48.89f,27.43f,-142.625f,-35.94f,34.8f,-160.405f,-22.73f,34.8f,-158.365f,-13.59f,34.54f,-144.655f,-24.26f,38.61f,-212.975f,-81.41f,10.92f,-191.135f,-63.37f,18.29f,-154.555f,-41.02f,31.75f,-167.765f,-70.48f,17.02f,-132.205f,-61.09f,22.35f,-190.625f,-66.93f,17.27f,-185.295f,-71.25f,10.16f,-101.985f,-49.66f,35.05f,-103.755f,-39.75f,43.18f,-100.715f,-9.51999f,49.28f,-140.335f,-23.24f,40.39f,-135.255f,-5.45999f,40.13f,-134.235f,7.48999f,36.58f,-104.015f,14.1f,42.67f,-60.575f,-1.39999f,51.05f,-72.515f,23.75f,46.23f,-16.895f,7.23999f,51.05f,-21.975f,26.04f,48.01f,28.065f,7.48999f,49.02f,26.035f,31.12f,46.23f,81.405f,-1.89999f,44.7f,81.915f,25.02f,43.94f,130.935f,-22.22f,28.45f,141.095f,0.130005f,33.02f,161.675f,-44.58f,21.84f,176.405f,-24.76f,23.37f,183.515f,-59.82f,14.22f,194.185f,-48.89f,13.97f,195.455f,-72.26f,10.67f,206.125f,-65.4f,9.91f,220.345f,-83.69f,18.29f,-64.895f,-34.16f,41.15f,-15.365f,-26.8f,37.59f,22.475f,-24.76f,38.1f,70.735f,-27.3f,30.99f,120.525f,-40.77f,17.27f,154.055f,-60.83f,9.65f,174.875f,-69.21f,7.11f,195.965f,-86.23f,5.59f,205.355f,-94.36f,11.94f,-76.325f,-67.69f,71.37f,-75.565f,-64.9f,73.66f,-53.465f,-53.72f,64.52f,-29.845f,-68.96f,77.22f,-64.385f,-69.21f,80.01f,-44.065f,-71.75f,80.77f,-210.435f,-84.45f,7.87f,-223.905f,-91.57f,4.57f,231.015f,-135.76f,63.25f,217.555f,-117.73f,73.15f,232.285f,-144.4f,86.61f,224.155f,-97.92f,16.51f,229.745f,-112.14f,9.65f,234.315f,-121.03f,5.84f,218.565f,-86.23f,24.13f,-230.505f,-84.45f,3.81f,-228.725f,-89.53f,4.83f,-63.885f,-72.01f,78.23f,-43.815f,-73.02f,79.25f,213.745f,-101.47f,52.32f,210.695f,-104.52f,52.32f,215.775f,-119.51f,73.15f,232.535f,-127.89f,21.59f,-59.809f,52.365f,-8.13f,-65.138f,53.125f,0.0f,-26.539f,87.925f,0.0f,-18.918f,86.655f,-6.1f,6.48099f,103.925f,0.0f,9.791f,100.885f,-3.56f,37.981f,106.215f,0.0f,39.761f,101.895f,-1.27f,56.011f,101.385f,0.0f,38.491f,42.715f,-9.91f,37.981f,60.745f,0.0f,48.651f,35.855f,0.0f,-1.138f,50.585f,-11.68f,13.851f,71.925f,-6.1f,24.522f,83.605f,-3.56f};
			return value;
		}
		private float[] getci_3_23_keyValue_4()
		{
			float[] value = {-231.682f,-23.267f,0.0f,-237.645f,-30.669f,-7.62f,-243.023f,-34.045f,0.0f,-212.908f,-9.02301f,0.0f,-217.23f,-15.036f,-13.97f,-190.95f,3.68199f,-5.33f,-185.747f,8.08699f,0.0f,-149.868f,28.807f,0.0f,-151.389f,22.822f,-18.29f,-190.112f,1.56599f,-13.97f,-105.641f,45.783f,0.0f,-106.84f,40.524f,-22.35f,-62.859f,37.385f,-24.64f,-4.68901f,35.855f,-26.67f,51.441f,23.915f,-20.32f,106.312f,12.011f,-11.68f,106.024f,16.252f,0.0f,147.052f,3.38199f,0.0f,146.393f,-8.34801f,-14.73f,171.674f,-5.229f,0.0f,172.586f,-21.01f,-11.94f,195.158f,-14.477f,0.0f,196.995f,-29.125f,-7.87f,213.773f,-23.372f,0.0f,215.823f,-32.396f,-9.65f,226.225f,-38.058f,0.0f,220.317f,-38.998f,-7.37f,-193.17f,-4.552f,-22.35f,-177.07f,-7.164f,-32.77f,-146.218f,8.37399f,-29.97f,-107.888f,21.756f,-32.0f,-62.859f,19.605f,-35.81f,-12.309f,18.335f,-34.04f,48.141f,10.455f,-28.45f,105.971f,4.41499f,-18.29f,-189.783f,-19.103f,-36.58f,-199.782f,-16.746f,-31.75f,-207.965f,-23.201f,-27.43f,-225.578f,-38.816f,-20.83f,-240.927f,-51.8097f,-10.16f,-188.331f,-29.167f,-35.81f,-198.856f,-23.958f,-30.99f,-243.332f,-59.2561f,-13.97f,-237.294f,-69.441f,-14.99f,-265.787f,-90.2731f,-7.37f,-270.66f,-87.5703f,-7.37f,-275.789f,-90.9673f,-4.06f,-276.929f,-89.3473f,0.0f,-250.782f,-59.9115f,0.0f,-247.801f,-57.8612f,-5.08f,-209.867f,-36.8f,-30.48f,-201.871f,-29.567f,-30.73f,-209.083f,-39.675f,-30.73f,-222.875f,-43.115f,-26.42f,-220.028f,-48.6996f,-25.91f,-233.813f,-73.5535f,-16.26f,-259.543f,-91.8055f,-8.38f,-214.355f,-60.1386f,-25.91f,-204.234f,-45.6871f,-34.54f,-182.104f,-55.4231f,-34.8f,-212.286f,-65.9098f,-27.43f,-198.729f,-40.786f,-34.8f,-195.939f,-31.846f,-34.54f,-183.16f,-43.615f,-38.61f,-232.719f,-78.7419f,-18.29f,-255.978f,-94.9114f,-10.92f,-210.018f,-87.7627f,-17.02f,-194.414f,-59.4977f,-31.75f,-173.802f,-81.3496f,-22.35f,-227.551f,-87.0784f,-10.16f,-232.505f,-82.3319f,-17.27f,-143.683f,-62.4388f,-43.18f,-142.74f,-72.4613f,-35.05f,-178.77f,-42.956f,-40.39f,-138.15f,-32.564f,-49.28f,-172.235f,-25.658f,-40.13f,-170.146f,-12.837f,-36.58f,-139.483f,-8.75201f,-42.67f,-107.292f,-1.744f,-46.23f,-97.476f,-27.796f,-51.05f,-58.289f,-12.145f,-48.01f,-53.209f,-30.945f,-51.05f,-10.278f,-7.065f,-46.23f,-8.248f,-30.695f,-49.02f,45.601f,-13.165f,-43.94f,45.091f,-40.085f,-44.7f,104.428f,-16.842f,-33.02f,103.132f,-41.349f,-28.45f,142.888f,-23.631f,-23.37f,140.785f,-48.174f,-21.84f,170.176f,-33.299f,-13.97f,168.47f,-48.4858f,-14.22f,190.176f,-37.899f,-9.91f,186.651f,-50.2548f,-10.67f,214.231f,-39.981f,-18.29f,-104.494f,-60.0859f,-41.15f,-51.679f,-64.9852f,-37.59f,-13.839f,-62.9452f,-38.1f,34.421f,-65.4852f,-30.99f,99.745f,-62.3666f,-17.27f};
			return value;
		}
		private float[] getci_3_23_keyValue_5()
		{
			float[] value = {142.447f,-66.0489f,-9.65f,166.932f,-61.2393f,-7.11f,197.22f,-60.0188f,-5.59f,211.268f,-58.5942f,-11.94f,-117.672f,-75.6501f,-73.66f,-118.661f,-77.4442f,-71.37f,-94.723f,-69.5026f,-64.52f,-72.446f,-80.8209f,-77.22f,-86.848f,-81.8791f,-80.77f,-106.888f,-79.097f,-80.01f,-55.239f,-78.1852f,0.0f,-103.267f,-75.9921f,0.0f,32.141f,-76.4152f,0.0f,104.771f,-65.2363f,0.0f,165.318f,-65.4299f,0.0f,198.53f,-61.6453f,0.0f,-169.458f,-84.2593f,0.0f,-134.188f,-80.0455f,0.0f,-202.407f,-91.2048f,0.0f,-224.929f,-89.3333f,0.0f,-250.774f,-99.6686f,0.0f,-253.698f,-98.1512f,-7.87f,-270.172f,-106.215f,0.0f,-267.711f,-104.131f,-4.57f,276.929f,-62.7435f,-86.61f,240.739f,-63.0053f,-73.15f,267.577f,-60.039f,-63.25f,244.778f,-49.169f,-9.65f,228.522f,-45.796f,-16.51f,236.579f,-45.9526f,0.0f,256.002f,-49.7235f,-5.84f,246.9f,-49.46f,0.0f,214.954f,-43.007f,-24.13f,-273.699f,-96.4893f,-3.81f,-274.187f,-96.1979f,0.0f,-272.346f,-101.699f,-4.83f,-274.184f,-102.319f,0.0f,-86.704f,-82.7284f,-79.25f,-106.621f,-80.9666f,-78.23f,47.381f,81.575f,0.0f,59.061f,93.265f,0.0f,-12.059f,-74.6352f,0.0f,139.891f,-68.2642f,0.0f,213.513f,-60.0741f,0.0f,240.934f,-65.579f,-73.15f,223.876f,-60.9112f,-52.32f,223.725f,-56.5192f,-52.32f,261.158f,-54.7995f,-21.59f,-189.204f,6.33699f,0.0f,-18.918f,86.655f,6.1f,-59.809f,52.365f,8.13f,9.791f,100.885f,3.56f,39.761f,101.895f,1.27f,38.491f,42.715f,9.91f,13.851f,71.925f,6.1f,-1.138f,50.585f,11.68f,24.522f,83.605f,3.56f,-237.645f,-30.669f,7.62f,-217.23f,-15.036f,13.97f,-190.95f,3.68199f,5.33f,-190.112f,1.56599f,13.97f,-151.389f,22.822f,18.29f,-106.84f,40.524f,22.35f,-62.859f,37.385f,24.64f,-4.68901f,35.855f,26.67f,51.441f,23.915f,20.32f,106.312f,12.011f,11.68f,146.393f,-8.34801f,14.73f,172.586f,-21.01f,11.94f,196.995f,-29.125f,7.87f,215.823f,-32.396f,9.65f,220.317f,-38.998f,7.37f,-193.17f,-4.552f,22.35f,-177.07f,-7.164f,32.77f,-146.218f,8.37399f,29.97f,-107.888f,21.756f,32.0f,-62.859f,19.605f,35.81f,-12.309f,18.335f,34.04f,48.141f,10.455f,28.45f,105.971f,4.41499f,18.29f,-199.782f,-16.746f,31.75f,-189.783f,-19.103f,36.58f,-207.965f,-23.201f,27.43f,-225.578f,-38.816f,20.83f,-240.927f,-51.8097f,10.16f,-198.856f,-23.958f,30.99f,-188.331f,-29.167f,35.81f,-243.332f,-59.2561f,13.97f,-270.66f,-87.5703f,7.37f,-265.787f,-90.2731f,7.37f,-237.294f,-69.441f,14.99f,-247.801f,-57.8612f,5.08f,-275.789f,-90.9673f,4.06f,-209.083f,-39.675f,30.73f,-201.871f,-29.567f,30.73f,-209.867f,-36.8f,30.48f,-222.875f,-43.115f,26.42f,-220.028f,-48.6996f,25.91f,-259.543f,-91.8055f,8.38f,-233.813f,-73.5535f,16.26f};
			return value;
		}
		private float[] getci_3_23_keyValue_6()
		{
			float[] value = {-214.355f,-60.1386f,25.91f,-204.234f,-45.6871f,34.54f,-212.286f,-65.9098f,27.43f,-182.104f,-55.4231f,34.8f,-198.729f,-40.786f,34.8f,-195.939f,-31.846f,34.54f,-183.16f,-43.615f,38.61f,-255.978f,-94.9114f,10.92f,-232.719f,-78.7419f,18.29f,-194.414f,-59.4977f,31.75f,-210.018f,-87.7627f,17.02f,-173.802f,-81.3496f,22.35f,-232.505f,-82.3319f,17.27f,-227.551f,-87.0784f,10.16f,-142.74f,-72.4613f,35.05f,-143.683f,-62.4388f,43.18f,-138.15f,-32.564f,49.28f,-178.77f,-42.956f,40.39f,-172.235f,-25.658f,40.13f,-170.146f,-12.837f,36.58f,-139.483f,-8.75201f,42.67f,-97.476f,-27.796f,51.05f,-107.292f,-1.744f,46.23f,-53.209f,-30.945f,51.05f,-58.289f,-12.145f,48.01f,-8.248f,-30.695f,49.02f,-10.278f,-7.065f,46.23f,45.091f,-40.085f,44.7f,45.601f,-13.165f,43.94f,103.132f,-41.349f,28.45f,104.428f,-16.842f,33.02f,140.785f,-48.174f,21.84f,142.888f,-23.631f,23.37f,168.47f,-48.4858f,14.22f,170.176f,-33.299f,13.97f,186.651f,-50.2548f,10.67f,190.176f,-37.899f,9.91f,214.231f,-39.981f,18.29f,-104.494f,-60.0859f,41.15f,-51.679f,-64.9852f,37.59f,-13.839f,-62.9452f,38.1f,34.421f,-65.4852f,30.99f,99.745f,-62.3666f,17.27f,142.447f,-66.0489f,9.65f,166.932f,-61.2393f,7.11f,197.22f,-60.0188f,5.59f,211.268f,-58.5942f,11.94f,-118.661f,-77.4442f,71.37f,-117.672f,-75.6501f,73.66f,-94.723f,-69.5026f,64.52f,-72.446f,-80.8209f,77.22f,-106.888f,-79.097f,80.01f,-86.848f,-81.8791f,80.77f,-253.698f,-98.1512f,7.87f,-267.711f,-104.131f,4.57f,267.577f,-60.039f,63.25f,240.739f,-63.0053f,73.15f,276.929f,-62.7435f,86.61f,228.522f,-45.796f,16.51f,244.778f,-49.169f,9.65f,256.002f,-49.7235f,5.84f,214.954f,-43.007f,24.13f,-273.699f,-96.4893f,3.81f,-272.346f,-101.699f,4.83f,-106.621f,-80.9666f,78.23f,-86.704f,-82.7284f,79.25f,223.725f,-56.5192f,52.32f,223.876f,-60.9112f,52.32f,240.934f,-65.579f,73.15f,261.158f,-54.7995f,21.59f,-44.9192f,38.3501f,-8.13f,-50.2492f,39.11f,0.0f,-11.6492f,73.9101f,0.0f,-4.0292f,72.64f,-6.1f,21.3708f,89.91f,0.0f,24.6808f,86.8701f,-3.56f,52.8709f,92.2f,0.0f,54.6509f,87.88f,-1.27f,70.9009f,87.3701f,0.0f,53.3809f,28.7f,-9.91f,52.8709f,46.7301f,0.0f,63.5409f,21.84f,0.0f,13.7508f,36.57f,-11.68f,28.7409f,57.9101f,-6.1f,39.4109f,69.59f,-3.56f,-214.37f,-9.709f,0.0f,-221.846f,-15.5239f,-7.62f,-227.869f,-17.5109f,0.0f,-193.31f,0.150703f,0.0f,-198.687f,-4.8381f,-13.97f,-170.04f,8.4533f,-5.33f,-164.363f,11.8894f,0.0f,-127.722f,27.055f,0.0f,-129.905f,21.3163f,-18.29f,-169.621f,6.2233f,-13.97f,-85.1861f,39.428f,0.0f,-86.6881f,34.2794f,-22.35f,-47.9692f,23.37f,-24.64f,10.2008f,21.84f,-26.67f,66.3309f,9.9f,-20.32f};
			return value;
		}
		private float[] getci_3_23_keyValue_7()
		{
			float[] value = {114.118f,6.9605f,-11.68f,113.16f,11.0842f,0.0f,148.859f,8.9437f,0.0f,152.678f,-2.121f,-14.73f,171.384f,11.0823f,0.0f,179.82f,-2.1085f,-11.94f,193.495f,15.4768f,0.0f,203.488f,4.9549f,-7.87f,211.83f,20.1639f,0.0f,219.173f,14.9779f,-9.65f,230.069f,18.5903f,0.0f,226.759f,13.5161f,-7.37f,-173.623f,0.75f,-22.35f,-158.647f,-4.5872f,-32.77f,-126.869f,6.3294f,-29.97f,-89.1395f,15.6575f,-32.0f,-47.9692f,5.59f,-35.81f,2.5808f,4.32f,-34.04f,63.0309f,-3.56f,-28.45f,115.172f,-0.560097f,-18.29f,-172.989f,-14.1689f,-36.58f,-182.241f,-10.0034f,-31.75f,-191.431f,-14.7299f,-27.43f,-211.956f,-26.2349f,-20.83f,-230.148f,-35.2539f,-10.16f,-173.382f,-24.3299f,-35.81f,-182.72f,-17.2579f,-30.99f,-234.379f,-41.8749f,-13.97f,-230.824f,-53.2509f,-14.99f,-265.323f,-65.7619f,-7.37f,-269.53f,-61.7589f,-7.37f,-275.743f,-63.4989f,-4.06f,-276.428f,-61.6079f,0.0f,-241.975f,-40.6069f,0.0f,-238.483f,-39.3919f,-5.08f,-196.064f,-27.6559f,-30.48f,-186.752f,-22.1789f,-30.73f,-195.882f,-30.6309f,-30.73f,-210.254f,-31.0309f,-26.42f,-208.666f,-37.1109f,-25.91f,-228.288f,-58.0969f,-16.26f,-259.342f,-69.0049f,-8.38f,-205.474f,-49.5209f,-25.91f,-192.292f,-37.5079f,-34.54f,-171.859f,-51.2809f,-34.8f,-204.62f,-55.6069f,-27.43f,-185.84f,-33.7959f,-34.8f,-181.365f,-25.5569f,-34.54f,-170.829f,-39.4709f,-38.61f,-228.423f,-63.4019f,-18.29f,-256.516f,-72.9869f,-10.92f,-207.002f,-77.4509f,-17.02f,-185.127f,-52.9949f,-31.75f,-167.84f,-78.2769f,-22.35f,-225.091f,-72.7539f,-10.16f,-229.071f,-66.9399f,-17.27f,-133.553f,-64.2139f,-43.18f,-133.918f,-74.2739f,-35.05f,-166.314f,-39.5879f,-40.39f,-124.082f,-35.2919f,-49.28f,-156.943f,-23.6179f,-40.13f,-152.864f,-11.2916f,-36.58f,-122.497f,-11.4953f,-42.67f,-90.4839f,-7.8107f,-46.23f,-82.8456f,-34.5569f,-51.05f,-43.3992f,-26.1599f,-48.01f,-38.3192f,-44.9599f,-51.05f,4.6108f,-21.0799f,-46.23f,6.6408f,-44.7099f,-49.02f,60.4909f,-27.1799f,-43.94f,59.9809f,-54.0999f,-44.7f,117.636f,-21.7149f,-33.02f,120.947f,-46.0389f,-28.45f,155.384f,-17.5349f,-23.37f,162.792f,-41.0489f,-21.84f,183.998f,-13.9029f,-13.97f,190.265f,-27.8559f,-14.22f,203.392f,-6.2522f,-9.91f,207.767f,-18.3949f,-10.67f,223.159f,8.3645f,-18.29f,-92.6284f,-66.1809f,-41.15f,-36.7892f,-78.9999f,-37.59f,1.0508f,-76.9599f,-38.1f,49.3109f,-79.4999f,-30.99f,121.1f,-67.3769f,-17.27f,171.837f,-56.7449f,-9.65f,195.473f,-39.6469f,-7.11f,223.047f,-18.8189f,-5.59f,233.698f,-7.2368f,-11.94f,-107.939f,-68.9429f,-73.66f,-109.174f,-70.6239f,-71.37f,-83.1762f,-64.8699f,-64.52f,-60.2597f,-77.5359f,-77.22f,-75.7239f,-77.7709f,-80.77f,-96.8564f,-73.4239f,-80.01f,-40.3492f,-92.1999f,0.0f,-92.7342f,-82.1339f,0.0f,47.0309f,-90.4299f,0.0f,127.717f,-69.1159f,0.0f,196.054f,-44.1779f,0.0f};
			return value;
		}
		private float[] getci_3_23_keyValue_8()
		{
			float[] value = {225.241f,-19.1009f,0.0f,-163.77f,-81.8899f,0.0f,-125.906f,-82.9039f,0.0f,-199.76f,-82.4539f,0.0f,-222.9f,-75.5739f,0.0f,-252.398f,-79.0009f,0.0f,-255.032f,-76.7379f,-7.87f,-274.414f,-79.7719f,0.0f,-271.253f,-78.5029f,-4.57f,277.433f,48.8188f,-86.61f,258.132f,14.5177f,-73.15f,270.88f,41.0393f,-63.25f,249.887f,26.3978f,-9.65f,237.134f,15.1495f,-16.51f,242.456f,21.535f,0.0f,256.63f,35.8549f,-5.84f,251.355f,28.045f,0.0f,225.737f,6.7142f,-24.13f,-275.222f,-69.4079f,-3.81f,-275.637f,-68.9829f,0.0f,-275.351f,-74.7999f,-4.83f,-277.432f,-74.8429f,0.0f,-75.6284f,-78.6279f,-79.25f,-96.7464f,-75.3099f,-78.23f,62.2709f,67.56f,0.0f,73.9509f,79.25f,0.0f,2.8308f,-88.6499f,0.0f,169.884f,-59.9439f,0.0f,236.499f,-6.5329f,0.0f,260.278f,13.1461f,-73.15f,244.946f,1.2884f,-52.32f,241.616f,4.1116f,-52.32f,263.392f,37.7359f,-21.59f,-167.924f,10.7602f,0.0f,-4.0292f,72.64f,6.1f,-44.9192f,38.3501f,8.13f,24.6808f,86.8701f,3.56f,54.6509f,87.88f,1.27f,53.3809f,28.7f,9.91f,28.7409f,57.9101f,6.1f,13.7508f,36.57f,11.68f,39.4109f,69.59f,3.56f,-221.846f,-15.5239f,7.62f,-198.687f,-4.8381f,13.97f,-170.04f,8.4533f,5.33f,-169.621f,6.2233f,13.97f,-129.905f,21.3163f,18.29f,-86.6881f,34.2794f,22.35f,-47.9692f,23.37f,24.64f,10.2008f,21.84f,26.67f,66.3309f,9.9f,20.32f,114.118f,6.9605f,11.68f,152.678f,-2.121f,14.73f,179.82f,-2.1085f,11.94f,203.488f,4.9549f,7.87f,219.173f,14.9779f,9.65f,226.759f,13.5161f,7.37f,-173.623f,0.75f,22.35f,-158.647f,-4.5872f,32.77f,-126.869f,6.3294f,29.97f,-89.1395f,15.6575f,32.0f,-47.9692f,5.59f,35.81f,2.5808f,4.32f,34.04f,63.0309f,-3.56f,28.45f,115.172f,-0.560097f,18.29f,-182.241f,-10.0034f,31.75f,-172.989f,-14.1689f,36.58f,-191.431f,-14.7299f,27.43f,-211.956f,-26.2349f,20.83f,-230.148f,-35.2539f,10.16f,-182.72f,-17.2579f,30.99f,-173.382f,-24.3299f,35.81f,-234.379f,-41.8749f,13.97f,-269.53f,-61.7589f,7.37f,-265.323f,-65.7619f,7.37f,-230.824f,-53.2509f,14.99f,-238.483f,-39.3919f,5.08f,-275.743f,-63.4989f,4.06f,-195.882f,-30.6309f,30.73f,-186.752f,-22.1789f,30.73f,-196.064f,-27.6559f,30.48f,-210.254f,-31.0309f,26.42f,-208.666f,-37.1109f,25.91f,-259.342f,-69.0049f,8.38f,-228.288f,-58.0969f,16.26f,-205.474f,-49.5209f,25.91f,-192.292f,-37.5079f,34.54f,-204.62f,-55.6069f,27.43f,-171.859f,-51.2809f,34.8f,-185.84f,-33.7959f,34.8f,-181.365f,-25.5569f,34.54f,-170.829f,-39.4709f,38.61f,-256.516f,-72.9869f,10.92f,-228.423f,-63.4019f,18.29f,-185.127f,-52.9949f,31.75f,-207.002f,-77.4509f,17.02f,-167.84f,-78.2769f,22.35f,-229.071f,-66.9399f,17.27f,-225.091f,-72.7539f,10.16f,-133.918f,-74.2739f,35.05f};
			return value;
		}
		private float[] getci_3_23_keyValue_9()
		{
			float[] value = {-133.553f,-64.2139f,43.18f,-124.082f,-35.2919f,49.28f,-166.314f,-39.5879f,40.39f,-156.943f,-23.6179f,40.13f,-152.864f,-11.2916f,36.58f,-122.497f,-11.4953f,42.67f,-82.8456f,-34.5569f,51.05f,-90.4839f,-7.8107f,46.23f,-38.3192f,-44.9599f,51.05f,-43.3992f,-26.1599f,48.01f,6.6408f,-44.7099f,49.02f,4.6108f,-21.0799f,46.23f,59.9809f,-54.0999f,44.7f,60.4909f,-27.1799f,43.94f,120.947f,-46.0389f,28.45f,117.636f,-21.7149f,33.02f,162.792f,-41.0489f,21.84f,155.384f,-17.5349f,23.37f,190.265f,-27.8559f,14.22f,183.998f,-13.9029f,13.97f,207.767f,-18.3949f,10.67f,203.392f,-6.2522f,9.91f,223.159f,8.3645f,18.29f,-92.6284f,-66.1809f,41.15f,-36.7892f,-78.9999f,37.59f,1.0508f,-76.9599f,38.1f,49.3109f,-79.4999f,30.99f,121.1f,-67.3769f,17.27f,171.837f,-56.7449f,9.65f,195.473f,-39.6469f,7.11f,223.047f,-18.8189f,5.59f,233.698f,-7.2368f,11.94f,-109.174f,-70.6239f,71.37f,-107.939f,-68.9429f,73.66f,-83.1762f,-64.8699f,64.52f,-60.2597f,-77.5359f,77.22f,-96.8564f,-73.4239f,80.01f,-75.7239f,-77.7709f,80.77f,-255.032f,-76.7379f,7.87f,-271.253f,-78.5029f,4.57f,270.88f,41.0393f,63.25f,258.132f,14.5177f,73.15f,277.433f,48.8188f,86.61f,237.134f,15.1495f,16.51f,249.887f,26.3978f,9.65f,256.63f,35.8549f,5.84f,225.737f,6.7142f,24.13f,-275.222f,-69.4079f,3.81f,-275.351f,-74.7999f,4.83f,-96.7464f,-75.3099f,78.23f,-75.6284f,-78.6279f,79.25f,241.616f,4.1116f,52.32f,244.946f,1.2884f,52.32f,260.278f,13.1461f,73.15f,263.392f,37.7359f,21.59f};
			return value;
		}

		/** Large attribute array: IndexedFaceSet coordIndex field, scene-graph level=5, element #17, 2256 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_5_17_coordIndex()
		{
			MFInt32 IndexedFaceSet_5_17_coordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_5_17_coordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_5_17_coordIndex_2()))
				.append(new MFInt32(getIndexedFaceSet_5_17_coordIndex_3()));
			return IndexedFaceSet_5_17_coordIndex;
		}
		/** Large attribute array: Coordinate DEF='pointList' point field, scene-graph level=6, element #17, 855 total numbers made up of 285 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3f getpointList_6_17_point()
		{
			MFVec3f pointList_6_17_point = new MFVec3f()/*2.finalize*/
				.append(new MFVec3f(getpointList_6_17_point_1()))
				.append(new MFVec3f(getpointList_6_17_point_2()))
				.append(new MFVec3f(getpointList_6_17_point_3()));
			return pointList_6_17_point;
		}
		/** Large attribute array: CoordinateInterpolator DEF='ci' keyValue field, scene-graph level=3, element #23, 2565 total numbers made up of 855 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3f getci_3_23_keyValue()
		{
			MFVec3f ci_3_23_keyValue = new MFVec3f()/*2.finalize*/
				.append(new MFVec3f(getci_3_23_keyValue_1()))
				.append(new MFVec3f(getci_3_23_keyValue_2()))
				.append(new MFVec3f(getci_3_23_keyValue_3()))
				.append(new MFVec3f(getci_3_23_keyValue_4()))
				.append(new MFVec3f(getci_3_23_keyValue_5()))
				.append(new MFVec3f(getci_3_23_keyValue_6()))
				.append(new MFVec3f(getci_3_23_keyValue_7()))
				.append(new MFVec3f(getci_3_23_keyValue_8()))
				.append(new MFVec3f(getci_3_23_keyValue_9()));
			return ci_3_23_keyValue;
		}

	/** The initialized model object, created within initialize() method. */
	private X3D x3dModel;

	/** Provide a 
	 * <a href="https://dzone.com/articles/java-copy-shallow-vs-deep-in-which-you-will-swim" target="_blank">shallow copy</a>
	 * of the X3D model.
	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3D.html">X3D</a>
	 * @return flipp model
	 */
	public X3D getX3dModel()
	{	  
		return x3dModel;
	}
	   
    /** Default main() method provided for test purposes, uses CommandLine to set global ConfigurationProperties for this object.
     * @param args array of input parameters, provided as arguments
	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3D.html#handleArguments-java.lang.String:A-">X3D.handleArguments(args)</a>
	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3D.html#validationReport--">X3D.validationReport()</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/CommandLine.html">CommandLine</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/CommandLine.html#USAGE">CommandLine.USAGE</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/ConfigurationProperties.html">ConfigurationProperties</a>
     */
    public static void main(String args[])
    {
        X3D thisExampleX3dModel = new flipp().getX3dModel();

		boolean hasArguments = (args != null) && (args.length > 0);
		boolean validate = true; // default
		boolean argumentsLoadNewModel = false;
		String  fileName = new String();

		if (args != null)
		{
			for (String arg : args)
			{
				if (arg.toLowerCase().startsWith("-v") || arg.toLowerCase().contains("validate"))
				{
					validate = true; // making sure
				}
				if (arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_X3D) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_CLASSICVRML) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_X3DB) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_VRML97) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_EXI) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_GZIP) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_ZIP) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_HTML) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_XHTML))
				{
					argumentsLoadNewModel = true;
					fileName = arg;
				}
			}
		}
		if      (argumentsLoadNewModel)
			System.out.println("WARNING: \"flipp\" model invocation is attempting to load file \"" + fileName + "\" instead of simply validating itself... file loading ignored.");
		else if (hasArguments) // if no arguments provided, this method produces usage warning
			thisExampleX3dModel.handleArguments(args);

		if (validate)
		{
			System.out.print("Java program \"flipp\" self-validation test results: ");
			String validationResults = thisExampleX3dModel.validationReport();
			System.out.println(validationResults);
		}
    }
}
