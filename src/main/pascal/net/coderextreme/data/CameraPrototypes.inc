function CameraPrototypes: TX3DRootNode;
var
X3D0: TX3DRootNode;
Group16: TGroupNode;
ProtoDeclare17: TProtoDeclareNode;
ProtoInterface18: TProtoInterfaceNode;
field19: TfieldNode;
field20: TfieldNode;
field21: TfieldNode;
field22: TfieldNode;
field23: TfieldNode;
field24: TfieldNode;
field25: TfieldNode;
field26: TfieldNode;
field27: TfieldNode;
field28: TfieldNode;
field29: TfieldNode;
field30: TfieldNode;
field31: TfieldNode;
field32: TfieldNode;
field33: TfieldNode;
field34: TfieldNode;
field35: TfieldNode;
field36: TfieldNode;
field37: TfieldNode;
field38: TfieldNode;
field39: TfieldNode;
field40: TfieldNode;
field41: TfieldNode;
ProtoBody42: TProtoBodyNode;
Viewpoint43: TViewpointNode;
IS44: TISNode;
connect45: TconnectNode;
connect46: TconnectNode;
connect47: TconnectNode;
connect48: TconnectNode;
connect49: TconnectNode;
connect50: TconnectNode;
connect51: TconnectNode;
NavigationInfo52: TNavigationInfoNode;
IS53: TISNode;
connect54: TconnectNode;
connect55: TconnectNode;
connect56: TconnectNode;
DirectionalLight57: TDirectionalLightNode;
IS58: TISNode;
connect59: TconnectNode;
connect60: TconnectNode;
connect61: TconnectNode;
PositionInterpolator62: TPositionInterpolatorNode;
IS63: TISNode;
connect64: TconnectNode;
OrientationInterpolator65: TOrientationInterpolatorNode;
IS66: TISNode;
connect67: TconnectNode;
Script70: TScriptNode;
field71: TfieldNode;
field72: TfieldNode;
field73: TfieldNode;
field74: TfieldNode;
field75: TfieldNode;
field76: TfieldNode;
field77: TfieldNode;
field78: TfieldNode;
field79: TfieldNode;
field80: TfieldNode;
field81: TfieldNode;
field82: TfieldNode;
field83: TfieldNode;
field84: TfieldNode;
field85: TfieldNode;
field86: TfieldNode;
field87: TfieldNode;
field88: TfieldNode;
Viewpoint89: TViewpointNode;
field90: TfieldNode;
NavigationInfo91: TNavigationInfoNode;
field92: TfieldNode;
PositionInterpolator93: TPositionInterpolatorNode;
field94: TfieldNode;
OrientationInterpolator95: TOrientationInterpolatorNode;
field96: TfieldNode;
field97: TfieldNode;
field98: TfieldNode;
field99: TfieldNode;
field100: TfieldNode;
field101: TfieldNode;
field102: TfieldNode;
field103: TfieldNode;
field104: TfieldNode;
field105: TfieldNode;
field106: TfieldNode;
IS107: TISNode;
connect108: TconnectNode;
connect109: TconnectNode;
connect110: TconnectNode;
connect111: TconnectNode;
connect112: TconnectNode;
connect113: TconnectNode;
connect114: TconnectNode;
connect115: TconnectNode;
connect116: TconnectNode;
connect117: TconnectNode;
connect118: TconnectNode;
connect119: TconnectNode;
connect120: TconnectNode;
connect121: TconnectNode;
connect122: TconnectNode;
connect123: TconnectNode;
connect124: TconnectNode;
connect125: TconnectNode;
ProtoDeclare131: TProtoDeclareNode;
ProtoInterface132: TProtoInterfaceNode;
field133: TfieldNode;
field134: TfieldNode;
field135: TfieldNode;
field136: TfieldNode;
field137: TfieldNode;
field138: TfieldNode;
field139: TfieldNode;
field140: TfieldNode;
field141: TfieldNode;
field142: TfieldNode;
field143: TfieldNode;
field144: TfieldNode;
ProtoBody145: TProtoBodyNode;
Script146: TScriptNode;
field147: TfieldNode;
field148: TfieldNode;
field149: TfieldNode;
field150: TfieldNode;
field151: TfieldNode;
field152: TfieldNode;
field153: TfieldNode;
field154: TfieldNode;
field155: TfieldNode;
field156: TfieldNode;
field157: TfieldNode;
field158: TfieldNode;
field159: TfieldNode;
field160: TfieldNode;
field161: TfieldNode;
IS162: TISNode;
connect163: TconnectNode;
connect164: TconnectNode;
connect165: TconnectNode;
connect166: TconnectNode;
connect167: TconnectNode;
connect168: TconnectNode;
connect169: TconnectNode;
connect170: TconnectNode;
connect171: TconnectNode;
connect172: TconnectNode;
connect173: TconnectNode;
connect174: TconnectNode;
ProtoDeclare175: TProtoDeclareNode;
ProtoInterface176: TProtoInterfaceNode;
field177: TfieldNode;
field178: TfieldNode;
field179: TfieldNode;
field180: TfieldNode;
field181: TfieldNode;
field182: TfieldNode;
field183: TfieldNode;
field184: TfieldNode;
field185: TfieldNode;
field186: TfieldNode;
field187: TfieldNode;
field188: TfieldNode;
ProtoBody189: TProtoBodyNode;
Script190: TScriptNode;
field191: TfieldNode;
field192: TfieldNode;
field193: TfieldNode;
field194: TfieldNode;
field195: TfieldNode;
field196: TfieldNode;
field197: TfieldNode;
field198: TfieldNode;
field199: TfieldNode;
field200: TfieldNode;
field201: TfieldNode;
field202: TfieldNode;
IS203: TISNode;
connect204: TconnectNode;
connect205: TconnectNode;
connect206: TconnectNode;
connect207: TconnectNode;
connect208: TconnectNode;
connect209: TconnectNode;
connect210: TconnectNode;
connect211: TconnectNode;
connect212: TconnectNode;
connect213: TconnectNode;
connect214: TconnectNode;
connect215: TconnectNode;
ProtoDeclare216: TProtoDeclareNode;
ProtoInterface217: TProtoInterfaceNode;
field218: TfieldNode;
field219: TfieldNode;
field220: TfieldNode;
field221: TfieldNode;
field222: TfieldNode;
field223: TfieldNode;
field224: TfieldNode;
field225: TfieldNode;
field226: TfieldNode;
field227: TfieldNode;
field228: TfieldNode;
ProtoBody229: TProtoBodyNode;
Script230: TScriptNode;
field231: TfieldNode;
field232: TfieldNode;
field233: TfieldNode;
field234: TfieldNode;
field235: TfieldNode;
field236: TfieldNode;
field237: TfieldNode;
field238: TfieldNode;
field239: TfieldNode;
field240: TfieldNode;
field241: TfieldNode;
IS242: TISNode;
connect243: TconnectNode;
connect244: TconnectNode;
connect245: TconnectNode;
connect246: TconnectNode;
connect247: TconnectNode;
connect248: TconnectNode;
connect249: TconnectNode;
connect250: TconnectNode;
connect251: TconnectNode;
connect252: TconnectNode;
connect253: TconnectNode;
Background254: TBackgroundNode;
Anchor255: TAnchorNode;
Transform256: TTransformNode;
Shape257: TShapeNode;
Text258: TTextNode;
FontStyle259: TFontStyleNode;
Appearance260: TAppearanceNode;
Material261: TMaterialNode;
begin
X3D0 := TX3DRootNode.Create;
X3D0.Profile := 'Immersive';
X3D0.ForceVersion.Major := 3;
X3D0.ForceVersion.Minor := 2;
X3D0.Meta['title'] := 'CameraPrototypes.x3d';
X3D0.Meta['description'] := 'Camera, CameraShot and CameraMovement prototypes that demonstrate storyboard capabilities and precise camera operation. This is a developmental effort for potential X3D Specification improvement.';
X3D0.Meta['creator'] := 'Don Brutzman and Jeff Weekley';
X3D0.Meta['created'] := '16 March 2009';
X3D0.Meta['modified'] := '25 October 2016';
X3D0.Meta['TODO'] := 'Schematron rules, backed up by initialize() checks';
X3D0.Meta['reference'] := 'BeyondViewpointCameraNodesWeb3D2009.pdf';
X3D0.Meta['reference'] := 'https://www.web3d.org/x3d/specifications/ISO-IEC-FDIS-19775-1.2-X3D-AbstractSpecification/Part01/components/navigation.html';
X3D0.Meta['subject'] := 'Camera nodes for Viewpoint navigation control';
X3D0.Meta['reference'] := 'CameraExamples.x3d';
X3D0.Meta['identifier'] := 'https://www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d';
X3D0.Meta['reference'] := 'http://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d';
X3D0.Meta['generator'] := 'X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit';
X3D0.Meta['license'] := '../license.html';
Group16 := TGroupNode.Create;
{ =============== Camera ============== }
ProtoDeclare17 := TProtoDeclareNode.Create;
ProtoDeclare17.NameField := 'Camera';
ProtoDeclare17.Appinfo := 'Camera node provides direct control of scene view to enable cinematic camera animation shot by shot and move by move along with still digital-photography settings for offline rendering of camera images.';
ProtoInterface18 := TProtoInterfaceNode.Create;
{ Viewpoint-related fields, NavigationInfo-related fields and Camera-unique fields }
field19 := TfieldNode.Create;
field19.NameField := 'description';
field19.AccessType := 'inputOutput';
field19.Appinfo := 'Text description to be displayed for this Camera';
field19.Type := 'SFString';
{ .AddField }
ProtoInterface18.Field := field19;
field20 := TfieldNode.Create;
field20.NameField := 'position';
field20.AccessType := 'inputOutput';
field20.Appinfo := 'Camera position in local transformation frame, which is default prior to first CameraShot initialPosition getting activated';
field20.Type := 'SFVec3f';
field20.Value := '0 0 10';
{ .AddField }
ProtoInterface18.Field := field20;
field21 := TfieldNode.Create;
field21.NameField := 'orientation';
field21.AccessType := 'inputOutput';
field21.Appinfo := 'Camera rotation in local transformation frame, which is default prior to first CameraShot initialPosition getting activated';
field21.Type := 'SFRotation';
field21.Value := '0 0 1 0';
{ .AddField }
ProtoInterface18.Field := field21;
field22 := TfieldNode.Create;
field22.NameField := 'fieldOfView';
field22.AccessType := 'inputOutput';
field22.Appinfo := 'pi/4';
field22.Type := 'SFFloat';
field22.Value := '0.7854';
{ .AddField }
ProtoInterface18.Field := field22;
field23 := TfieldNode.Create;
field23.NameField := 'set_fraction';
field23.AccessType := 'inputOnly';
field23.Appinfo := 'input fraction drives interpolators';
field23.Type := 'SFFloat';
{ .AddField }
ProtoInterface18.Field := field23;
field24 := TfieldNode.Create;
field24.NameField := 'set_bind';
field24.AccessType := 'inputOnly';
field24.Appinfo := 'input event binds or unbinds this Camera';
field24.Type := 'SFBool';
{ .AddField }
ProtoInterface18.Field := field24;
field25 := TfieldNode.Create;
field25.NameField := 'bindTime';
field25.AccessType := 'outputOnly';
field25.Appinfo := 'output event indicates when this Camera is bound';
field25.Type := 'SFTime';
{ .AddField }
ProtoInterface18.Field := field25;
field26 := TfieldNode.Create;
field26.NameField := 'isBound';
field26.AccessType := 'outputOnly';
field26.Appinfo := 'output event indicates whether this Camera is bound or unbound';
field26.Type := 'SFBool';
{ .AddField }
ProtoInterface18.Field := field26;
field27 := TfieldNode.Create;
field27.NameField := 'nearClipPlane';
field27.AccessType := 'inputOutput';
field27.Appinfo := 'Vector distance to near clipping plane corresponds to NavigationInfo.avatarSize[0]';
field27.Type := 'SFFloat';
field27.Value := '0.25';
{ .AddField }
ProtoInterface18.Field := field27;
field28 := TfieldNode.Create;
field28.NameField := 'farClipPlane';
field28.AccessType := 'inputOutput';
field28.Appinfo := 'Vector distance to far clipping plane corresponds to NavigationInfo.visibilityLimit';
field28.Type := 'SFFloat';
field28.Value := '0';
{ .AddField }
ProtoInterface18.Field := field28;
field29 := TfieldNode.Create;
field29.NameField := 'shots';
field29.AccessType := 'inputOutput';
field29.Appinfo := 'Array of CameraShot nodes which in turn contain CameraMovement nodes';
field29.Type := 'MFNode';
{ initialization nodes (if any) go here }
{ .AddField }
ProtoInterface18.Field := field29;
field30 := TfieldNode.Create;
field30.NameField := 'headlight';
field30.AccessType := 'inputOutput';
field30.Appinfo := 'Whether camera headlight is on or off';
field30.Type := 'SFBool';
field30.Value := 'true';
{ .AddField }
ProtoInterface18.Field := field30;
field31 := TfieldNode.Create;
field31.NameField := 'headlightColor';
field31.AccessType := 'inputOutput';
field31.Appinfo := 'Camera headlight color';
field31.Type := 'SFColor';
field31.Value := '1 1 1';
{ .AddField }
ProtoInterface18.Field := field31;
field32 := TfieldNode.Create;
field32.NameField := 'headlightIntensity';
field32.AccessType := 'inputOutput';
field32.Appinfo := 'Camera headlight intensity';
field32.Type := 'SFFloat';
field32.Value := '1';
{ .AddField }
ProtoInterface18.Field := field32;
field33 := TfieldNode.Create;
field33.NameField := 'filterColor';
field33.AccessType := 'inputOutput';
field33.Appinfo := 'Camera filter color that modifies virtual lens capture';
field33.Type := 'SFColor';
field33.Value := '1 1 1';
{ .AddField }
ProtoInterface18.Field := field33;
field34 := TfieldNode.Create;
field34.NameField := 'filterTransparency';
field34.AccessType := 'inputOutput';
field34.Appinfo := 'Camera filter transparency that modifies virtual lens capture';
field34.Type := 'SFFloat';
field34.Value := '1';
{ .AddField }
ProtoInterface18.Field := field34;
field35 := TfieldNode.Create;
field35.NameField := 'upVector';
field35.AccessType := 'inputOutput';
field35.Appinfo := 'upVector changes modify camera orientation (and possibly vice versa)';
field35.Type := 'SFVec3f';
field35.Value := '0 1 0';
{ .AddField }
ProtoInterface18.Field := field35;
field36 := TfieldNode.Create;
field36.NameField := 'fStop';
field36.AccessType := 'inputOutput';
field36.Appinfo := 'Focal length divided effective aperture diameter indicating width of focal plane';
field36.Type := 'SFFloat';
field36.Value := '5.6';
{ .AddField }
ProtoInterface18.Field := field36;
field37 := TfieldNode.Create;
field37.NameField := 'focusDistance';
field37.AccessType := 'inputOutput';
field37.Appinfo := 'Distance to focal plane of sharpest focus';
field37.Type := 'SFFloat';
field37.Value := '10';
{ .AddField }
ProtoInterface18.Field := field37;
field38 := TfieldNode.Create;
field38.NameField := 'isActive';
field38.AccessType := 'outputOnly';
field38.Appinfo := 'Mark start/stop with true/false output respectively useful to trigger external animations';
field38.Type := 'SFBool';
{ .AddField }
ProtoInterface18.Field := field38;
field39 := TfieldNode.Create;
field39.NameField := 'totalDuration';
field39.AccessType := 'outputOnly';
field39.Appinfo := 'Total duration of contained enabled CameraShot (and thus CameraMovement) move durations';
field39.Type := 'SFTime';
{ .AddField }
ProtoInterface18.Field := field39;
field40 := TfieldNode.Create;
field40.NameField := 'offlineRender';
field40.AccessType := 'inputOutput';
field40.Appinfo := 'OfflineRender node';
field40.Type := 'SFNode';
{ initialization node (if any) goes here }
{ .AddField }
ProtoInterface18.Field := field40;
field41 := TfieldNode.Create;
field41.NameField := 'traceEnabled';
field41.AccessType := 'initializeOnly';
field41.Appinfo := 'enable console output to trace script computations and prototype progress';
field41.Type := 'SFBool';
field41.Value := 'false';
{ .AddField }
ProtoInterface18.Field := field41;
{ .SetProtoInterface }
ProtoDeclare17.ProtoInterface := ProtoInterface18;
ProtoBody42 := TProtoBodyNode.Create;
Viewpoint43 := TViewpointNode.Create;
IS44 := TISNode.Create;
connect45 := TconnectNode.Create;
connect45.NodeField := 'description';
connect45.ProtoField := 'description';
{ .AddConnect }
IS44.Connect := connect45;
connect46 := TconnectNode.Create;
connect46.NodeField := 'position';
connect46.ProtoField := 'position';
{ .AddConnect }
IS44.Connect := connect46;
connect47 := TconnectNode.Create;
connect47.NodeField := 'orientation';
connect47.ProtoField := 'orientation';
{ .AddConnect }
IS44.Connect := connect47;
connect48 := TconnectNode.Create;
connect48.NodeField := 'fieldOfView';
connect48.ProtoField := 'fieldOfView';
{ .AddConnect }
IS44.Connect := connect48;
connect49 := TconnectNode.Create;
connect49.NodeField := 'set_bind';
connect49.ProtoField := 'set_bind';
{ .AddConnect }
IS44.Connect := connect49;
connect50 := TconnectNode.Create;
connect50.NodeField := 'bindTime';
connect50.ProtoField := 'bindTime';
{ .AddConnect }
IS44.Connect := connect50;
connect51 := TconnectNode.Create;
connect51.NodeField := 'isBound';
connect51.ProtoField := 'isBound';
{ .AddConnect }
IS44.Connect := connect51;
{ .SetIS }
Viewpoint43.IS := IS44;
{ .AddChildren }
ProtoBody42.AddChildren([Viewpoint43]);
{ NavInfo EXAMINE used since some browsers (InstantReality) try to lock view to vertical when flying to avoid disorientation }
NavigationInfo52 := TNavigationInfoNode.Create;
NavigationInfo52.SetType(['EXAMINE','FLY','ANY']);
IS53 := TISNode.Create;
connect54 := TconnectNode.Create;
connect54.NodeField := 'set_bind';
connect54.ProtoField := 'set_bind';
{ .AddConnect }
IS53.Connect := connect54;
connect55 := TconnectNode.Create;
connect55.NodeField := 'headlight';
connect55.ProtoField := 'headlight';
{ .AddConnect }
IS53.Connect := connect55;
connect56 := TconnectNode.Create;
connect56.NodeField := 'visibilityLimit';
connect56.ProtoField := 'farClipPlane';
{ .AddConnect }
IS53.Connect := connect56;
{ No need to bind outputs bindTime, isBound from NavigationInfo since Viewpoint outputs will suffice. TODO inform BitManagement that bindTime field is missing. }
{ .SetIS }
NavigationInfo52.IS := IS53;
{ .AddChildren }
ProtoBody42.AddChildren([NavigationInfo52]);
{ this DirectionalLight replaces NavigationInfo headlight in order to add color capability }
DirectionalLight57 := TDirectionalLightNode.Create;
DirectionalLight57.Global := True;
{ TODO confirm other default field values match NavigationInfo spec }
IS58 := TISNode.Create;
connect59 := TconnectNode.Create;
connect59.NodeField := 'on';
connect59.ProtoField := 'headlight';
{ .AddConnect }
IS58.Connect := connect59;
connect60 := TconnectNode.Create;
connect60.NodeField := 'color';
connect60.ProtoField := 'headlightColor';
{ .AddConnect }
IS58.Connect := connect60;
connect61 := TconnectNode.Create;
connect61.NodeField := 'intensity';
connect61.ProtoField := 'headlightIntensity';
{ .AddConnect }
IS58.Connect := connect61;
{ .SetIS }
DirectionalLight57.IS := IS58;
{ .AddChildren }
ProtoBody42.AddChildren([DirectionalLight57]);
PositionInterpolator62 := TPositionInterpolatorNode.Create;
PositionInterpolator62.SetKey([0,1]);
PositionInterpolator62.SetKeyValue([Vector3(0,0,0),Vector3(0,0,0)]);
IS63 := TISNode.Create;
connect64 := TconnectNode.Create;
connect64.NodeField := 'set_fraction';
connect64.ProtoField := 'set_fraction';
{ .AddConnect }
IS63.Connect := connect64;
{ .SetIS }
PositionInterpolator62.IS := IS63;
{ .AddChildren }
ProtoBody42.AddChildren([PositionInterpolator62]);
OrientationInterpolator65 := TOrientationInterpolatorNode.Create;
OrientationInterpolator65.SetKey([0,1]);
OrientationInterpolator65.SetKeyValue([Vector4(0,1,0,0),Vector4(0,1,0,0)]);
IS66 := TISNode.Create;
connect67 := TconnectNode.Create;
connect67.NodeField := 'set_fraction';
connect67.ProtoField := 'set_fraction';
{ .AddConnect }
IS66.Connect := connect67;
{ .SetIS }
OrientationInterpolator65.IS := IS66;
{ .AddChildren }
ProtoBody42.AddChildren([OrientationInterpolator65]);
ProtoBody42.AddRoute(PositionInterpolator62.EventValue_changed, Viewpoint43.FdPosition);
{ .AddX3DRoute }
ProtoBody42.AddRoute(OrientationInterpolator65.EventValue_changed, Viewpoint43.FdOrientation);
{ .AddX3DRoute }
Script70 := TScriptNode.Create;
Script70.DirectOutput := True;
Script70.MustEvaluate := True;
{ binding is controlled externally, all camera operations proceed the same regardless of whether bound or not }
field71 := TfieldNode.Create;
field71.NameField := 'description';
field71.AccessType := 'inputOutput';
field71.Appinfo := 'Text description to be displayed for this Camera';
field71.Type := 'SFString';
{ .AddField }
Script70.Field := field71;
field72 := TfieldNode.Create;
field72.NameField := 'position';
field72.AccessType := 'inputOutput';
field72.Appinfo := 'Camera position in local transformation frame';
field72.Type := 'SFVec3f';
{ .AddField }
Script70.Field := field72;
field73 := TfieldNode.Create;
field73.NameField := 'orientation';
field73.AccessType := 'inputOutput';
field73.Appinfo := 'Camera rotation in local transformation frame';
field73.Type := 'SFRotation';
{ .AddField }
Script70.Field := field73;
field74 := TfieldNode.Create;
field74.NameField := 'set_fraction';
field74.AccessType := 'inputOnly';
field74.Appinfo := 'input fraction drives interpolators';
field74.Type := 'SFFloat';
{ .AddField }
Script70.Field := field74;
field75 := TfieldNode.Create;
field75.NameField := 'set_bind';
field75.AccessType := 'inputOnly';
field75.Appinfo := 'input event binds or unbinds this Camera';
field75.Type := 'SFBool';
{ .AddField }
Script70.Field := field75;
field76 := TfieldNode.Create;
field76.NameField := 'fieldOfView';
field76.AccessType := 'inputOutput';
field76.Appinfo := 'pi/4';
field76.Type := 'SFFloat';
{ .AddField }
Script70.Field := field76;
field77 := TfieldNode.Create;
field77.NameField := 'nearClipPlane';
field77.AccessType := 'inputOutput';
field77.Appinfo := 'Vector distance to near clipping plane';
field77.Type := 'SFFloat';
{ .AddField }
Script70.Field := field77;
field78 := TfieldNode.Create;
field78.NameField := 'farClipPlane';
field78.AccessType := 'inputOutput';
field78.Appinfo := 'Vector distance to far clipping plane';
field78.Type := 'SFFloat';
{ .AddField }
Script70.Field := field78;
field79 := TfieldNode.Create;
field79.NameField := 'shots';
field79.AccessType := 'inputOutput';
field79.Appinfo := 'Array of CameraShot nodes which in turn contain CameraMovement nodes';
field79.Type := 'MFNode';
{ initialization nodes (if any) go here }
{ .AddField }
Script70.Field := field79;
field80 := TfieldNode.Create;
field80.NameField := 'filterColor';
field80.AccessType := 'inputOutput';
field80.Appinfo := 'Camera filter color that modifies virtual lens capture';
field80.Type := 'SFColor';
{ .AddField }
Script70.Field := field80;
field81 := TfieldNode.Create;
field81.NameField := 'filterTransparency';
field81.AccessType := 'inputOutput';
field81.Appinfo := 'Camera filter transparency that modifies virtual lens capture';
field81.Type := 'SFFloat';
{ .AddField }
Script70.Field := field81;
field82 := TfieldNode.Create;
field82.NameField := 'upVector';
field82.AccessType := 'inputOutput';
field82.Appinfo := 'upVector changes modify camera orientation (and possibly vice versa)';
field82.Type := 'SFVec3f';
{ .AddField }
Script70.Field := field82;
field83 := TfieldNode.Create;
field83.NameField := 'fStop';
field83.AccessType := 'inputOutput';
field83.Appinfo := 'Focal length divided effective aperture diameter indicating width of focal plane';
field83.Type := 'SFFloat';
{ .AddField }
Script70.Field := field83;
field84 := TfieldNode.Create;
field84.NameField := 'focusDistance';
field84.AccessType := 'inputOutput';
field84.Appinfo := 'Distance to focal plane of sharpest focus';
field84.Type := 'SFFloat';
{ .AddField }
Script70.Field := field84;
field85 := TfieldNode.Create;
field85.NameField := 'isActive';
field85.AccessType := 'outputOnly';
field85.Appinfo := 'Mark start/stop with true/false output respectively useful to trigger external animations';
field85.Type := 'SFBool';
{ .AddField }
Script70.Field := field85;
field86 := TfieldNode.Create;
field86.NameField := 'totalDuration';
field86.AccessType := 'outputOnly';
field86.Appinfo := 'Total duration of contained enabled CameraShot (and thus CameraMovement) move durations';
field86.Type := 'SFTime';
{ .AddField }
Script70.Field := field86;
field87 := TfieldNode.Create;
field87.NameField := 'offlineRender';
field87.AccessType := 'inputOutput';
field87.Appinfo := 'OfflineRender node';
field87.Type := 'SFNode';
{ initialization node (if any) goes here }
{ .AddField }
Script70.Field := field87;
field88 := TfieldNode.Create;
field88.NameField := 'ViewpointNode';
field88.AccessType := 'initializeOnly';
field88.Appinfo := 'node reference to permit getting setting fields from within Script';
field88.Type := 'SFNode';
Viewpoint89 := TViewpointNode.Create;
Viewpoint89 := Viewpoint43;
{ .AddChildren }
field88.AddChildren([Viewpoint89]);
{ .AddField }
Script70.Field := field88;
field90 := TfieldNode.Create;
field90.NameField := 'NavInfoNode';
field90.AccessType := 'initializeOnly';
field90.Appinfo := 'node reference to permit getting setting fields from within Script';
field90.Type := 'SFNode';
NavigationInfo91 := TNavigationInfoNode.Create;
NavigationInfo91 := NavigationInfo52;
{ .AddChildren }
field90.AddChildren([NavigationInfo91]);
{ .AddField }
Script70.Field := field90;
field92 := TfieldNode.Create;
field92.NameField := 'CameraPI';
field92.AccessType := 'initializeOnly';
field92.Appinfo := 'node reference to permit getting setting fields from within Script';
field92.Type := 'SFNode';
PositionInterpolator93 := TPositionInterpolatorNode.Create;
PositionInterpolator93 := PositionInterpolator62;
{ .AddChildren }
field92.AddChildren([PositionInterpolator93]);
{ .AddField }
Script70.Field := field92;
field94 := TfieldNode.Create;
field94.NameField := 'CameraOI';
field94.AccessType := 'initializeOnly';
field94.Appinfo := 'node reference to permit getting setting fields from within Script';
field94.Type := 'SFNode';
OrientationInterpolator95 := TOrientationInterpolatorNode.Create;
OrientationInterpolator95 := OrientationInterpolator65;
{ .AddChildren }
field94.AddChildren([OrientationInterpolator95]);
{ .AddField }
Script70.Field := field94;
field96 := TfieldNode.Create;
field96.NameField := 'key';
field96.AccessType := 'inputOutput';
field96.Appinfo := 'key array for interpolators';
field96.Type := 'MFFloat';
{ .AddField }
Script70.Field := field96;
field97 := TfieldNode.Create;
field97.NameField := 'keyValuePosition';
field97.AccessType := 'inputOutput';
field97.Appinfo := 'keyValue array for PositionInterpolator';
field97.Type := 'MFVec3f';
{ .AddField }
Script70.Field := field97;
field98 := TfieldNode.Create;
field98.NameField := 'keyValueOrientation';
field98.AccessType := 'inputOutput';
field98.Appinfo := 'keyValue array for OrientationInterpolator';
field98.Type := 'MFRotation';
{ .AddField }
Script70.Field := field98;
field99 := TfieldNode.Create;
field99.NameField := 'animated';
field99.AccessType := 'inputOutput';
field99.Appinfo := 'whether internal CameraShot and CameraMove nodes are tracking or changed via ROUTE events';
field99.Type := 'SFBool';
field99.Value := 'false';
{ .AddField }
Script70.Field := field99;
field100 := TfieldNode.Create;
field100.NameField := 'initialized';
field100.AccessType := 'initializeOnly';
field100.Appinfo := 'perform checkShots() function once immediately after initialization';
field100.Type := 'SFBool';
field100.Value := 'false';
{ .AddField }
Script70.Field := field100;
field101 := TfieldNode.Create;
field101.NameField := 'shotCount';
field101.AccessType := 'initializeOnly';
field101.Appinfo := 'how many CameraShot nodes are contained in shots array';
field101.Type := 'SFInt32';
field101.Value := '0';
{ .AddField }
Script70.Field := field101;
field102 := TfieldNode.Create;
field102.NameField := 'movesCount';
field102.AccessType := 'initializeOnly';
field102.Appinfo := 'how many CameraMove nodes are contained in moves array';
field102.Type := 'SFInt32';
field102.Value := '0';
{ .AddField }
Script70.Field := field102;
field103 := TfieldNode.Create;
field103.NameField := 'frameCount';
field103.AccessType := 'initializeOnly';
field103.Appinfo := 'how many frames were created in current loop';
field103.Type := 'SFFloat';
field103.Value := '0';
{ .AddField }
Script70.Field := field103;
field104 := TfieldNode.Create;
field104.NameField := 'startTime';
field104.AccessType := 'initializeOnly';
field104.Appinfo := 'holding variable';
field104.Type := 'SFTime';
field104.Value := '0';
{ .AddField }
Script70.Field := field104;
field105 := TfieldNode.Create;
field105.NameField := 'priorTraceTime';
field105.AccessType := 'initializeOnly';
field105.Appinfo := 'holding variable';
field105.Type := 'SFTime';
field105.Value := '0';
{ .AddField }
Script70.Field := field105;
field106 := TfieldNode.Create;
field106.NameField := 'traceEnabled';
field106.AccessType := 'initializeOnly';
field106.Appinfo := 'enable console output to trace script computations and prototype progress';
field106.Type := 'SFBool';
{ .AddField }
Script70.Field := field106;
IS107 := TISNode.Create;
connect108 := TconnectNode.Create;
connect108.NodeField := 'description';
connect108.ProtoField := 'description';
{ .AddConnect }
IS107.Connect := connect108;
connect109 := TconnectNode.Create;
connect109.NodeField := 'position';
connect109.ProtoField := 'position';
{ .AddConnect }
IS107.Connect := connect109;
connect110 := TconnectNode.Create;
connect110.NodeField := 'orientation';
connect110.ProtoField := 'orientation';
{ .AddConnect }
IS107.Connect := connect110;
connect111 := TconnectNode.Create;
connect111.NodeField := 'set_fraction';
connect111.ProtoField := 'set_fraction';
{ .AddConnect }
IS107.Connect := connect111;
connect112 := TconnectNode.Create;
connect112.NodeField := 'set_bind';
connect112.ProtoField := 'set_bind';
{ .AddConnect }
IS107.Connect := connect112;
connect113 := TconnectNode.Create;
connect113.NodeField := 'fieldOfView';
connect113.ProtoField := 'fieldOfView';
{ .AddConnect }
IS107.Connect := connect113;
connect114 := TconnectNode.Create;
connect114.NodeField := 'nearClipPlane';
connect114.ProtoField := 'nearClipPlane';
{ .AddConnect }
IS107.Connect := connect114;
connect115 := TconnectNode.Create;
connect115.NodeField := 'farClipPlane';
connect115.ProtoField := 'farClipPlane';
{ .AddConnect }
IS107.Connect := connect115;
connect116 := TconnectNode.Create;
connect116.NodeField := 'shots';
connect116.ProtoField := 'shots';
{ .AddConnect }
IS107.Connect := connect116;
connect117 := TconnectNode.Create;
connect117.NodeField := 'filterColor';
connect117.ProtoField := 'filterColor';
{ .AddConnect }
IS107.Connect := connect117;
connect118 := TconnectNode.Create;
connect118.NodeField := 'filterTransparency';
connect118.ProtoField := 'filterTransparency';
{ .AddConnect }
IS107.Connect := connect118;
connect119 := TconnectNode.Create;
connect119.NodeField := 'upVector';
connect119.ProtoField := 'upVector';
{ .AddConnect }
IS107.Connect := connect119;
connect120 := TconnectNode.Create;
connect120.NodeField := 'fStop';
connect120.ProtoField := 'fStop';
{ .AddConnect }
IS107.Connect := connect120;
connect121 := TconnectNode.Create;
connect121.NodeField := 'focusDistance';
connect121.ProtoField := 'focusDistance';
{ .AddConnect }
IS107.Connect := connect121;
connect122 := TconnectNode.Create;
connect122.NodeField := 'isActive';
connect122.ProtoField := 'isActive';
{ .AddConnect }
IS107.Connect := connect122;
connect123 := TconnectNode.Create;
connect123.NodeField := 'totalDuration';
connect123.ProtoField := 'totalDuration';
{ .AddConnect }
IS107.Connect := connect123;
connect124 := TconnectNode.Create;
connect124.NodeField := 'offlineRender';
connect124.ProtoField := 'offlineRender';
{ .AddConnect }
IS107.Connect := connect124;
connect125 := TconnectNode.Create;
connect125.NodeField := 'traceEnabled';
connect125.ProtoField := 'traceEnabled';
{ .AddConnect }
IS107.Connect := connect125;
{ .SetIS }
Script70.IS := IS107;

Script70.SetSourceCode('''ecmascript:\n"+
"function initialize () // CameraScript\n"+
"{\n"+
"//  tracePrint ('initialize start...');\n"+
"\n"+
"    NavInfoNode.avatarSize[0]   = nearClipPlane;\n"+
"\n"+
"    // remaining setups deferred to invocation of checkShots() method\n"+
"    // thanks to Yvonne Jung Fraunhofer for diagnosing better approach to function initialization\n"+
"    alwaysPrint ('initialize complete');\n"+
"}\n"+
"\n"+
"function checkShots (eventValue)\n"+
"{\n"+
"    tracePrint ('checkShots() method should only occur after initialize() methods in all other Scripts are complete');\n"+
"\n"+
"    // compute totalDuration by summing durations from contained CameraShot and CameraMovement nodes\n"+
"    totalDuration= 0;\n"+
"    shotCount  = shots.length;\n"+
"    movesCount = 0;\n"+
"    for (i = 0; i < shotCount; i++) // shots index\n"+
"    {\n"+
"       tracePrint ('shots[' + i + '].moves.length=' + shots[i].moves.length);\n"+
"       movesCount   += shots[i].moves.length;\n"+
"       totalDuration = totalDuration + shots[i].shotDuration;\n"+
"       if (shots[i].moves.length == 0)\n"+
"       {\n"+
"          alwaysPrint ('warning: CameraShot[' + i + '][' + shots[i].description + '] has no contained CameraMove nodes');\n"+
"       }\n"+
"    }\n"+
"    // size checks before proceeding\n"+
"    if (shotCount == 0)\n"+
"    {\n"+
"       alwaysPrint ('warning: no CameraShot nodes found for the shots, nothing to do!');\n"+
"       return;\n"+
"    }\n"+
"    else if (movesCount == 0)\n"+
"    {\n"+
"       alwaysPrint ('warning: no CameraMove nodes found for the shots, nothing to do!');\n"+
"       return;\n"+
"    }\n"+
"    else if (totalDuration == 0)\n"+
"    {\n"+
"       alwaysPrint ('warning: totalDuration = 0 seconds, nothing to do!');\n"+
"       return;\n"+
"    }\n"+
"    tracePrint ('number of contained CameraShot nodes=' + shotCount);\n"+
"    tracePrint ('number of contained CameraMove nodes=' + movesCount);\n"+
"    tracePrint ('totalDuration=' + totalDuration + ' seconds for all shots and moves');\n"+
"\n"+
"    // compute interpolators\n"+
"    var k = 0; // index for latest key, keyValuePosition, keyValueOrientation\n"+
"    for (i = 0; i < shotCount; i++) // shots index\n"+
"    {\n"+
"        if (i==0) // initial entries\n"+
"        {\n"+
"           key[0]                   = 0.0; // no previous move\n"+
"           keyValuePosition[0]      = shots[i].initialPosition;\n"+
"           keyValueOrientation[0]   = shots[i].initialOrientation;\n"+
"        }\n"+
"        else     // new shot repositions, reorients camera as clean break from preceding shot/move\n"+
"        {\n"+
"           key[k+1]                 = key[k]; // start from end from previous move\n"+
"           keyValuePosition[k+1]    = shots[i].initialPosition;\n"+
"           keyValueOrientation[k+1] = shots[i].initialOrientation;\n"+
"           k++;\n"+
"        }\n"+
"        tracePrint (shots[i].description);\n"+
"        tracePrint ('shots[i].moves.length=' + shots[i].moves.length);\n"+
"\n"+
"        for (j = 0; j < shots[i].moves.length; j++) // moves index\n"+
"        {\n"+
"            var durationFloat =              shots[i].moves[j].duration;  // implicit type conversion from SFTime\n"+
"            //  durationFloat = new SFFloat (shots[i].moves[j].duration); // explicit type conversion from SFTime\n"+
"            //  tracePrint ('durationFloat=' + durationFloat);\n"+
"            key[k+1]               = key[k] + (durationFloat / totalDuration);\n"+
"            keyValuePosition[k+1]  = shots[i].moves[j].goalPosition;\n"+
"            if (!animated)\n"+
"            {\n"+
"                 keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;\n"+
"            }\n"+
"            else\n"+
"            {\n"+
"                // using constructor SFRotation (SFVec3f fromVector, SFVec3f toVector)\n"+
"                // see X3D ECMAScript binding Table 7.18 — SFRotation instance creation functions\n"+
"\n"+
"                // test if difference vector is zero, if so maintain previous rotation\n"+
"                var shotVector = ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize();\n"+
"                if (shotVector.length() >= 0)\n"+
"                {\n"+
"                    // default view direction is along -Z axis\n"+
"                    shots[i].moves[j].goalOrientation = new SFRotation (new SFVec3f (0, 0, 1), shotVector);\n"+
"                    keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;\n"+
"                }\n"+
"                else // note (k > 0)\n"+
"                {\n"+
"                    keyValueOrientation[k+1] = keyValueOrientation[k];  // no change\n"+
"                }\n"+
"\n"+
"                tracePrint ('shots[' + i + '].moves[' + j + '].goalAimPoint=' + shots[i].moves[j].goalAimPoint.toString());\n"+
"                tracePrint ('        ViewpointNode.position=' + ViewpointNode.position.toString());\n"+
"                tracePrint ('          shotVector     delta=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).toString());\n"+
"                tracePrint ('          shotVector normalize=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize().toString());\n"+
"                tracePrint ('               goalOrientation=' + shots[i].moves[j].goalOrientation.toString());\n"+
"                tracePrint ('      keyValueOrientation[k+1]=' + keyValueOrientation[k+1].toString() + '\\n');\n"+
"            }\n"+
"            k++; // update index to match latest key, keyValuePosition, keyValueOrientation\n"+
"\n"+
"            // check animated parameter:  set true if any of moves are tracking moves\n"+
"            if (!animated)  animated = shots[i].moves[j].tracking; // once true, remains true\n"+
"         // tracePrint ('shots[' + i + '].moves[' + j + '].tracking=' + shots[i].moves[j].tracking + ', animated=' + animated);\n"+
"\n"+
"            // intermediate trace\n"+
"            tracePrint ('                key=' + key);\n"+
"            tracePrint ('   keyValuePosition=' + keyValuePosition);\n"+
"            tracePrint ('keyValueOrientation=' + keyValueOrientation);\n"+
"            tracePrint ('- ' + shots[i].moves[j].description);\n"+
"        }\n"+
"    }\n"+
"    tracePrint ('                key=' + key);\n"+
"    tracePrint ('   keyValuePosition=' + keyValuePosition);\n"+
"    tracePrint ('keyValueOrientation=' + keyValueOrientation);\n"+
"    if (key.length != keyValuePosition.length)\n"+
"    {\n"+
"      alwaysPrint ('warning: internal error during array construction, ' +\n"+
"                  'key.length=' + key.length + ' must equal ' +\n"+
"                  'keyValuePosition.length=' + keyValuePosition.length);\n"+
"    }\n"+
"    if (key.length != keyValueOrientation.length)\n"+
"    {\n"+
"      alwaysPrint ('warning: internal error during array construction, ' +\n"+
"                  'key.length=' + key.length + ' must equal ' +\n"+
"                  'keyValueOrientation.length=' + keyValueOrientation.length);\n"+
"    }\n"+
"    if (key.length != (shotCount + movesCount))\n"+
"    {\n"+
"      alwaysPrint ('warning: internal error during array construction, ' +\n"+
"                  'key.length=' + key.length + ' must equal ' +\n"+
"                  '(shotCount + movesCount)=' + (shotCount + movesCount));\n"+
"    }\n"+
"    tracePrint ('           animated=' + animated);\n"+
"    // set node values\n"+
"    CameraPI.key      = key;\n"+
"    CameraOI.key      = key;\n"+
"    CameraPI.keyValue = keyValuePosition;\n"+
"    CameraOI.keyValue = keyValueOrientation;\n"+
"\n"+
"    if (!animated) // output results\n"+
"    {\n"+
"        tracePrint ('<PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');\n"+
"        tracePrint ('<OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');\n"+
"    }\n"+
"    tracePrint ('checkShots() complete');\n"+
"}\n"+
"\n"+
"function stripBrackets (fieldArray)\n"+
"{\n"+
"    // some browsers add brackets to array output strings, this function strips them\n"+
"    outputString = '';\n"+
"    for (i = 0; i < fieldArray.length; i++)\n"+
"    {\n"+
"       outputString += fieldArray[i].toString();\n"+
"       if (i < fieldArray.length - 1) outputString += ' ';\n"+
"    }\n"+
"    return outputString;\n"+
"}\n"+
"\n"+
"function set_fraction (eventValue, timestamp) // input event received for inputOnly field\n"+
"{\n"+
"   // traceEnabled = false;  // for testing purposes\n"+
"\n"+
"   // if Camera is being animated, immediately recompute interpolator settings\n"+
"   if (animated) checkShots (true);\n"+
"\n"+
"   // trace progress on console with reduced output frequency\n"+
"   if (frameCount == 0)\n"+
"   {\n"+
"      alwaysPrint ('Animation loop commencing, timestamp=' + timestamp);\n"+
"      startTime      = timestamp;\n"+
"      priorTraceTime = timestamp;\n"+
"      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\n"+
"\n"+
"      if (animated) // output results\n"+
"      {\n"+
"        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\n"+
"        tracePrint ('  <PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');\n"+
"        tracePrint ('  <OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');\n"+
"      }\n"+
"   }\n"+
"   else if ((timestamp - priorTraceTime) >= 1.0) // 1 second trace interval\n"+
"   {\n"+
"      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\n"+
"      priorTraceTime = timestamp;\n"+
"\n"+
"      if (animated) // output results\n"+
"      {\n"+
"        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\n"+
"        tracePrint ('  <PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');\n"+
"        alwaysPrint ('  <OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');\n"+
"      }\n"+
"   }\n"+
"   if (eventValue == 0)\n"+
"   {\n"+
"      // note that zero value is not necessarily sent first by TimeSensor, so otherwise ignored\n"+
"      frameCount++;\n"+
"   }\n"+
"   else if (eventValue == 1)\n"+
"   {\n"+
"      alwaysPrint ('shotClock=' + (timestamp - startTime) + ', frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\n"+
"      if (animated) // output results\n"+
"      {\n"+
"        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\n"+
"      }\n"+
"      alwaysPrint ('Animation loop complete.');\n"+
"      // do not unbind the Viewpoint and NavigationInfo nodes, let that be controlled externally\n"+
"   }\n"+
"   else\n"+
"   {\n"+
"      frameCount++;\n"+
"   }\n"+
"}\n"+
"\n"+
"function set_bind (eventValue) // input event received for inputOnly field\n"+
"{\n"+
"   // need to ensure CameraShot nodes are properly initialized\n"+
"   if (initialized == false)\n"+
"   {\n"+
"      checkShots (true);\n"+
"      initialized = true;\n"+
"   }\n"+
"   if (eventValue)\n"+
"   {\n"+
"       tracePrint ('Camera has been bound');\n"+
"   }\n"+
"   else\n"+
"   {\n"+
"       tracePrint ('Camera has been unbound');\n"+
"   }\n"+
"}\n"+
"\n"+
"function set_description (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    description = eventValue;\n"+
"}\n"+
"\n"+
"function set_position (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    position = eventValue;\n"+
"}\n"+
"\n"+
"function set_orientation (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    orientation = eventValue;\n"+
"}\n"+
"\n"+
"function set_fieldOfView (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    fieldOfView = eventValue;\n"+
"}\n"+
"\n"+
"function set_nearClipPlane (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    nearClipPlane = eventValue;\n"+
"}\n"+
"\n"+
"function set_farClipPlane (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    farClipPlane = eventValue;\n"+
"}\n"+
"\n"+
"function set_shots (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    shots = eventValue;\n"+
"}\n"+
"\n"+
"function set_filterColor (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    filterColor = eventValue;\n"+
"}\n"+
"\n"+
"function set_filterTransparency (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    filterTransparency = eventValue;\n"+
"}\n"+
"\n"+
"function set_upVector (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    upVector = eventValue;\n"+
"}\n"+
"\n"+
"function set_fStop (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    fStop = eventValue;\n"+
"}\n"+
"\n"+
"function set_focusDistance (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    focusDistance = eventValue;\n"+
"}\n"+
"\n"+
"function set_offlineRender (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    offlineRender = eventValue;\n"+
"}\n"+
"\n"+
"function set_key (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    key = eventValue;\n"+
"}\n"+
"\n"+
"function set_keyValuePosition (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    keyValuePosition = eventValue;\n"+
"}\n"+
"\n"+
"function set_keyValueOrientation (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    keyValueOrientation = eventValue;\n"+
"}\n"+
"\n"+
"function set_animated (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    animated = eventValue;\n"+
"}\n"+
"\n"+
"function tracePrint (outputValue)\n"+
"{\n"+
"	if (traceEnabled) alwaysPrint (outputValue);\n"+
"}\n"+
"function alwaysPrint (outputValue)\n"+
"{\n"+
"    // try to ensure outputValue is converted to string despite Browser.println idiosyncracies\n"+
"    var outputString = outputValue.toString(); // utility function according to spec\n"+
"    if (outputString == null) outputString = outputValue; // direct cast\n"+
"\n"+
"    if  (description.length > 0)\n"+
"         Browser.print ('[Camera: ' + description + '] ' + outputString + '\\n');\n"+
"    else\n"+
"         Browser.print ('[Camera] ' + outputString + '\\n');\n"+
"}''');
{ .AddChildren }
ProtoBody42.AddChildren([Script70]);
ProtoBody42.AddRoute(Script70.FdPosition, Viewpoint43.FdPosition);
{ .AddX3DRoute }
ProtoBody42.AddRoute(Script70.FdOrientation, Viewpoint43.FdOrientation);
{ .AddX3DRoute }
ProtoBody42.AddRoute(Script70.FdIsactive, Viewpoint43.EventSet_bind);
{ .AddX3DRoute }
ProtoBody42.AddRoute(Script70.FdIsactive, NavigationInfo52.EventSet_bind);
{ .AddX3DRoute }
ProtoBody42.AddRoute(Script70.FdIsactive, DirectionalLight57.FdOn);
{ .AddX3DRoute }
{ .SetProtoBody }
ProtoDeclare17.ProtoBody := ProtoBody42;
{ .AddChildren }
Group16.AddChildren([ProtoDeclare17]);
{ =============== CameraShot ============== }
ProtoDeclare131 := TProtoDeclareNode.Create;
ProtoDeclare131.NameField := 'CameraShot';
ProtoDeclare131.Appinfo := 'CameraShot collects a specific set of CameraMovement animations that make up an individual shot.';
ProtoInterface132 := TProtoInterfaceNode.Create;
field133 := TfieldNode.Create;
field133.NameField := 'description';
field133.AccessType := 'inputOutput';
field133.Appinfo := 'Text description to be displayed for this CameraShot';
field133.Type := 'SFString';
{ .AddField }
ProtoInterface132.Field := field133;
field134 := TfieldNode.Create;
field134.NameField := 'enabled';
field134.AccessType := 'inputOutput';
field134.Appinfo := 'Whether this CameraShot can be activated';
field134.Type := 'SFBool';
field134.Value := 'true';
{ .AddField }
ProtoInterface132.Field := field134;
field135 := TfieldNode.Create;
field135.NameField := 'moves';
field135.AccessType := 'inputOutput';
field135.Appinfo := 'Set of CameraMovement nodes';
field135.Type := 'MFNode';
{ initializing CameraMovement nodes are inserted here by scene author using ProtoInstance }
{ .AddField }
ProtoInterface132.Field := field135;
field136 := TfieldNode.Create;
field136.NameField := 'initialPosition';
field136.AccessType := 'inputOutput';
field136.Appinfo := 'Setup to reinitialize camera position for this shot';
field136.Type := 'SFVec3f';
field136.Value := '0 0 10';
{ .AddField }
ProtoInterface132.Field := field136;
field137 := TfieldNode.Create;
field137.NameField := 'initialOrientation';
field137.AccessType := 'inputOutput';
field137.Appinfo := 'Setup to reinitialize camera rotation for this shot';
field137.Type := 'SFRotation';
field137.Value := '0 0 1 0';
{ .AddField }
ProtoInterface132.Field := field137;
field138 := TfieldNode.Create;
field138.NameField := 'initialAimPoint';
field138.AccessType := 'inputOutput';
field138.Appinfo := 'Setup to reinitialize aimpoint (relative location for camera direction) for this shot';
field138.Type := 'SFVec3f';
field138.Value := '0 0 0';
{ .AddField }
ProtoInterface132.Field := field138;
field139 := TfieldNode.Create;
field139.NameField := 'initialFieldOfView';
field139.AccessType := 'inputOutput';
field139.Appinfo := 'pi/4';
field139.Type := 'SFFloat';
field139.Value := '0.7854';
{ .AddField }
ProtoInterface132.Field := field139;
field140 := TfieldNode.Create;
field140.NameField := 'initialFStop';
field140.AccessType := 'inputOutput';
field140.Appinfo := 'Focal length divided effective aperture diameter indicating width of focal plane';
field140.Type := 'SFFloat';
field140.Value := '5.6';
{ .AddField }
ProtoInterface132.Field := field140;
field141 := TfieldNode.Create;
field141.NameField := 'initialFocusDistance';
field141.AccessType := 'inputOutput';
field141.Appinfo := 'Distance to focal plane of sharpest focus';
field141.Type := 'SFFloat';
field141.Value := '10';
{ .AddField }
ProtoInterface132.Field := field141;
field142 := TfieldNode.Create;
field142.NameField := 'shotDuration';
field142.AccessType := 'outputOnly';
field142.Appinfo := 'Subtotal duration of contained CameraMovement move durations';
field142.Type := 'SFTime';
{ .AddField }
ProtoInterface132.Field := field142;
field143 := TfieldNode.Create;
field143.NameField := 'isActive';
field143.AccessType := 'outputOnly';
field143.Appinfo := 'Mark start/stop with true/false output respectively useful to trigger external animations';
field143.Type := 'SFBool';
{ .AddField }
ProtoInterface132.Field := field143;
field144 := TfieldNode.Create;
field144.NameField := 'traceEnabled';
field144.AccessType := 'initializeOnly';
field144.Appinfo := 'enable console output to trace script computations and prototype progress';
field144.Type := 'SFBool';
field144.Value := 'false';
{ .AddField }
ProtoInterface132.Field := field144;
{ .SetProtoInterface }
ProtoDeclare131.ProtoInterface := ProtoInterface132;
ProtoBody145 := TProtoBodyNode.Create;
Script146 := TScriptNode.Create;
Script146.DirectOutput := True;
Script146.MustEvaluate := True;
field147 := TfieldNode.Create;
field147.NameField := 'description';
field147.AccessType := 'inputOutput';
field147.Appinfo := 'Text description to be displayed for this CameraShot';
field147.Type := 'SFString';
{ .AddField }
Script146.Field := field147;
field148 := TfieldNode.Create;
field148.NameField := 'enabled';
field148.AccessType := 'inputOutput';
field148.Appinfo := 'Whether this CameraShot can be activated';
field148.Type := 'SFBool';
{ .AddField }
Script146.Field := field148;
field149 := TfieldNode.Create;
field149.NameField := 'moves';
field149.AccessType := 'inputOutput';
field149.Appinfo := 'Set of CameraMovement nodes';
field149.Type := 'MFNode';
{ initialization nodes (if any) go here }
{ .AddField }
Script146.Field := field149;
field150 := TfieldNode.Create;
field150.NameField := 'initialPosition';
field150.AccessType := 'inputOutput';
field150.Appinfo := 'Setup to reinitialize camera position for this shot';
field150.Type := 'SFVec3f';
{ .AddField }
Script146.Field := field150;
field151 := TfieldNode.Create;
field151.NameField := 'initialOrientation';
field151.AccessType := 'inputOutput';
field151.Appinfo := 'Setup to reinitialize camera rotation for this shot';
field151.Type := 'SFRotation';
{ .AddField }
Script146.Field := field151;
field152 := TfieldNode.Create;
field152.NameField := 'initialAimPoint';
field152.AccessType := 'inputOutput';
field152.Appinfo := 'Setup to reinitialize aimpoint (relative location for camera direction) for this shot';
field152.Type := 'SFVec3f';
{ .AddField }
Script146.Field := field152;
field153 := TfieldNode.Create;
field153.NameField := 'initialFieldOfView';
field153.AccessType := 'inputOutput';
field153.Appinfo := 'pi/4';
field153.Type := 'SFFloat';
{ .AddField }
Script146.Field := field153;
field154 := TfieldNode.Create;
field154.NameField := 'initialFStop';
field154.AccessType := 'inputOutput';
field154.Appinfo := 'Focal length divided effective aperture diameter indicating width of focal plane';
field154.Type := 'SFFloat';
{ .AddField }
Script146.Field := field154;
field155 := TfieldNode.Create;
field155.NameField := 'initialFocusDistance';
field155.AccessType := 'inputOutput';
field155.Appinfo := 'Distance to focal plane of sharpest focus';
field155.Type := 'SFFloat';
{ .AddField }
Script146.Field := field155;
field156 := TfieldNode.Create;
field156.NameField := 'shotDuration';
field156.AccessType := 'outputOnly';
field156.Appinfo := 'Subtotal duration of contained CameraMovement move durations';
field156.Type := 'SFTime';
{ .AddField }
Script146.Field := field156;
field157 := TfieldNode.Create;
field157.NameField := 'isActive';
field157.AccessType := 'outputOnly';
field157.Appinfo := 'Mark start/stop with true/false output respectively useful to trigger external animations';
field157.Type := 'SFBool';
{ .AddField }
Script146.Field := field157;
field158 := TfieldNode.Create;
field158.NameField := 'traceEnabled';
field158.AccessType := 'initializeOnly';
field158.Appinfo := 'enable console output to trace script computations and prototype progress';
field158.Type := 'SFBool';
{ .AddField }
Script146.Field := field158;
field159 := TfieldNode.Create;
field159.NameField := 'key';
field159.AccessType := 'inputOutput';
field159.Appinfo := 'key array for interpolators';
field159.Type := 'MFFloat';
{ .AddField }
Script146.Field := field159;
field160 := TfieldNode.Create;
field160.NameField := 'keyValuePosition';
field160.AccessType := 'inputOutput';
field160.Appinfo := 'keyValue array for PositionInterpolator';
field160.Type := 'MFVec3f';
{ .AddField }
Script146.Field := field160;
field161 := TfieldNode.Create;
field161.NameField := 'keyValueOrientation';
field161.AccessType := 'inputOutput';
field161.Appinfo := 'keyValue array for OrientationInterpolator';
field161.Type := 'MFRotation';
{ .AddField }
Script146.Field := field161;
IS162 := TISNode.Create;
connect163 := TconnectNode.Create;
connect163.NodeField := 'description';
connect163.ProtoField := 'description';
{ .AddConnect }
IS162.Connect := connect163;
connect164 := TconnectNode.Create;
connect164.NodeField := 'enabled';
connect164.ProtoField := 'enabled';
{ .AddConnect }
IS162.Connect := connect164;
connect165 := TconnectNode.Create;
connect165.NodeField := 'moves';
connect165.ProtoField := 'moves';
{ .AddConnect }
IS162.Connect := connect165;
connect166 := TconnectNode.Create;
connect166.NodeField := 'initialPosition';
connect166.ProtoField := 'initialPosition';
{ .AddConnect }
IS162.Connect := connect166;
connect167 := TconnectNode.Create;
connect167.NodeField := 'initialOrientation';
connect167.ProtoField := 'initialOrientation';
{ .AddConnect }
IS162.Connect := connect167;
connect168 := TconnectNode.Create;
connect168.NodeField := 'initialAimPoint';
connect168.ProtoField := 'initialAimPoint';
{ .AddConnect }
IS162.Connect := connect168;
connect169 := TconnectNode.Create;
connect169.NodeField := 'initialFieldOfView';
connect169.ProtoField := 'initialFieldOfView';
{ .AddConnect }
IS162.Connect := connect169;
connect170 := TconnectNode.Create;
connect170.NodeField := 'initialFStop';
connect170.ProtoField := 'initialFStop';
{ .AddConnect }
IS162.Connect := connect170;
connect171 := TconnectNode.Create;
connect171.NodeField := 'initialFocusDistance';
connect171.ProtoField := 'initialFocusDistance';
{ .AddConnect }
IS162.Connect := connect171;
connect172 := TconnectNode.Create;
connect172.NodeField := 'shotDuration';
connect172.ProtoField := 'shotDuration';
{ .AddConnect }
IS162.Connect := connect172;
connect173 := TconnectNode.Create;
connect173.NodeField := 'isActive';
connect173.ProtoField := 'isActive';
{ .AddConnect }
IS162.Connect := connect173;
connect174 := TconnectNode.Create;
connect174.NodeField := 'traceEnabled';
connect174.ProtoField := 'traceEnabled';
{ .AddConnect }
IS162.Connect := connect174;
{ .SetIS }
Script146.IS := IS162;

Script146.SetSourceCode('''ecmascript:\n"+
"function initialize () // CameraShotScript\n"+
"{\n"+
"//  tracePrint ('initialize start...');\n"+
"\n"+
"    // compute shotDuration by summing durations from contained CameraMovement nodes\n"+
"    shotDuration = 0;\n"+
"    for (i = 0; i < moves.length; i++)\n"+
"    {\n"+
"        shotDuration = shotDuration + moves[i].duration;\n"+
"    }\n"+
"    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');\n"+
"\n"+
"//  tracePrint ('... initialize() complete');\n"+
"}\n"+
"\n"+
"function set_description (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    description = eventValue;\n"+
"}\n"+
"\n"+
"function set_enabled (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    enabled = eventValue;\n"+
"}\n"+
"\n"+
"function set_moves (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    moves = eventValue;\n"+
"}\n"+
"\n"+
"function set_initialPosition (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    initialPosition = eventValue;\n"+
"}\n"+
"\n"+
"function set_initialOrientation (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    initialOrientation = eventValue;\n"+
"}\n"+
"\n"+
"function set_initialAimPoint (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    initialAimPoint = eventValue;\n"+
"}\n"+
"\n"+
"function set_initialFieldOfView (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    initialFieldOfView = eventValue;\n"+
"}\n"+
"\n"+
"function set_initialFStop (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    initialFStop = eventValue;\n"+
"}\n"+
"\n"+
"function set_initialFocusDistance (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    initialFocusDistance = eventValue;\n"+
"}\n"+
"\n"+
"function set_key (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    key = eventValue;\n"+
"}\n"+
"\n"+
"function set_keyValuePosition (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    keyValuePosition = eventValue;\n"+
"}\n"+
"\n"+
"function set_keyValueOrientation (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    keyValueOrientation = eventValue;\n"+
"}\n"+
"\n"+
"// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive\n"+
"\n"+
"function tracePrint (outputValue)\n"+
"{\n"+
"	if (traceEnabled) alwaysPrint (outputValue);\n"+
"}\n"+
"function alwaysPrint (outputValue)\n"+
"{\n"+
"	// try to ensure outputValue is converted to string despite browser idiosyncracies\n"+
"    var outputString = outputValue.toString(); // utility function according to spec\n"+
"    if (outputString == null) outputString = outputValue; // direct cast\n"+
"\n"+
"    if  (description.length > 0)\n"+
"         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\\n');\n"+
"    else\n"+
"         Browser.print ('[CameraShot] ' + outputString + '\\n');\n"+
"}''');
{ .AddChildren }
ProtoBody145.AddChildren([Script146]);
{ Add any ROUTEs here, going from Script to other nodes within ProtoBody }
{ .SetProtoBody }
ProtoDeclare131.ProtoBody := ProtoBody145;
{ .AddChildren }
Group16.AddChildren([ProtoDeclare131]);
{ =============== CameraMovement ============== }
ProtoDeclare175 := TProtoDeclareNode.Create;
ProtoDeclare175.NameField := 'CameraMovement';
ProtoDeclare175.Appinfo := 'CameraMovement node defines a single camera movement animation including goalPosition, goalOrientation, goalAimPoint and goalFieldOfView.';
ProtoInterface176 := TProtoInterfaceNode.Create;
field177 := TfieldNode.Create;
field177.NameField := 'description';
field177.AccessType := 'inputOutput';
field177.Appinfo := 'Text description to be displayed for this CameraMovement';
field177.Type := 'SFString';
{ .AddField }
ProtoInterface176.Field := field177;
field178 := TfieldNode.Create;
field178.NameField := 'enabled';
field178.AccessType := 'inputOutput';
field178.Appinfo := 'Whether this CameraMovement can be activated';
field178.Type := 'SFBool';
field178.Value := 'true';
{ .AddField }
ProtoInterface176.Field := field178;
field179 := TfieldNode.Create;
field179.NameField := 'duration';
field179.AccessType := 'inputOutput';
field179.Appinfo := 'Duration in seconds for this move';
field179.Type := 'SFFloat';
field179.Value := '0';
{ .AddField }
ProtoInterface176.Field := field179;
field180 := TfieldNode.Create;
field180.NameField := 'goalPosition';
field180.AccessType := 'inputOutput';
field180.Appinfo := 'Goal camera position for this move';
field180.Type := 'SFVec3f';
field180.Value := '0 0 10';
{ .AddField }
ProtoInterface176.Field := field180;
field181 := TfieldNode.Create;
field181.NameField := 'goalOrientation';
field181.AccessType := 'inputOutput';
field181.Appinfo := 'Goal camera rotation for this move';
field181.Type := 'SFRotation';
field181.Value := '0 0 1 0';
{ .AddField }
ProtoInterface176.Field := field181;
field182 := TfieldNode.Create;
field182.NameField := 'tracking';
field182.AccessType := 'inputOutput';
field182.Appinfo := 'Whether or not camera direction is tracking towards the aimPoint';
field182.Type := 'SFBool';
field182.Value := 'false';
{ .AddField }
ProtoInterface176.Field := field182;
field183 := TfieldNode.Create;
field183.NameField := 'goalAimPoint';
field183.AccessType := 'inputOutput';
field183.Appinfo := 'Goal aimPoint for this move, ignored if tracking=false';
field183.Type := 'SFVec3f';
field183.Value := '0 0 0';
{ .AddField }
ProtoInterface176.Field := field183;
field184 := TfieldNode.Create;
field184.NameField := 'goalFieldOfView';
field184.AccessType := 'inputOutput';
field184.Appinfo := 'Goal fieldOfView for this move';
field184.Type := 'SFFloat';
field184.Value := '0.7854';
{ .AddField }
ProtoInterface176.Field := field184;
field185 := TfieldNode.Create;
field185.NameField := 'goalFStop';
field185.AccessType := 'inputOutput';
field185.Appinfo := 'Focal length divided effective aperture diameter indicating width of focal plane';
field185.Type := 'SFFloat';
field185.Value := '5.6';
{ .AddField }
ProtoInterface176.Field := field185;
field186 := TfieldNode.Create;
field186.NameField := 'goalFocusDistance';
field186.AccessType := 'inputOutput';
field186.Appinfo := 'Distance to focal plane of sharpest focus';
field186.Type := 'SFFloat';
field186.Value := '10';
{ .AddField }
ProtoInterface176.Field := field186;
field187 := TfieldNode.Create;
field187.NameField := 'isActive';
field187.AccessType := 'outputOnly';
field187.Appinfo := 'Mark start/stop with true/false output respectively useful to trigger external animations';
field187.Type := 'SFBool';
{ .AddField }
ProtoInterface176.Field := field187;
field188 := TfieldNode.Create;
field188.NameField := 'traceEnabled';
field188.AccessType := 'initializeOnly';
field188.Appinfo := 'enable console output to trace script computations and prototype progress';
field188.Type := 'SFBool';
field188.Value := 'false';
{ .AddField }
ProtoInterface176.Field := field188;
{ .SetProtoInterface }
ProtoDeclare175.ProtoInterface := ProtoInterface176;
ProtoBody189 := TProtoBodyNode.Create;
{ First node determines node type of this prototype }
{ Subsequent nodes do not render, but still must be a valid X3D subgraph }
{ Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events }
Script190 := TScriptNode.Create;
Script190.DirectOutput := True;
Script190.MustEvaluate := True;
field191 := TfieldNode.Create;
field191.NameField := 'description';
field191.AccessType := 'inputOutput';
field191.Appinfo := 'Text description to be displayed for this CameraMovement';
field191.Type := 'SFString';
{ .AddField }
Script190.Field := field191;
field192 := TfieldNode.Create;
field192.NameField := 'enabled';
field192.AccessType := 'inputOutput';
field192.Appinfo := 'Whether this CameraMovement can be activated';
field192.Type := 'SFBool';
{ .AddField }
Script190.Field := field192;
field193 := TfieldNode.Create;
field193.NameField := 'duration';
field193.AccessType := 'inputOutput';
field193.Appinfo := 'Duration in seconds for this move';
field193.Type := 'SFFloat';
{ .AddField }
Script190.Field := field193;
field194 := TfieldNode.Create;
field194.NameField := 'goalPosition';
field194.AccessType := 'inputOutput';
field194.Appinfo := 'Goal camera position for this move';
field194.Type := 'SFVec3f';
{ .AddField }
Script190.Field := field194;
field195 := TfieldNode.Create;
field195.NameField := 'goalOrientation';
field195.AccessType := 'inputOutput';
field195.Appinfo := 'Goal camera rotation for this move';
field195.Type := 'SFRotation';
{ .AddField }
Script190.Field := field195;
field196 := TfieldNode.Create;
field196.NameField := 'tracking';
field196.AccessType := 'inputOutput';
field196.Appinfo := 'Whether or not camera direction is tracking towards the aimPoint';
field196.Type := 'SFBool';
{ .AddField }
Script190.Field := field196;
field197 := TfieldNode.Create;
field197.NameField := 'goalAimPoint';
field197.AccessType := 'inputOutput';
field197.Appinfo := 'Goal aimPoint for this move, ignored if tracking=false';
field197.Type := 'SFVec3f';
{ .AddField }
Script190.Field := field197;
field198 := TfieldNode.Create;
field198.NameField := 'goalFieldOfView';
field198.AccessType := 'inputOutput';
field198.Appinfo := 'Goal fieldOfView for this move';
field198.Type := 'SFFloat';
{ .AddField }
Script190.Field := field198;
field199 := TfieldNode.Create;
field199.NameField := 'goalFStop';
field199.AccessType := 'inputOutput';
field199.Appinfo := 'Focal length divided effective aperture diameter indicating width of focal plane';
field199.Type := 'SFFloat';
{ .AddField }
Script190.Field := field199;
field200 := TfieldNode.Create;
field200.NameField := 'goalFocusDistance';
field200.AccessType := 'inputOutput';
field200.Appinfo := 'Distance to focal plane of sharpest focus';
field200.Type := 'SFFloat';
{ .AddField }
Script190.Field := field200;
field201 := TfieldNode.Create;
field201.NameField := 'isActive';
field201.AccessType := 'outputOnly';
field201.Appinfo := 'Mark start/stop with true/false output respectively useful to trigger external animations';
field201.Type := 'SFBool';
{ .AddField }
Script190.Field := field201;
field202 := TfieldNode.Create;
field202.NameField := 'traceEnabled';
field202.AccessType := 'initializeOnly';
field202.Appinfo := 'enable console output to trace script computations and prototype progress';
field202.Type := 'SFBool';
{ .AddField }
Script190.Field := field202;
IS203 := TISNode.Create;
connect204 := TconnectNode.Create;
connect204.NodeField := 'description';
connect204.ProtoField := 'description';
{ .AddConnect }
IS203.Connect := connect204;
connect205 := TconnectNode.Create;
connect205.NodeField := 'enabled';
connect205.ProtoField := 'enabled';
{ .AddConnect }
IS203.Connect := connect205;
connect206 := TconnectNode.Create;
connect206.NodeField := 'duration';
connect206.ProtoField := 'duration';
{ .AddConnect }
IS203.Connect := connect206;
connect207 := TconnectNode.Create;
connect207.NodeField := 'goalPosition';
connect207.ProtoField := 'goalPosition';
{ .AddConnect }
IS203.Connect := connect207;
connect208 := TconnectNode.Create;
connect208.NodeField := 'goalOrientation';
connect208.ProtoField := 'goalOrientation';
{ .AddConnect }
IS203.Connect := connect208;
connect209 := TconnectNode.Create;
connect209.NodeField := 'tracking';
connect209.ProtoField := 'tracking';
{ .AddConnect }
IS203.Connect := connect209;
connect210 := TconnectNode.Create;
connect210.NodeField := 'goalAimPoint';
connect210.ProtoField := 'goalAimPoint';
{ .AddConnect }
IS203.Connect := connect210;
connect211 := TconnectNode.Create;
connect211.NodeField := 'goalFieldOfView';
connect211.ProtoField := 'goalFieldOfView';
{ .AddConnect }
IS203.Connect := connect211;
connect212 := TconnectNode.Create;
connect212.NodeField := 'goalFStop';
connect212.ProtoField := 'goalFStop';
{ .AddConnect }
IS203.Connect := connect212;
connect213 := TconnectNode.Create;
connect213.NodeField := 'goalFocusDistance';
connect213.ProtoField := 'goalFocusDistance';
{ .AddConnect }
IS203.Connect := connect213;
connect214 := TconnectNode.Create;
connect214.NodeField := 'isActive';
connect214.ProtoField := 'isActive';
{ .AddConnect }
IS203.Connect := connect214;
connect215 := TconnectNode.Create;
connect215.NodeField := 'traceEnabled';
connect215.ProtoField := 'traceEnabled';
{ .AddConnect }
IS203.Connect := connect215;
{ .SetIS }
Script190.IS := IS203;

Script190.SetSourceCode('''ecmascript:\n"+
"function initialize () // CameraMovementScript\n"+
"{\n"+
"//  tracePrint ('initialize start...');\n"+
"    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +\n"+
"                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()\n"+
"                           );\n"+
"    if (duration < 0)\n"+
"    {\n"+
"       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');\n"+
"       duration = 0;\n"+
"    }\n"+
"    else if (duration == 0)\n"+
"    {\n"+
"       alwaysPrint ('warning: duration=0, nothing to do!');\n"+
"    }\n"+
"    tracePrint ('... initialize complete');\n"+
"}\n"+
"\n"+
"function set_goalAimPoint (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    goalAimPoint_changed = eventValue;\n"+
"    tracePrint ('goalAimPoint=' + goalAimPoint.toString());\n"+
"\n"+
"    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator\n"+
"}\n"+
"\n"+
"function set_description (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    description = eventValue;\n"+
"}\n"+
"\n"+
"function set_enabled (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    enabled = eventValue;\n"+
"}\n"+
"\n"+
"function set_duration (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    duration = eventValue;\n"+
"}\n"+
"\n"+
"function set_goalPosition (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    goalPosition = eventValue;\n"+
"}\n"+
"\n"+
"function set_goalOrientation (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    goalOrientation = eventValue;\n"+
"}\n"+
"\n"+
"function set_tracking (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    tracking = eventValue;\n"+
"}\n"+
"\n"+
"function set_goalFieldOfView (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    goalFieldOfView = eventValue;\n"+
"}\n"+
"\n"+
"function set_goalFStop (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    goalFStop = eventValue;\n"+
"}\n"+
"\n"+
"function set_goalFocusDistance (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    goalFocusDistance = eventValue;\n"+
"}\n"+
"\n"+
"// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive\n"+
"\n"+
"function tracePrint (outputValue)\n"+
"{\n"+
"	if (traceEnabled) alwaysPrint (outputValue);\n"+
"}\n"+
"\n"+
"function alwaysPrint (outputValue)\n"+
"{\n"+
"	// try to ensure outputValue is converted to string despite browser idiosyncracies\n"+
"    var outputString = outputValue.toString(); // utility function according to spec\n"+
"    if (outputString == null) outputString = outputValue; // direct cast\n"+
"\n"+
"    if  (description.length > 0)\n"+
"         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\\n');\n"+
"    else\n"+
"         Browser.print ('[CameraMovement] ' + outputString + '\\n');\n"+
"}''');
{ .AddChildren }
ProtoBody189.AddChildren([Script190]);
{ Add any ROUTEs here, going from Script to other nodes within ProtoBody }
{ .SetProtoBody }
ProtoDeclare175.ProtoBody := ProtoBody189;
{ .AddChildren }
Group16.AddChildren([ProtoDeclare175]);
{ =============== OfflineRender ============== }
ProtoDeclare216 := TProtoDeclareNode.Create;
ProtoDeclare216.NameField := 'OfflineRender';
ProtoDeclare216.Appinfo := 'OfflineRender defines a parameters for offline rendering of Camera animation output to a movie file (or possibly a still shot).';
ProtoInterface217 := TProtoInterfaceNode.Create;
{ TODO non-photorealistic rendering (NPR) parameters }
field218 := TfieldNode.Create;
field218.NameField := 'description';
field218.AccessType := 'inputOutput';
field218.Appinfo := 'Text description to be displayed for this OfflineRender';
field218.Type := 'SFString';
{ .AddField }
ProtoInterface217.Field := field218;
field219 := TfieldNode.Create;
field219.NameField := 'enabled';
field219.AccessType := 'inputOutput';
field219.Appinfo := 'Whether this OfflineRender can be activated';
field219.Type := 'SFBool';
field219.Value := 'true';
{ .AddField }
ProtoInterface217.Field := field219;
field220 := TfieldNode.Create;
field220.NameField := 'frameRate';
field220.AccessType := 'inputOutput';
field220.Appinfo := 'Frames per second recorded for this rendering';
field220.Type := 'SFFloat';
field220.Value := '30';
{ .AddField }
ProtoInterface217.Field := field220;
field221 := TfieldNode.Create;
field221.NameField := 'frameSize';
field221.AccessType := 'inputOutput';
field221.Appinfo := 'Size of frame in number of pixels width and height';
field221.Type := 'SFVec2f';
field221.Value := '640 480';
{ .AddField }
ProtoInterface217.Field := field221;
field222 := TfieldNode.Create;
field222.NameField := 'pixelAspectRatio';
field222.AccessType := 'inputOutput';
field222.Appinfo := 'Relative dimensions of pixel height/width typically 1.33 or 1';
field222.Type := 'SFFloat';
field222.Value := '1.33';
{ .AddField }
ProtoInterface217.Field := field222;
field223 := TfieldNode.Create;
field223.NameField := 'set_startTime';
field223.AccessType := 'inputOnly';
field223.Appinfo := 'Begin render operation';
field223.Type := 'SFTime';
{ .AddField }
ProtoInterface217.Field := field223;
field224 := TfieldNode.Create;
field224.NameField := 'progress';
field224.AccessType := 'outputOnly';
field224.Appinfo := 'Progress performing render operation (0..1)';
field224.Type := 'SFFloat';
{ .AddField }
ProtoInterface217.Field := field224;
field225 := TfieldNode.Create;
field225.NameField := 'renderCompleteTime';
field225.AccessType := 'outputOnly';
field225.Appinfo := 'Render operation complete';
field225.Type := 'SFTime';
{ .AddField }
ProtoInterface217.Field := field225;
field226 := TfieldNode.Create;
field226.NameField := 'movieFormat';
field226.AccessType := 'initializeOnly';
field226.Appinfo := 'Format of rendered output movie (mpeg mp4 etc.), use first supported format';
field226.Type := 'MFString';
field226.Value := '\"mpeg\"';
{ .AddField }
ProtoInterface217.Field := field226;
field227 := TfieldNode.Create;
field227.NameField := 'imageFormat';
field227.AccessType := 'initializeOnly';
field227.Appinfo := 'Format of rendered output images (png jpeg gif tiff etc.) use first supported format';
field227.Type := 'MFString';
field227.Value := '\"png\"';
{ .AddField }
ProtoInterface217.Field := field227;
field228 := TfieldNode.Create;
field228.NameField := 'traceEnabled';
field228.AccessType := 'initializeOnly';
field228.Appinfo := 'enable console output to trace script computations and prototype progress';
field228.Type := 'SFBool';
field228.Value := 'false';
{ .AddField }
ProtoInterface217.Field := field228;
{ .SetProtoInterface }
ProtoDeclare216.ProtoInterface := ProtoInterface217;
ProtoBody229 := TProtoBodyNode.Create;
{ First node determines node type of this prototype }
{ Subsequent nodes do not render, but still must be a valid X3D subgraph }
Script230 := TScriptNode.Create;
Script230.MustEvaluate := True;
field231 := TfieldNode.Create;
field231.NameField := 'description';
field231.AccessType := 'inputOutput';
field231.Appinfo := 'Text description to be displayed for this OfflineRender';
field231.Type := 'SFString';
{ .AddField }
Script230.Field := field231;
field232 := TfieldNode.Create;
field232.NameField := 'enabled';
field232.AccessType := 'inputOutput';
field232.Appinfo := 'Whether this OfflineRender can be activated';
field232.Type := 'SFBool';
{ .AddField }
Script230.Field := field232;
field233 := TfieldNode.Create;
field233.NameField := 'frameRate';
field233.AccessType := 'inputOutput';
field233.Appinfo := 'Frames per second recorded for this rendering';
field233.Type := 'SFFloat';
{ .AddField }
Script230.Field := field233;
field234 := TfieldNode.Create;
field234.NameField := 'frameSize';
field234.AccessType := 'inputOutput';
field234.Appinfo := 'Size of frame in number of pixels width and height';
field234.Type := 'SFVec2f';
{ .AddField }
Script230.Field := field234;
field235 := TfieldNode.Create;
field235.NameField := 'pixelAspectRatio';
field235.AccessType := 'inputOutput';
field235.Appinfo := 'Relative dimensions of pixel height/width typically 1.33 or 1';
field235.Type := 'SFFloat';
{ .AddField }
Script230.Field := field235;
field236 := TfieldNode.Create;
field236.NameField := 'set_startTime';
field236.AccessType := 'inputOnly';
field236.Appinfo := 'Begin render operation';
field236.Type := 'SFTime';
{ .AddField }
Script230.Field := field236;
field237 := TfieldNode.Create;
field237.NameField := 'progress';
field237.AccessType := 'outputOnly';
field237.Appinfo := 'Progress performing render operation (0..1)';
field237.Type := 'SFFloat';
{ .AddField }
Script230.Field := field237;
field238 := TfieldNode.Create;
field238.NameField := 'renderCompleteTime';
field238.AccessType := 'outputOnly';
field238.Appinfo := 'Render operation complete';
field238.Type := 'SFTime';
{ .AddField }
Script230.Field := field238;
field239 := TfieldNode.Create;
field239.NameField := 'movieFormat';
field239.AccessType := 'initializeOnly';
field239.Appinfo := 'Format of rendered output movie (mpeg mp4 etc.)';
field239.Type := 'MFString';
{ .AddField }
Script230.Field := field239;
field240 := TfieldNode.Create;
field240.NameField := 'imageFormat';
field240.AccessType := 'initializeOnly';
field240.Appinfo := 'Format of rendered output images (png jpeg gif tiff etc.)';
field240.Type := 'MFString';
{ .AddField }
Script230.Field := field240;
field241 := TfieldNode.Create;
field241.NameField := 'traceEnabled';
field241.AccessType := 'initializeOnly';
field241.Appinfo := 'enable console output to trace script computations and prototype progress';
field241.Type := 'SFBool';
{ .AddField }
Script230.Field := field241;
IS242 := TISNode.Create;
connect243 := TconnectNode.Create;
connect243.NodeField := 'description';
connect243.ProtoField := 'description';
{ .AddConnect }
IS242.Connect := connect243;
connect244 := TconnectNode.Create;
connect244.NodeField := 'enabled';
connect244.ProtoField := 'enabled';
{ .AddConnect }
IS242.Connect := connect244;
connect245 := TconnectNode.Create;
connect245.NodeField := 'frameRate';
connect245.ProtoField := 'frameRate';
{ .AddConnect }
IS242.Connect := connect245;
connect246 := TconnectNode.Create;
connect246.NodeField := 'frameSize';
connect246.ProtoField := 'frameSize';
{ .AddConnect }
IS242.Connect := connect246;
connect247 := TconnectNode.Create;
connect247.NodeField := 'pixelAspectRatio';
connect247.ProtoField := 'pixelAspectRatio';
{ .AddConnect }
IS242.Connect := connect247;
connect248 := TconnectNode.Create;
connect248.NodeField := 'set_startTime';
connect248.ProtoField := 'set_startTime';
{ .AddConnect }
IS242.Connect := connect248;
connect249 := TconnectNode.Create;
connect249.NodeField := 'progress';
connect249.ProtoField := 'progress';
{ .AddConnect }
IS242.Connect := connect249;
connect250 := TconnectNode.Create;
connect250.NodeField := 'renderCompleteTime';
connect250.ProtoField := 'renderCompleteTime';
{ .AddConnect }
IS242.Connect := connect250;
connect251 := TconnectNode.Create;
connect251.NodeField := 'movieFormat';
connect251.ProtoField := 'movieFormat';
{ .AddConnect }
IS242.Connect := connect251;
connect252 := TconnectNode.Create;
connect252.NodeField := 'imageFormat';
connect252.ProtoField := 'imageFormat';
{ .AddConnect }
IS242.Connect := connect252;
connect253 := TconnectNode.Create;
connect253.NodeField := 'traceEnabled';
connect253.ProtoField := 'traceEnabled';
{ .AddConnect }
IS242.Connect := connect253;
{ .SetIS }
Script230.IS := IS242;

Script230.SetSourceCode('''ecmascript:\n"+
"function initialize () // OfflineRenderScript\n"+
"{\n"+
"//  tracePrint ('initialize start...');\n"+
"\n"+
"    tracePrint ('... initialize complete');\n"+
"}\n"+
"\n"+
"function set_description (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    description = eventValue;\n"+
"}\n"+
"\n"+
"function set_enabled (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    enabled = eventValue;\n"+
"}\n"+
"\n"+
"function set_frameRate (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    frameRate = eventValue;\n"+
"}\n"+
"\n"+
"function set_frameSize (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    frameSize = eventValue;\n"+
"}\n"+
"\n"+
"function set_pixelAspectRatio (eventValue) // input event received for inputOutput field\n"+
"{\n"+
"    pixelAspectRatio = eventValue;\n"+
"}\n"+
"\n"+
"function set_startTime (eventValue) // input event received for inputOnly field\n"+
"{\n"+
"   // do something with input eventValue;\n"+
"}\n"+
"\n"+
"function tracePrint (outputValue)\n"+
"{\n"+
"	if (traceEnabled) alwaysPrint (outputValue);\n"+
"}\n"+
"\n"+
"function alwaysPrint (outputValue)\n"+
"{\n"+
"	// try to ensure outputValue is converted to string despite browser idiosyncracies\n"+
"    var outputString = outputValue.toString(); // utility function according to spec\n"+
"    if (outputString == null) outputString = outputValue; // direct cast\n"+
"\n"+
"    if  (description.length > 0)\n"+
"         Browser.print ('[OfflineRender: ' + description + '] ' + outputString + '\\n');\n"+
"    else\n"+
"         Browser.print ('[OfflineRender] ' + outputString + '\\n');\n"+
"}''');
{ .AddChildren }
ProtoBody229.AddChildren([Script230]);
{ Add any ROUTEs here, going from Script to other nodes within ProtoBody }
{ .SetProtoBody }
ProtoDeclare216.ProtoBody := ProtoBody229;
{ .AddChildren }
Group16.AddChildren([ProtoDeclare216]);
{ =============== Launch Prototype Example ============== }
Background254 := TBackgroundNode.Create;
Background254.SetSkyColor([Vector3(0.282353,0.380392,0.470588)]);
{ .AddChildren }
Group16.AddChildren([Background254]);
Anchor255 := TAnchorNode.Create;
Anchor255.Description := 'launch CameraExample scene';
Anchor255.SetUrl(['CameraExamples.x3d','https://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.x3d','CameraExamples.wrl','https://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.wrl']);
Transform256 := TTransformNode.Create;
Shape257 := TShapeNode.Create;
Text258 := TTextNode.Create;
Text258.SetText(['CameraPrototypes.x3d','defines multiple prototype nodes','','Click on this text to see','CameraExamples.x3d scene']);
FontStyle259 := TFontStyleNode.Create;
FontStyle259.Justify := fjMiddle;
FontStyle259.JustifyMinor := fjMiddle;
{ .SetFontStyle }
Text258.FontStyle := FontStyle259;
{ .SetGeometry }
Shape257.Geometry := Text258;
Appearance260 := TAppearanceNode.Create;
Material261 := TMaterialNode.Create;
Material261.DiffuseColor := Vector3(1,1,0.2);
{ .SetMaterial }
Appearance260.Material := Material261;
{ .SetAppearance }
Shape257.Appearance := Appearance260;
{ .AddChild }
Transform256.AddChildren([Shape257]);
{ .AddChildren }
Anchor255.AddChildren([Transform256]);
{ .AddChildren }
Group16.AddChildren([Anchor255]);
{ .AddGroup }
X3D0.AddChildren([Group16]);
Result := X3D0;
end;
