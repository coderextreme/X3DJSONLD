{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "JSON Schema X3D V3.0",
  "description": "Experimental JSON Schema for X3D V3.0",
  "type": "object",
  "properties": {
    "X3D": {
      "$ref": "#/definitions/X3D"
    }
  },
  "required": [
    "X3D"
  ],
  "additionalProperties": false,
  "definitions": {
    "-childStatements": {
      "description": "Comments and ROUTEs",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "ROUTE": {
            "$ref": "#/definitions/ROUTE"
          },
          "IMPORT": {
            "$ref": "#/definitions/IMPORT"
          },
          "ProtoDeclare": {
            "$ref": "#/definitions/ProtoDeclare"
          },
          "ExternProtoDeclare": {
            "$ref": "#/definitions/ExternProtoDeclare"
          },
          "EXPORT": {
            "$ref": "#/definitions/EXPORT"
          }
        },
        "additionalProperties": false
      }
    },
    "@geoSystem": {
      "description": "Attempts to validate all possible combinations",
      "oneOf": [
        {
          "type": "array",
          "minItems": 2,
          "maxItems": 3,
          "items": [
            {
              "type": "string",
              "enum": [
                "GD",
                "GDC"
              ],
              "default": "GD"
            },
            {
              "type": "string",
              "enum": [
                "WGS84"
              ]
            }
          ],
          "additionalItems": {
            "type": "string",
            "enum": [
              "AM",
              "AN",
              "BN",
              "BR",
              "CC",
              "CD",
              "EA",
              "EB",
              "EC",
              "ED",
              "EE",
              "EF",
              "FA",
              "HE",
              "HO",
              "ID",
              "IN",
              "KA",
              "RF",
              "SA",
              "WD",
              "WE"
            ],
            "default": "WE"
          }
        },
        {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "items": [
            {
              "type": "string",
              "enum": [
                "GD",
                "GDC"
              ],
              "default": "GD"
            },
            {
              "type": "string",
              "enum": [
                "AM",
                "AN",
                "BN",
                "BR",
                "CC",
                "CD",
                "EA",
                "EB",
                "EC",
                "ED",
                "EE",
                "EF",
                "FA",
                "HE",
                "HO",
                "ID",
                "IN",
                "KA",
                "RF",
                "SA",
                "WD",
                "WE"
              ],
              "default": "WE"
            }
          ],
          "additionalItems": {
            "type": "string",
            "enum": [
              "WGS84"
            ]
          }
        },
        {
          "type": "array",
          "minItems": 4,
          "maxItems": 5,
          "items": [
            {
              "type": "string",
              "enum": [
                "UTM"
              ],
              "default": "GD"
            },
            {
              "type": "string",
              "enum": [
                "Z01",
                "Z1",
                "Z02",
                "Z2",
                "Z03",
                "Z3",
                "Z04",
                "Z4",
                "Z05",
                "Z5",
                "Z06",
                "Z6",
                "Z07",
                "Z7",
                "Z08",
                "Z8",
                "Z09",
                "Z9",
                "Z10",
                "Z11",
                "Z12",
                "Z13",
                "Z14",
                "Z15",
                "Z16",
                "Z17",
                "Z18",
                "Z19",
                "Z20",
                "Z21",
                "Z22",
                "Z23",
                "Z24",
                "Z25",
                "Z26",
                "Z27",
                "Z28",
                "Z29",
                "Z30",
                "Z31",
                "Z32",
                "Z33",
                "Z34",
                "Z35",
                "Z36",
                "Z37",
                "Z38",
                "Z39",
                "Z40",
                "Z41",
                "Z42",
                "Z43",
                "Z44",
                "Z45",
                "Z46",
                "Z47",
                "Z48",
                "Z49",
                "Z50",
                "Z51",
                "Z52",
                "Z53",
                "Z54",
                "Z55",
                "Z56",
                "Z57",
                "Z58",
                "Z59",
                "Z60"
              ],
              "default": "WE"
            },
            {
              "type": "string",
              "enum": [
                "AM",
                "AN",
                "BN",
                "BR",
                "CC",
                "CD",
                "EA",
                "EB",
                "EC",
                "ED",
                "EE",
                "EF",
                "FA",
                "HE",
                "HO",
                "ID",
                "IN",
                "KA",
                "RF",
                "SA",
                "WD",
                "WE"
              ]
            },
            {
              "type": "string",
              "enum": [
                "WGS84"
              ]
            }
          ],
          "additionalItems": {
            "type": "string",
            "enum": [
              "S",
              "N"
            ]
          }
        },
        {
          "type": "array",
          "minItems": 3,
          "maxItems": 5,
          "items": [
            {
              "type": "string",
              "enum": [
                "UTM"
              ],
              "default": "GD"
            },
            {
              "type": "string",
              "enum": [
                "Z01",
                "Z1",
                "Z02",
                "Z2",
                "Z03",
                "Z3",
                "Z04",
                "Z4",
                "Z05",
                "Z5",
                "Z06",
                "Z6",
                "Z07",
                "Z7",
                "Z08",
                "Z8",
                "Z09",
                "Z9",
                "Z10",
                "Z11",
                "Z12",
                "Z13",
                "Z14",
                "Z15",
                "Z16",
                "Z17",
                "Z18",
                "Z19",
                "Z20",
                "Z21",
                "Z22",
                "Z23",
                "Z24",
                "Z25",
                "Z26",
                "Z27",
                "Z28",
                "Z29",
                "Z30",
                "Z31",
                "Z32",
                "Z33",
                "Z34",
                "Z35",
                "Z36",
                "Z37",
                "Z38",
                "Z39",
                "Z40",
                "Z41",
                "Z42",
                "Z43",
                "Z44",
                "Z45",
                "Z46",
                "Z47",
                "Z48",
                "Z49",
                "Z50",
                "Z51",
                "Z52",
                "Z53",
                "Z54",
                "Z55",
                "Z56",
                "Z57",
                "Z58",
                "Z59",
                "Z60"
              ],
              "default": "WE"
            },
            {
              "type": "string",
              "enum": [
                "AM",
                "AN",
                "BN",
                "BR",
                "CC",
                "CD",
                "EA",
                "EB",
                "EC",
                "ED",
                "EE",
                "EF",
                "FA",
                "HE",
                "HO",
                "ID",
                "IN",
                "KA",
                "RF",
                "SA",
                "WD",
                "WE"
              ]
            },
            {
              "type": "string",
              "enum": [
                "S",
                "N"
              ]
            }
          ],
          "additionalItems": {
            "type": "string",
            "enum": [
              "WGS84"
            ]
          }
        },
        {
          "type": "array",
          "minItems": 4,
          "maxItems": 5,
          "items": [
            {
              "type": "string",
              "enum": [
                "UTM"
              ],
              "default": "GD"
            },
            {
              "type": "string",
              "enum": [
                "Z01",
                "Z1",
                "Z02",
                "Z2",
                "Z03",
                "Z3",
                "Z04",
                "Z4",
                "Z05",
                "Z5",
                "Z06",
                "Z6",
                "Z07",
                "Z7",
                "Z08",
                "Z8",
                "Z09",
                "Z9",
                "Z10",
                "Z11",
                "Z12",
                "Z13",
                "Z14",
                "Z15",
                "Z16",
                "Z17",
                "Z18",
                "Z19",
                "Z20",
                "Z21",
                "Z22",
                "Z23",
                "Z24",
                "Z25",
                "Z26",
                "Z27",
                "Z28",
                "Z29",
                "Z30",
                "Z31",
                "Z32",
                "Z33",
                "Z34",
                "Z35",
                "Z36",
                "Z37",
                "Z38",
                "Z39",
                "Z40",
                "Z41",
                "Z42",
                "Z43",
                "Z44",
                "Z45",
                "Z46",
                "Z47",
                "Z48",
                "Z49",
                "Z50",
                "Z51",
                "Z52",
                "Z53",
                "Z54",
                "Z55",
                "Z56",
                "Z57",
                "Z58",
                "Z59",
                "Z60"
              ],
              "default": "WE"
            },
            {
              "type": "string",
              "enum": [
                "WGS84"
              ]
            },
            {
              "type": "string",
              "enum": [
                "AM",
                "AN",
                "BN",
                "BR",
                "CC",
                "CD",
                "EA",
                "EB",
                "EC",
                "ED",
                "EE",
                "EF",
                "FA",
                "HE",
                "HO",
                "ID",
                "IN",
                "KA",
                "RF",
                "SA",
                "WD",
                "WE"
              ]
            }
          ],
          "additionalItems": {
            "type": "string",
            "enum": [
              "S",
              "N"
            ]
          }
        },
        {
          "type": "array",
          "minItems": 3,
          "maxItems": 5,
          "items": [
            {
              "type": "string",
              "enum": [
                "UTM"
              ],
              "default": "GD"
            },
            {
              "type": "string",
              "enum": [
                "Z01",
                "Z1",
                "Z02",
                "Z2",
                "Z03",
                "Z3",
                "Z04",
                "Z4",
                "Z05",
                "Z5",
                "Z06",
                "Z6",
                "Z07",
                "Z7",
                "Z08",
                "Z8",
                "Z09",
                "Z9",
                "Z10",
                "Z11",
                "Z12",
                "Z13",
                "Z14",
                "Z15",
                "Z16",
                "Z17",
                "Z18",
                "Z19",
                "Z20",
                "Z21",
                "Z22",
                "Z23",
                "Z24",
                "Z25",
                "Z26",
                "Z27",
                "Z28",
                "Z29",
                "Z30",
                "Z31",
                "Z32",
                "Z33",
                "Z34",
                "Z35",
                "Z36",
                "Z37",
                "Z38",
                "Z39",
                "Z40",
                "Z41",
                "Z42",
                "Z43",
                "Z44",
                "Z45",
                "Z46",
                "Z47",
                "Z48",
                "Z49",
                "Z50",
                "Z51",
                "Z52",
                "Z53",
                "Z54",
                "Z55",
                "Z56",
                "Z57",
                "Z58",
                "Z59",
                "Z60"
              ],
              "default": "WE"
            },
            {
              "type": "string",
              "enum": [
                "WGS84"
              ]
            },
            {
              "type": "string",
              "enum": [
                "S",
                "N"
              ]
            }
          ],
          "additionalItems": {
            "type": "string",
            "enum": [
              "AM",
              "AN",
              "BN",
              "BR",
              "CC",
              "CD",
              "EA",
              "EB",
              "EC",
              "ED",
              "EE",
              "EF",
              "FA",
              "HE",
              "HO",
              "ID",
              "IN",
              "KA",
              "RF",
              "SA",
              "WD",
              "WE"
            ]
          }
        },
        {
          "type": "array",
          "minItems": 4,
          "maxItems": 5,
          "items": [
            {
              "type": "string",
              "enum": [
                "UTM"
              ],
              "default": "GD"
            },
            {
              "type": "string",
              "enum": [
                "Z01",
                "Z1",
                "Z02",
                "Z2",
                "Z03",
                "Z3",
                "Z04",
                "Z4",
                "Z05",
                "Z5",
                "Z06",
                "Z6",
                "Z07",
                "Z7",
                "Z08",
                "Z8",
                "Z09",
                "Z9",
                "Z10",
                "Z11",
                "Z12",
                "Z13",
                "Z14",
                "Z15",
                "Z16",
                "Z17",
                "Z18",
                "Z19",
                "Z20",
                "Z21",
                "Z22",
                "Z23",
                "Z24",
                "Z25",
                "Z26",
                "Z27",
                "Z28",
                "Z29",
                "Z30",
                "Z31",
                "Z32",
                "Z33",
                "Z34",
                "Z35",
                "Z36",
                "Z37",
                "Z38",
                "Z39",
                "Z40",
                "Z41",
                "Z42",
                "Z43",
                "Z44",
                "Z45",
                "Z46",
                "Z47",
                "Z48",
                "Z49",
                "Z50",
                "Z51",
                "Z52",
                "Z53",
                "Z54",
                "Z55",
                "Z56",
                "Z57",
                "Z58",
                "Z59",
                "Z60"
              ],
              "default": "WE"
            },
            {
              "type": "string",
              "enum": [
                "S",
                "N"
              ]
            },
            {
              "type": "string",
              "enum": [
                "WGS84"
              ]
            }
          ],
          "additionalItems": {
            "type": "string",
            "enum": [
              "AM",
              "AN",
              "BN",
              "BR",
              "CC",
              "CD",
              "EA",
              "EB",
              "EC",
              "ED",
              "EE",
              "EF",
              "FA",
              "HE",
              "HO",
              "ID",
              "IN",
              "KA",
              "RF",
              "SA",
              "WD",
              "WE"
            ]
          }
        },
        {
          "type": "array",
          "minItems": 2,
          "maxItems": 5,
          "items": [
            {
              "type": "string",
              "enum": [
                "UTM"
              ],
              "default": "GD"
            },
            {
              "type": "string",
              "enum": [
                "Z01",
                "Z1",
                "Z02",
                "Z2",
                "Z03",
                "Z3",
                "Z04",
                "Z4",
                "Z05",
                "Z5",
                "Z06",
                "Z6",
                "Z07",
                "Z7",
                "Z08",
                "Z8",
                "Z09",
                "Z9",
                "Z10",
                "Z11",
                "Z12",
                "Z13",
                "Z14",
                "Z15",
                "Z16",
                "Z17",
                "Z18",
                "Z19",
                "Z20",
                "Z21",
                "Z22",
                "Z23",
                "Z24",
                "Z25",
                "Z26",
                "Z27",
                "Z28",
                "Z29",
                "Z30",
                "Z31",
                "Z32",
                "Z33",
                "Z34",
                "Z35",
                "Z36",
                "Z37",
                "Z38",
                "Z39",
                "Z40",
                "Z41",
                "Z42",
                "Z43",
                "Z44",
                "Z45",
                "Z46",
                "Z47",
                "Z48",
                "Z49",
                "Z50",
                "Z51",
                "Z52",
                "Z53",
                "Z54",
                "Z55",
                "Z56",
                "Z57",
                "Z58",
                "Z59",
                "Z60"
              ],
              "default": "WE"
            },
            {
              "type": "string",
              "enum": [
                "S",
                "N"
              ]
            },
            {
              "type": "string",
              "enum": [
                "AM",
                "AN",
                "BN",
                "BR",
                "CC",
                "CD",
                "EA",
                "EB",
                "EC",
                "ED",
                "EE",
                "EF",
                "FA",
                "HE",
                "HO",
                "ID",
                "IN",
                "KA",
                "RF",
                "SA",
                "WD",
                "WE"
              ]
            }
          ],
          "additionalItems": {
            "type": "string",
            "enum": [
              "WGS84"
            ]
          }
        },
        {
          "type": "array",
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "type": "string",
              "enum": [
                "GC",
                "GCC"
              ],
              "default": "GD"
            }
          ],
          "additionalItems": false
        }
      ]
    },
    "SceneGraphStructureStatement": {
      "type": "object",
      "properties": {
        "-children": {
          "$ref": "#/definitions/-childStatements"
        },
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Anchor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "@description": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@parameter": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "@url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Appearance": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-fillProperties": {
              "$ref": "#/definitions/-FillPropertiesSFNode"
            },
            "-lineProperties": {
              "$ref": "#/definitions/-LinePropertiesSFNode"
            },
            "-material": {
              "$ref": "#/definitions/-X3DMaterialNodeSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-texture": {
              "$ref": "#/definitions/-X3DTextureNodeSFNode"
            },
            "-textureTransform": {
              "$ref": "#/definitions/-X3DTextureTransformNodeSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Arc2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@endAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMaximum": 6.2832,
              "exclusiveMinimum": -6.2832,
              "default": 1.570796,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@radius": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@startAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMaximum": 6.2832,
              "exclusiveMinimum": -6.2832,
              "default": 0,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ArcClose2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@closureType": {
              "pattern": "^(\\s|\\S)*$",
              "enum": [
                "PIE",
                "CHORD"
              ],
              "default": "PIE",
              "$comment": "SFString initializeOnly",
              "type": "string"
            },
            "@endAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMaximum": 6.2832,
              "exclusiveMinimum": -6.2832,
              "default": 1.570796,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@radius": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@startAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMaximum": 6.2832,
              "exclusiveMinimum": -6.2832,
              "default": 0,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AudioClip": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@description": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@duration_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": -1,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@elapsedTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isPaused": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@loop": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@pauseTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@pitch": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@resumeTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@startTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@stopTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Background": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@backUrl": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@bindTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@bottomUrl": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@frontUrl": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@groundAngle": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "maximum": 1.5708,
                "minimum": 0,
                "type": "number"
              }
            },
            "@groundColor": {
              "pattern": "^(\\s)*((([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@isBound": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@leftUrl": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@rightUrl": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@set_bind": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@skyAngle": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "maximum": 3.1416,
                "minimum": 0,
                "type": "number"
              }
            },
            "@skyColor": {
              "pattern": "^(\\s)*((([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "default": 0,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@topUrl": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@transparency": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Billboard": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@axisOfRotation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BooleanFilter": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@inputFalse": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@inputNegate": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@inputTrue": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_boolean": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BooleanSequencer": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^\\s*((true|false)\\s*,?\\s*)*$",
              "$comment": "MFBool inputOutput",
              "type": "array",
              "items": {
                "type": "boolean"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@next": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@previous": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BooleanToggle": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_boolean": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@toggle": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BooleanTrigger": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_triggerTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime inputOnly",
              "type": "number"
            },
            "@triggerTrue": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Box": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@size": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 2,
                "type": "number"
              }
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Circle2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@radius": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Collision": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "@collideTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-proxy": {
              "$ref": "#/definitions/-X3DChildNodeSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Color": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@color": {
              "pattern": "^(\\s)*((([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ColorInterpolator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^(\\s)*((([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^(\\s)*(([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFColor outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ColorRGBA": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@color": {
              "pattern": "^(\\s)*((([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){3}([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFColorRGBA inputOutput",
              "type": "array",
              "minItems": 4,
              "items": {
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "component": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "-children": {
            "$ref": "#/definitions/-childStatements"
          },
          "IS": {
            "$ref": "#/definitions/IS"
          },
          "@class": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@level": {
            "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
            "maximum": 5,
            "minimum": 1,
            "default": 1,
            "$comment": "SFInt32 inputOutput",
            "type": "integer"
          },
          "@name": {
            "pattern": "^(\\s|\\S)*$",
            "enum": [
              "Core",
              "DIS",
              "EnvironmentalEffects",
              "EnvironmentalSensor",
              "EventUtilities",
              "Geometry2D",
              "Geometry3D",
              "Geospatial",
              "Grouping",
              "H-Anim",
              "Interpolation",
              "KeyDeviceSensor",
              "Lighting",
              "Navigation",
              "Networking",
              "NURBS",
              "PointingDeviceSensor",
              "Rendering",
              "Scripting",
              "Shape",
              "Sound",
              "Text",
              "Texturing",
              "Time"
            ],
            "$comment": "SFString inputOutput",
            "type": "string"
          }
        },
        "required": [
          "@level",
          "@name"
        ],
        "additionalProperties": false
      }
    },
    "Cone": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bottom": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@bottomRadius": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@height": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 2,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@side": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "connect": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "-children": {
            "$ref": "#/definitions/-childStatements"
          },
          "IS": {
            "$ref": "#/definitions/IS"
          },
          "@class": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@nodeField": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@protoField": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          }
        },
        "required": [
          "@nodeField",
          "@protoField"
        ],
        "additionalProperties": false
      }
    },
    "Contour2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-children": {
              "$ref": "#/definitions/-NurbsCurve2D-ContourPolyline2DMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ContourPolyline2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@controlPoint": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2d inputOutput",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coordinate": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@point": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CoordinateDouble": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@point": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3d inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CoordinateInterpolator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CoordinateInterpolator2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f outputOnly",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Cylinder": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bottom": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@height": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 2,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@radius": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@side": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@top": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CylinderSensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@autoOffset": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@axisRotation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@description": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@diskAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1.5708,
              "minimum": 0,
              "default": 0.26179167,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isOver": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@maxAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMaximum": 6.2832,
              "exclusiveMinimum": -6.2832,
              "default": -1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@minAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMaximum": 6.2832,
              "exclusiveMinimum": -6.2832,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@offset": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@rotation_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation outputOnly",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": {
                "type": "number"
              }
            },
            "@trackPoint_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DirectionalLight": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ambientIntensity": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@color": {
              "pattern": "^(\\s)*(([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@direction": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": -1,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@intensity": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@on": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Disk2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@innerRadius": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@outerRadius": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ElevationGrid": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "@colorPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@creaseAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@height": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat initializeOnly",
              "type": "array",
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-normal": {
              "$ref": "#/definitions/-X3DNormalNodeSFNode"
            },
            "@normalPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@set_height": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNodeSFNode"
            },
            "@xDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 2,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@xSpacing": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@zDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 2,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@zSpacing": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "EspduTransform": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@address": {
              "pattern": "^(\\s|\\S)*$",
              "default": "localhost",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@applicationID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@articulationParameterArray": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@articulationParameterChangeIndicatorArray": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "@articulationParameterCount": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@articulationParameterDesignatorArray": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "@articulationParameterIdPartAttachedToArray": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "@articulationParameterTypeArray": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "@articulationParameterValue0_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@articulationParameterValue1_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@articulationParameterValue2_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@articulationParameterValue3_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@articulationParameterValue4_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@articulationParameterValue5_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@articulationParameterValue6_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@articulationParameterValue7_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@center": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "@collideTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@collisionType": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@deadReckoning": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@detonateTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@detonationLocation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@detonationRelativeLocation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@detonationResult": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@entityCategory": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@entityCountry": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@entityDomain": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@entityExtra": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@entityID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@entityKind": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@entitySpecific": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@entitySubcategory": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@eventApplicationID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@eventEntityID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@eventNumber": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@eventSiteID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@fired1": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@fired2": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@firedTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@fireMissionIndex": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@firingRange": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@firingRate": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@forceID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@fuse": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@geoCoords": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isCollided": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isDetonated": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isNetworkReader": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isNetworkWriter": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isRtpHeaderHeard": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isStandAlone": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@linearAcceleration": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@linearVelocity": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@marking": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@multicastRelayHost": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@multicastRelayPort": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@munitionApplicationID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@munitionEndPoint": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@munitionEntityID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@munitionQuantity": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@munitionSiteID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@munitionStartPoint": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@networkMode": {
              "pattern": "^(\\s|\\S)*$",
              "enum": [
                "standAlone",
                "networkReader",
                "networkWriter"
              ],
              "default": "standAlone",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@port": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@readInterval": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0.1,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@rotation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@rtpHeaderExpected": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@scale": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "type": "number"
              }
            },
            "@scaleOrientation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@set_articulationParameterValue0": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@set_articulationParameterValue1": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@set_articulationParameterValue2": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@set_articulationParameterValue3": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@set_articulationParameterValue4": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@set_articulationParameterValue5": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@set_articulationParameterValue6": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@set_articulationParameterValue7": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@siteID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@timestamp": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@translation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@warhead": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@writeInterval": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "EXPORT": {
      "type": "object",
      "properties": {
        "-children": {
          "$ref": "#/definitions/-childStatements"
        },
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "@AS": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@localDEF": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        }
      },
      "required": [
        "@localDEF"
      ],
      "additionalProperties": false
    },
    "ExternProtoDeclare": {
      "type": "object",
      "properties": {
        "field": {
          "$ref": "#/definitions/field"
        },
        "-children": {
          "$ref": "#/definitions/-childStatements"
        },
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "@appinfo": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@documentation": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@name": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@url": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "MFString inputOutput",
          "type": "array",
          "minItems": 1,
          "items": {
            "format": "uri-reference",
            "type": "string"
          }
        }
      },
      "required": [
        "@name",
        "@url"
      ],
      "additionalProperties": false
    },
    "Extrusion": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@beginCap": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@convex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@creaseAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@crossSection": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f initializeOnly",
              "type": "array",
              "minItems": 2,
              "items": [
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": -1,
                  "type": "number"
                },
                {
                  "default": -1,
                  "type": "number"
                },
                {
                  "default": -1,
                  "type": "number"
                },
                {
                  "default": -1,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                }
              ],
              "additionalItems": {
                "type": "number"
              }
            },
            "@endCap": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@orientation": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFRotation initializeOnly",
              "type": "array",
              "minItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": {
                "type": "number"
              }
            },
            "@scale": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "items": {
                "default": 1,
                "type": "number"
              }
            },
            "@set_crossSection": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f inputOnly",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@set_orientation": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFRotation inputOnly",
              "type": "array",
              "minItems": 4,
              "items": {
                "type": "number"
              }
            },
            "@set_scale": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f inputOnly",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@set_spine": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3f inputOnly",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@spine": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "field": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "IS": {
            "$ref": "#/definitions/IS"
          },
          "@accessType": {
            "pattern": "^(\\s|\\S)*$",
            "enum": [
              "initializeOnly",
              "inputOnly",
              "outputOnly",
              "inputOutput"
            ],
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@appinfo": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "-children": {
            "$ref": "#/definitions/-X3DNodeMFNode"
          },
          "@class": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@documentation": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@name": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@type": {
            "pattern": "^(\\s|\\S)*$",
            "enum": [
              "SFBool",
              "MFBool",
              "SFColor",
              "MFColor",
              "SFColorRGBA",
              "MFColorRGBA",
              "SFDouble",
              "MFDouble",
              "SFFloat",
              "MFFloat",
              "SFImage",
              "MFImage",
              "SFInt32",
              "MFInt32",
              "SFNode",
              "MFNode",
              "SFRotation",
              "MFRotation",
              "SFString",
              "MFString",
              "SFTime",
              "MFTime",
              "SFVec2d",
              "MFVec2d",
              "SFVec2f",
              "MFVec2f",
              "SFVec3d",
              "MFVec3d",
              "SFVec3f",
              "MFVec3f",
              "SFVec4d",
              "MFVec4d",
              "SFVec4f",
              "MFVec4f",
              "SFMatrix3d",
              "MFMatrix3d",
              "SFMatrix3f",
              "MFMatrix3f",
              "SFMatrix4d",
              "MFMatrix4d",
              "SFMatrix4f",
              "MFMatrix4f"
            ],
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@value": {
            "pattern": "^(\\s|\\S)*$"
          }
        },
        "required": [
          "@accessType",
          "@name",
          "@type"
        ],
        "additionalProperties": false
      }
    },
    "fieldValue": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "IS": {
            "$ref": "#/definitions/IS"
          },
          "-children": {
            "$ref": "#/definitions/-X3DNodeMFNode"
          },
          "@class": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@name": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@value": {
            "pattern": "^(\\s|\\S)*$"
          }
        },
        "required": [
          "@name"
        ],
        "additionalProperties": false
      }
    },
    "FillProperties": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@filled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@hatchColor": {
              "pattern": "^(\\s)*(([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@hatched": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@hatchStyle": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 1,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Fog": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bindTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@color": {
              "pattern": "^(\\s)*(([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@fogType": {
              "pattern": "^(\\s|\\S)*$",
              "enum": [
                "LINEAR",
                "EXPONENTIAL"
              ],
              "default": "LINEAR",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@isBound": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_bind": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@visibilityRange": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FontStyle": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@family": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "SANS",
                      "SERIF",
                      "TYPEWRITER"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ],
                "default": "SERIF",
                "type": "string"
              }
            },
            "@horizontal": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@justify": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString initializeOnly",
              "type": "array",
              "items": {
                "enum": [
                  "MIDDLE",
                  "\"MIDDLE\" \"BEGIN\"",
                  "\"MIDDLE\" \"END\"",
                  "\"MIDDLE\" \"FIRST\"",
                  "\"MIDDLE\" \"MIDDLE\"",
                  "BEGIN",
                  "\"BEGIN\" \"BEGIN\"",
                  "\"BEGIN\" \"END\"",
                  "\"BEGIN\" \"FIRST\"",
                  "\"BEGIN\" \"MIDDLE\"",
                  "END",
                  "\"END\" \"BEGIN\"",
                  "\"END\" \"END\"",
                  "\"END\" \"FIRST\"",
                  "\"END\" \"MIDDLE\"",
                  "FIRST",
                  "\"FIRST\" \"BEGIN\"",
                  "\"FIRST\" \"END\"",
                  "\"FIRST\" \"FIRST\"",
                  "\"FIRST\" \"MIDDLE\""
                ],
                "default": "BEGIN",
                "type": "string"
              }
            },
            "@language": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString initializeOnly",
              "type": "string"
            },
            "@leftToRight": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@size": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@spacing": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@style": {
              "pattern": "^(\\s|\\S)*$",
              "enum": [
                "PLAIN",
                "BOLD",
                "ITALIC",
                "BOLDITALIC"
              ],
              "default": "PLAIN",
              "$comment": "SFString initializeOnly",
              "type": "string"
            },
            "@topToBottom": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GeoCoordinate": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-geoOrigin": {
              "$ref": "#/definitions/-GeoOriginSFNode"
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@point": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3d inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GeoElevationGrid": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "@colorPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@creaseAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFDouble initializeOnly",
              "type": "number"
            },
            "@geoGridOrigin": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-geoOrigin": {
              "$ref": "#/definitions/-GeoOriginSFNode"
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "@height": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-normal": {
              "$ref": "#/definitions/-X3DNormalNodeSFNode"
            },
            "@normalPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@set_height": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNodeSFNode"
            },
            "@xDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 2,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@xSpacing": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFDouble initializeOnly",
              "type": "number"
            },
            "@yScale": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@zDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 2,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@zSpacing": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFDouble initializeOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GeoLocation": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "@geoCoords": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-geoOrigin": {
              "$ref": "#/definitions/-GeoOriginSFNode"
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GeoLOD": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@center": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@child1Url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString initializeOnly",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@child2Url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString initializeOnly",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@child3Url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString initializeOnly",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@child4Url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString initializeOnly",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "-geoOrigin": {
              "$ref": "#/definitions/-GeoOriginSFNode"
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "@level_changed": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFInt32 outputOnly",
              "type": "integer"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@range": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 10,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "-rootNode": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "@rootUrl": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString initializeOnly",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GeoMetadata": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-data": {
              "$ref": "#/definitions/-X3DNodeMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@summary": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "@url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GeoOrigin": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@geoCoords": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@rotateYUp": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GeoPositionInterpolator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-geoOrigin": {
              "$ref": "#/definitions/-GeoOriginSFNode"
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "@geovalue_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3d inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GeoTouchSensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@description": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "-geoOrigin": {
              "$ref": "#/definitions/-GeoOriginSFNode"
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "@hitGeoCoord_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@hitNormal_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@hitPoint_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@hitTexCoord_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec2f outputOnly",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isOver": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@touchTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GeoViewpoint": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bindTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@description": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@fieldOfView": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMaximum": 3.1416,
              "exclusiveMinimum": 0,
              "default": 0.7854,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "-geoOrigin": {
              "$ref": "#/definitions/-GeoOriginSFNode"
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "@headlight": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@isBound": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@jump": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@navType": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": [
                {
                  "default": "EXAMINE",
                  "type": "string"
                },
                {
                  "default": "ANY",
                  "type": "string"
                }
              ],
              "additionalItems": {
                "type": "string"
              }
            },
            "@orientation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation initializeOnly",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@position": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 100000,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@set_bind": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@speedFactor": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Group": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "HAnimDisplacer": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@coordIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 initializeOnly",
              "type": "array",
              "items": {
                "minimum": 0,
                "type": "integer"
              }
            },
            "@displacements": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "anyOf": [
                {
                  "enum": [
                    "sellion",
                    "r_infraorbitale",
                    "l_infraorbitale",
                    "supramenton",
                    "r_tragion",
                    "r_gonion",
                    "l_tragion",
                    "l_gonion",
                    "nuchale",
                    "r_clavicale",
                    "suprasternale",
                    "l_clavicale",
                    "r_thelion",
                    "l_thelion",
                    "substernale",
                    "r_rib10",
                    "r_asis",
                    "l_rib10",
                    "l_asis",
                    "r_iliocristale",
                    "r_trochanterion",
                    "l_iliocristale",
                    "l_trochanterion",
                    "cervicale",
                    "rib10_midspine",
                    "r_psis",
                    "l_psis",
                    "waist_preferred_post",
                    "r_acromion",
                    "r_axilla_ant",
                    "r_radial_styloid",
                    "r_axilla_post",
                    "r_olecranon",
                    "r_humeral_lateral_epicn",
                    "r_humeral_medial_epicn",
                    "r_radiale",
                    "r_metacarpal_pha2",
                    "r_dactylion",
                    "r_ulnar_styloid",
                    "r_metacarpal_pha5",
                    "l_acromion",
                    "l_axilla_ant",
                    "l_radial_styloid",
                    "l_axilla_post",
                    "l_olecranon",
                    "l_humeral_lateral_epicn",
                    "l_humeral_medial_epicn",
                    "l_radiale",
                    "l_metacarpal_pha2",
                    "l_dactylion",
                    "l_ulnar_styloid",
                    "l_metacarpal_pha5",
                    "r_knee_crease",
                    "r_femoral_lateral_epicn",
                    "r_femoral_medial_epicn",
                    "r_metatarsal_pha5",
                    "r_lateral_malleolus",
                    "r_medial_malleolus",
                    "r_sphyrion",
                    "r_metatarsal_pha1",
                    "r_calcaneous_post",
                    "r_digit2",
                    "l_knee_crease",
                    "l_femoral_lateral_epicn",
                    "l_femoral_medial_epicn",
                    "l_metatarsal_pha5",
                    "l_lateral_malleolus",
                    "l_medial_malleolus",
                    "l_sphyrion",
                    "l_metatarsal_pha1",
                    "l_calcaneous_post",
                    "l_digit2",
                    "crotch",
                    "r_neck_base",
                    "l_neck_base",
                    "navel"
                  ]
                },
                {
                  "type": "string"
                }
              ],
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@weight": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "HAnimHumanoid": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@center": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@info": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "-joints": {
              "$ref": "#/definitions/-HAnimJointMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@rotation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@scale": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "exclusiveMinimum": 0,
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "exclusiveMinimum": 0,
                "type": "number"
              }
            },
            "@scaleOrientation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "-segments": {
              "$ref": "#/definitions/-HAnimSegmentMFNode"
            },
            "-sites": {
              "$ref": "#/definitions/-HAnimSiteMFNode"
            },
            "-skeleton": {
              "$ref": "#/definitions/-HAnimJoint-HAnimSiteMFNode"
            },
            "-skin": {
              "$ref": "#/definitions/-Group-Transform-Shape-IndexedFaceSetMFNode"
            },
            "-skinCoord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "-skinNormal": {
              "$ref": "#/definitions/-X3DNormalNodeSFNode"
            },
            "@translation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@version": {
              "pattern": "^(\\s|\\S)*$",
              "enum": [
                "1.0",
                "2.0"
              ],
              "default": "1.0",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "-viewpoints": {
              "$ref": "#/definitions/-HAnimSiteMFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "HAnimJoint": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@center": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-HAnimJoint-HAnimSegment-HAnimSiteMFNode"
            },
            "-displacers": {
              "$ref": "#/definitions/-HAnimDisplacerMFNode"
            },
            "@limitOrientation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@llimit": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "anyOf": [
                {
                  "enum": [
                    "humanoid_root",
                    "sacroiliac",
                    "l_hip",
                    "l_knee",
                    "l_ankle",
                    "l_subtalar",
                    "l_midtarsal",
                    "l_metatarsal",
                    "r_hip",
                    "r_knee",
                    "r_ankle",
                    "r_subtalar",
                    "r_midtarsal",
                    "r_metatarsal",
                    "vl5",
                    "vl4",
                    "vl3",
                    "vl2",
                    "vl1",
                    "vt12",
                    "vt11",
                    "vt10",
                    "vt9",
                    "vt8",
                    "vt7",
                    "vt6",
                    "vt5",
                    "vt4",
                    "vt3",
                    "vt2",
                    "vt1",
                    "vc7",
                    "vc6",
                    "vc5",
                    "vc4",
                    "vc3",
                    "vc2",
                    "vc1",
                    "skullbase",
                    "l_eyelid_joint",
                    "r_eyelid_joint",
                    "l_eyeball_joint",
                    "r_eyeball_joint",
                    "l_eyebrow_joint",
                    "r_eyebrow_joint",
                    "temporomandibular",
                    "l_sternoclavicular",
                    "l_acromioclavicular",
                    "l_shoulder",
                    "l_elbow",
                    "l_wrist",
                    "l_thumb1",
                    "l_thumb2",
                    "l_thumb3",
                    "l_index0",
                    "l_index1",
                    "l_index2",
                    "l_index3",
                    "l_middle0",
                    "l_middle1",
                    "l_middle2",
                    "l_middle3",
                    "l_ring0",
                    "l_ring1",
                    "l_ring2",
                    "l_ring3",
                    "l_pinky0",
                    "l_pinky1",
                    "l_pinky2",
                    "l_pinky3",
                    "r_sternoclavicular",
                    "r_acromioclavicular",
                    "r_shoulder",
                    "r_elbow",
                    "r_wrist",
                    "r_thumb1",
                    "r_thumb2",
                    "r_thumb3",
                    "r_index0",
                    "r_index1",
                    "r_index2",
                    "r_index3",
                    "r_middle0",
                    "r_middle1",
                    "r_middle2",
                    "r_middle3",
                    "r_ring0",
                    "r_ring1",
                    "r_ring2",
                    "r_ring3",
                    "r_pinky0",
                    "r_pinky1",
                    "r_pinky2",
                    "r_pinky3"
                  ]
                },
                {
                  "type": "string"
                }
              ],
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@rotation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@scale": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "exclusiveMinimum": 0,
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "exclusiveMinimum": 0,
                "type": "number"
              }
            },
            "@scaleOrientation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@skinCoordIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "minimum": 0,
                "type": "integer"
              }
            },
            "@skinCoordWeight": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@stiffness": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@translation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@ulimit": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "HAnimSegment": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@centerOfMass": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "-displacers": {
              "$ref": "#/definitions/-HAnimDisplacerMFNode"
            },
            "@mass": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@momentsOfInertia": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "default": 0,
                "minimum": 0,
                "type": "number"
              }
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "anyOf": [
                {
                  "enum": [
                    "sacrum",
                    "pelvis",
                    "l_thigh",
                    "l_calf",
                    "l_hindfoot",
                    "l_midproximal",
                    "l_middistal",
                    "l_forefoot",
                    "r_thigh",
                    "r_calf",
                    "r_hindfoot",
                    "r_midproximal",
                    "r_middistal",
                    "r_forefoot",
                    "l5",
                    "l4",
                    "l3",
                    "l2",
                    "l1",
                    "t12",
                    "t11",
                    "t10",
                    "t9",
                    "t8",
                    "t7",
                    "t6",
                    "t5",
                    "t4",
                    "t3",
                    "t2",
                    "t1",
                    "c7",
                    "c6",
                    "c5",
                    "c4",
                    "c3",
                    "c2",
                    "c1",
                    "skull",
                    "l_eyelid",
                    "r_eyelid",
                    "l_eyeball",
                    "r_eyeball",
                    "l_eyebrow",
                    "r_eyebrow",
                    "jaw",
                    "l_clavicle",
                    "l_scapula",
                    "l_upperarm",
                    "l_forearm",
                    "l_hand",
                    "l_thumb_metacarpal",
                    "l_thumb_proximal",
                    "l_thumb_distal",
                    "l_index_metacarpal",
                    "l_index_proximal",
                    "l_index_middle",
                    "l_index_distal",
                    "l_middle_metacarpal",
                    "l_middle_proximal",
                    "l_middle_middle",
                    "l_middle_distal",
                    "l_ring_metacarpal",
                    "l_ring_proximal",
                    "l_ring_middle",
                    "l_ring_distal",
                    "l_pinky_metacarpal",
                    "l_pinky_proximal",
                    "l_pinky_middle",
                    "l_pinky_distal",
                    "r_clavicle",
                    "r_scapula",
                    "r_upperarm",
                    "r_forearm",
                    "r_hand",
                    "r_thumb_metacarpal",
                    "r_thumb_proximal",
                    "r_thumb_distal",
                    "r_index_metacarpal",
                    "r_index_proximal",
                    "r_index_middle",
                    "r_index_distal",
                    "r_middle_metacarpal",
                    "r_middle_proximal",
                    "r_middle_middle",
                    "r_middle_distal",
                    "r_ring_metacarpal",
                    "r_ring_proximal",
                    "r_ring_middle",
                    "r_ring_distal",
                    "r_pinky_metacarpal",
                    "r_pinky_proximal",
                    "r_pinky_middle",
                    "r_pinky_distal"
                  ]
                },
                {
                  "type": "string"
                }
              ],
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "HAnimSite": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@center": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "anyOf": [
                {
                  "enum": [
                    "sellion",
                    "r_infraorbitale",
                    "l_infraorbitale",
                    "supramenton",
                    "r_tragion",
                    "r_gonion",
                    "l_tragion",
                    "l_gonion",
                    "nuchale",
                    "r_clavicale",
                    "suprasternale",
                    "l_clavicale",
                    "r_thelion",
                    "l_thelion",
                    "substernale",
                    "r_rib10",
                    "r_asis",
                    "l_rib10",
                    "l_asis",
                    "r_iliocristale",
                    "r_trochanterion",
                    "l_iliocristale",
                    "l_trochanterion",
                    "cervicale",
                    "rib10_midspine",
                    "r_psis",
                    "l_psis",
                    "waist_preferred_post",
                    "r_acromion",
                    "r_axilla_ant",
                    "r_radial_styloid",
                    "r_axilla_post",
                    "r_olecranon",
                    "r_humeral_lateral_epicn",
                    "r_humeral_medial_epicn",
                    "r_radiale",
                    "r_metacarpal_pha2",
                    "r_dactylion",
                    "r_ulnar_styloid",
                    "r_metacarpal_pha5",
                    "l_acromion",
                    "l_axilla_ant",
                    "l_radial_styloid",
                    "l_axilla_post",
                    "l_olecranon",
                    "l_humeral_lateral_epicn",
                    "l_humeral_medial_epicn",
                    "l_radiale",
                    "l_metacarpal_pha2",
                    "l_dactylion",
                    "l_ulnar_styloid",
                    "l_metacarpal_pha5",
                    "r_knee_crease",
                    "r_femoral_lateral_epicn",
                    "r_femoral_medial_epicn",
                    "r_metatarsal_pha5",
                    "r_lateral_malleolus",
                    "r_medial_malleolus",
                    "r_sphyrion",
                    "r_metatarsal_pha1",
                    "r_calcaneous_post",
                    "r_digit2",
                    "l_knee_crease",
                    "l_femoral_lateral_epicn",
                    "l_femoral_medial_epicn",
                    "l_metatarsal_pha5",
                    "l_lateral_malleolus",
                    "l_medial_malleolus",
                    "l_sphyrion",
                    "l_metatarsal_pha1",
                    "l_calcaneous_post",
                    "l_digit2",
                    "crotch",
                    "r_neck_base",
                    "l_neck_base",
                    "navel"
                  ]
                },
                {
                  "type": "string"
                }
              ],
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@rotation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@scale": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "exclusiveMinimum": 0,
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "exclusiveMinimum": 0,
                "type": "number"
              }
            },
            "@scaleOrientation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@translation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "head": {
      "type": "object",
      "properties": {
        "-children": {
          "$ref": "#/definitions/-childStatements"
        },
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "component": {
          "$ref": "#/definitions/component"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "ImageTexture": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@repeatS": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@repeatT": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IMPORT": {
      "type": "object",
      "properties": {
        "-children": {
          "$ref": "#/definitions/-childStatements"
        },
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "@AS": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@importedDEF": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@inlineDEF": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        }
      },
      "required": [
        "@importedDEF",
        "@inlineDEF"
      ],
      "additionalProperties": false
    },
    "IndexedFaceSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "@colorIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 initializeOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@colorPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@convex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "@coordIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 initializeOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@creaseAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-normal": {
              "$ref": "#/definitions/-X3DNormalNodeSFNode"
            },
            "@normalIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 initializeOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@normalPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@set_colorIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@set_coordIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@set_normalIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@set_texCoordIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNodeSFNode"
            },
            "@texCoordIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 initializeOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IndexedLineSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "@colorIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 initializeOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@colorPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "@coordIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 initializeOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_colorIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@set_coordIndex": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IndexedTriangleFanSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "@colorPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "@index": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 initializeOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-normal": {
              "$ref": "#/definitions/-X3DNormalNodeSFNode"
            },
            "@normalPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@set_index": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNodeSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IndexedTriangleSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "@colorPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "@index": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 initializeOnly",
              "type": "array",
              "items": {
                "minimum": 0,
                "type": "integer"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-normal": {
              "$ref": "#/definitions/-X3DNormalNodeSFNode"
            },
            "@normalPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@set_index": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOnly",
              "type": "array",
              "items": {
                "minimum": 0,
                "type": "integer"
              }
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNodeSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IndexedTriangleStripSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "@colorPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "@index": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 initializeOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-normal": {
              "$ref": "#/definitions/-X3DNormalNodeSFNode"
            },
            "@normalPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@set_index": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOnly",
              "type": "array",
              "items": {
                "minimum": -1,
                "type": "integer"
              }
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNodeSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Inline": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@load": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IntegerSequencer": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@next": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@previous": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "$comment": "SFInt32 outputOnly",
              "type": "integer"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IntegerTrigger": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@integerKey": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": -1,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_boolean": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@triggerValue": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "$comment": "SFInt32 outputOnly",
              "type": "integer"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IS": {
      "type": "object",
      "properties": {
        "-children": {
          "$ref": "#/definitions/-childStatements"
        },
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "connect": {
          "$ref": "#/definitions/connect"
        }
      },
      "additionalProperties": false
    },
    "KeySensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@actionKeyPress": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "$comment": "SFInt32 outputOnly",
              "type": "integer"
            },
            "@actionKeyRelease": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "$comment": "SFInt32 outputOnly",
              "type": "integer"
            },
            "@altKey": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@controlKey": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@keyPress": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString outputOnly",
              "type": "string"
            },
            "@keyRelease": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString outputOnly",
              "type": "string"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@shiftKey": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LineProperties": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@applied": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@linetype": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 1,
              "default": 1,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@linewidthScaleFactor": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LineSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@vertexCount": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "minimum": 2,
                "type": "integer"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LoadSensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isLoaded": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@loadTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@progress": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@timeOut": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "-watchList": {
              "$ref": "#/definitions/-X3DUrlObjectMFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LOD": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@center": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@range": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Material": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ambientIntensity": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 0.2,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@diffuseColor": {
              "pattern": "^(\\s)*(([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0.8,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@emissiveColor": {
              "pattern": "^(\\s)*(([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@shininess": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 0.2,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@specularColor": {
              "pattern": "^(\\s)*(([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@transparency": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "meta": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "-children": {
            "$ref": "#/definitions/-childStatements"
          },
          "IS": {
            "$ref": "#/definitions/IS"
          },
          "@class": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@content": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@dir": {
            "pattern": "^(\\s|\\S)*$",
            "enum": [
              "rtl",
              "ltr"
            ],
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@http-equiv": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@lang": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@name": {
            "pattern": "^(\\s|\\S)*$",
            "anyOf": [
              {
                "enum": [
                  "accessRights",
                  "author",
                  "contributor",
                  "created",
                  "creator",
                  "description",
                  "disclaimer",
                  "drawing",
                  "error",
                  "generator",
                  "hint",
                  "identifier",
                  "Image",
                  "info",
                  "information",
                  "isVersionOf",
                  "keywords",
                  "license",
                  "mediator",
                  "modified",
                  "movie",
                  "MovingImage",
                  "original",
                  "photo",
                  "photograph",
                  "publisher",
                  "reference",
                  "requires",
                  "rights",
                  "robots",
                  "Sound",
                  "source",
                  "specificationSection",
                  "specificationUrl",
                  "subject",
                  "Text",
                  "title",
                  "TODO",
                  "translator",
                  "translated",
                  "version",
                  "warning"
                ]
              },
              {
                "type": "string"
              }
            ],
            "$comment": "SFString inputOutput",
            "type": "string"
          },
          "@scheme": {
            "pattern": "^(\\s|\\S)*$",
            "$comment": "SFString inputOutput",
            "type": "string"
          }
        },
        "required": [
          "@content",
          "@name"
        ],
        "additionalProperties": false
      }
    },
    "MetadataDouble": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@reference": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@value": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MetadataFloat": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@reference": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@value": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MetadataInteger": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@reference": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@value": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MetadataSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@reference": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "-value": {
              "$ref": "#/definitions/-X3DMetadataObjectMFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MetadataString": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@reference": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@value": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MovieTexture": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@description": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@duration_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": -1,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@elapsedTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isPaused": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@loop": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@pauseTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@pitch": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@repeatS": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@repeatT": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@resumeTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@speed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@startTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@stopTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MultiTexture": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@alpha": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@color": {
              "pattern": "^(\\s)*(([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@function": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "COMPLEMENT",
                      "ALPHAREPLICATE",
                      ""
                    ]
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "string"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@mode": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "ADD",
                      "ADDSIGNED",
                      "ADDSIGNED2X",
                      "ADDSMOOTH",
                      "BLENDCURRENTALPHA",
                      "BLENDDIFFUSEALPHA",
                      "BLENDFACTORALPHA",
                      "BLENDTEXTUREALPHA",
                      "DOTPRODUCT3",
                      "MODULATE",
                      "MODULATE2X",
                      "MODULATE4X",
                      "MODULATEALPHA_ADDCOLOR",
                      "MODULATEINVALPHA_ADDCOLOR",
                      "MODULATEINVCOLOR_ADDALPHA",
                      "OFF",
                      "REPLACE",
                      "SELECTARG1",
                      "SELECTARG2",
                      "SUBTRACT"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "string"
              }
            },
            "@source": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "DIFFUSE",
                      "FACTOR",
                      "SPECULAR",
                      ""
                    ]
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "string"
              }
            },
            "-texture": {
              "$ref": "#/definitions/-X3DTextureNodeMFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MultiTextureCoordinate": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNodeMFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MultiTextureTransform": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-textureTransform": {
              "$ref": "#/definitions/-X3DTextureTransformNodeMFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NavigationInfo": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@avatarSize": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": [
                {
                  "default": 0.25,
                  "minimum": 0,
                  "type": "number"
                },
                {
                  "default": 1.6,
                  "minimum": 0,
                  "type": "number"
                },
                {
                  "default": 0.75,
                  "minimum": 0,
                  "type": "number"
                }
              ],
              "additionalItems": {
                "minimum": 0,
                "type": "number"
              }
            },
            "@bindTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@headlight": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@isBound": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_bind": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@speed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@transitionComplete": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@transitionTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@transitionType": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "TELEPORT",
                      "LINEAR",
                      "ANIMATE"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ],
                "default": "LINEAR",
                "type": "string"
              }
            },
            "@type": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": [
                {
                  "enum": [
                    "ANY",
                    "WALK",
                    "EXAMINE",
                    "FLY",
                    "LOOKAT",
                    "NONE",
                    "EXPLORE"
                  ],
                  "default": "EXAMINE",
                  "type": "string"
                },
                {
                  "enum": [
                    "ANY",
                    "WALK",
                    "EXAMINE",
                    "FLY",
                    "LOOKAT",
                    "NONE",
                    "EXPLORE"
                  ],
                  "default": "ANY",
                  "type": "string"
                }
              ],
              "additionalItems": {
                "type": "string"
              }
            },
            "@visibilityLimit": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Normal": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@vector": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "maximum": 1,
                "minimum": -1,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NormalInterpolator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsCurve": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@closed": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-controlPoint": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "@knot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@order": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@tessellation": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@weight": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble inputOutput",
              "type": "array",
              "items": {
                "exclusiveMinimum": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsCurve2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@closed": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@controlPoint": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2d inputOutput",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@knot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@order": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@tessellation": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@weight": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble inputOutput",
              "type": "array",
              "items": {
                "exclusiveMinimum": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsOrientationInterpolator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-controlPoint": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "@knot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@order": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation outputOnly",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": {
                "type": "number"
              }
            },
            "@weight": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsPatchSurface": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-controlPoint": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode"
            },
            "@uClosed": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@uDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@uKnot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@uOrder": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@uTessellation": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@vClosed": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@vDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@vKnot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@vOrder": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@vTessellation": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@weight": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble inputOutput",
              "type": "array",
              "items": {
                "exclusiveMinimum": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsPositionInterpolator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-controlPoint": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "@knot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@order": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@weight": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "-geometry": {
              "$ref": "#/definitions/-X3DNurbsSurfaceGeometryNodeMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@tessellationScale": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsSurfaceInterpolator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-controlPoint": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@normal_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@position_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@set_fraction": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec2f inputOnly",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@uDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@uKnot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@uOrder": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@vDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@vKnot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@vOrder": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@weight": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsSweptSurface": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-crossSectionCurve": {
              "$ref": "#/definitions/-X3DNurbsControlCurveNodeSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-trajectoryCurve": {
              "$ref": "#/definitions/-NurbsCurveSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsSwungSurface": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-profileCurve": {
              "$ref": "#/definitions/-X3DNurbsControlCurveNodeSFNode"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-trajectoryCurve": {
              "$ref": "#/definitions/-X3DNurbsControlCurveNodeSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsTextureCoordinate": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@controlPoint": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@uDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@uKnot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@uOrder": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@vDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@vKnot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@vOrder": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@weight": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "exclusiveMinimum": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NurbsTrimmedSurface": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-controlPoint": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode"
            },
            "-trimmingContour": {
              "$ref": "#/definitions/-Contour2DMFNode"
            },
            "@uClosed": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@uDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@uKnot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@uOrder": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@uTessellation": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@vClosed": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@vDimension": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@vKnot": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble initializeOnly",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@vOrder": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": 2,
              "default": 3,
              "$comment": "SFInt32 initializeOnly",
              "type": "integer"
            },
            "@vTessellation": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@weight": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFDouble inputOutput",
              "type": "array",
              "items": {
                "exclusiveMinimum": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OrientationInterpolator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation outputOnly",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PixelTexture": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@image": {
              "pattern": "^\\s*([+]?(0|[1-9][0-9]*)([Ee][+]?[0-9]+)?\\s+){2}[+]?[0-4](\\s+(0x[0-9a-fA-F]{1,16}|[+]?(0|[1-9][0-9]*)([Ee][+]?[0-9]+)?))*\\s*$",
              "$comment": "SFImage inputOutput",
              "type": "array",
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@repeatS": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@repeatT": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PlaneSensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@autoOffset": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@axisRotation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@description": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isOver": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@maxPosition": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@minPosition": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@offset": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@trackPoint_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@translation_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PointLight": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ambientIntensity": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@attenuation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "minimum": 0,
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": [
                {
                  "default": 1,
                  "minimum": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "minimum": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "minimum": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@color": {
              "pattern": "^(\\s)*(([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@intensity": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@location": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@on": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@radius": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 100,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PointSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Polyline2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@lineSegments": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f initializeOnly",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Polypoint2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@point": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PositionInterpolator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PositionInterpolator2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec2f outputOnly",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ProtoBody": {
      "type": "object",
      "properties": {
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "-children": {
          "$ref": "#/definitions/-X3DNodeMFNode"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ProtoDeclare": {
      "type": "object",
      "properties": {
        "-children": {
          "$ref": "#/definitions/-childStatements"
        },
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "@appinfo": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@documentation": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@name": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "ProtoBody": {
          "$ref": "#/definitions/ProtoBody"
        },
        "ProtoInterface": {
          "$ref": "#/definitions/ProtoInterface"
        }
      },
      "required": [
        "@name"
      ],
      "additionalProperties": false
    },
    "ProtoInstance": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "fieldValue": {
              "$ref": "#/definitions/fieldValue"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@name": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ProtoInterface": {
      "type": "object",
      "properties": {
        "field": {
          "$ref": "#/definitions/field"
        },
        "-children": {
          "$ref": "#/definitions/-childStatements"
        },
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ProximitySensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@center": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@centerOfRotation_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@enterTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@exitTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@orientation_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation outputOnly",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": {
                "type": "number"
              }
            },
            "@position_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@size": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "minimum": 0,
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "minimum": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ReceiverPdu": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@address": {
              "pattern": "^(\\s|\\S)*$",
              "default": "localhost",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@applicationID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@entityID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@geoCoords": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isNetworkReader": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isNetworkWriter": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isRtpHeaderHeard": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isStandAlone": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@multicastRelayHost": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@multicastRelayPort": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@networkMode": {
              "pattern": "^(\\s|\\S)*$",
              "enum": [
                "standAlone",
                "networkReader",
                "networkWriter"
              ],
              "default": "standAlone",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@port": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@radioID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@readInterval": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0.1,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@receivedPower": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@receiverState": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@rtpHeaderExpected": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@siteID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@timestamp": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@transmitterApplicationID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@transmitterEntityID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@transmitterRadioID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@transmitterSiteID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@whichGeometry": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 1,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@writeInterval": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Rectangle2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@size": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "exclusiveMinimum": 0,
              "$comment": "SFVec2f initializeOnly",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "default": 2,
                "exclusiveMinimum": 0,
                "type": "number"
              }
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ROUTE": {
      "type": "object",
      "properties": {
        "-children": {
          "$ref": "#/definitions/-childStatements"
        },
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@fromField": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@fromNode": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@toField": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "@toNode": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        }
      },
      "required": [
        "@fromField",
        "@fromNode",
        "@toField",
        "@toNode"
      ],
      "additionalProperties": false
    },
    "ScalarInterpolator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@key": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@keyValue": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_fraction": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat inputOnly",
              "type": "number"
            },
            "@value_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Scene": {
      "type": "object",
      "properties": {
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "-children": {
          "$ref": "#/definitions/-X3DChildNode-X3DMetadataObjectMFNode"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Script": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "#sourceText": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            },
            "field": {
              "$ref": "#/definitions/field"
            },
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@directOutput": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@mustEvaluate": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@url": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "minItems": 1,
              "items": {
                "format": "uri-reference",
                "type": "string"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Shape": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-appearance": {
              "$ref": "#/definitions/-X3DAppearanceNodeSFNode"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "-geometry": {
              "$ref": "#/definitions/-X3DGeometryNodeSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SignalPdu": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@address": {
              "pattern": "^(\\s|\\S)*$",
              "default": "localhost",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@applicationID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@data": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "@dataLength": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@encodingScheme": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@entityID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@geoCoords": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isNetworkReader": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isNetworkWriter": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isRtpHeaderHeard": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isStandAlone": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@multicastRelayHost": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@multicastRelayPort": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@networkMode": {
              "pattern": "^(\\s|\\S)*$",
              "enum": [
                "standAlone",
                "networkReader",
                "networkWriter"
              ],
              "default": "standAlone",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@port": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@radioID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@readInterval": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0.1,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@rtpHeaderExpected": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@sampleRate": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@samples": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@siteID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@tdlType": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@timestamp": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@whichGeometry": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 1,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@writeInterval": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Sound": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@direction": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@intensity": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@location": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@maxBack": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 10,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@maxFront": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 10,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@minBack": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@minFront": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@priority": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "-source": {
              "$ref": "#/definitions/-X3DSoundSourceNodeSFNode"
            },
            "@spatialize": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Sphere": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@radius": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMinimum": 0,
              "default": 1,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SphereSensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@autoOffset": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@description": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isOver": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@offset": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@rotation_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation outputOnly",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": {
                "type": "number"
              }
            },
            "@trackPoint_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SpotLight": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ambientIntensity": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@attenuation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "minimum": 0,
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": [
                {
                  "default": 1,
                  "minimum": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "minimum": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "minimum": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@beamWidth": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1.570796,
              "exclusiveMinimum": 0,
              "default": 0.7854,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@color": {
              "pattern": "^(\\s)*(([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "$comment": "SFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@cutOffAngle": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1.570796,
              "exclusiveMinimum": 0,
              "default": 1.570796,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@direction": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": -1,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@intensity": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 1,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@location": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@on": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@radius": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 100,
              "$comment": "SFFloat initializeOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StaticGroup": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StringSensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@deletionAllowed": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@enteredText": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString outputOnly",
              "type": "string"
            },
            "@finalText": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString outputOnly",
              "type": "string"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Switch": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@whichChoice": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "minimum": -1,
              "default": -1,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Text": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-fontStyle": {
              "$ref": "#/definitions/-X3DFontStyleNodeSFNode"
            },
            "@length": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "minimum": 0,
                "type": "number"
              }
            },
            "@maxExtent": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@string": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TextureBackground": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-backTexture": {
              "$ref": "#/definitions/-X3DTexture2DNode-MultiTextureSFNode"
            },
            "@bindTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "-bottomTexture": {
              "$ref": "#/definitions/-X3DTexture2DNode-MultiTextureSFNode"
            },
            "-frontTexture": {
              "$ref": "#/definitions/-X3DTexture2DNode-MultiTextureSFNode"
            },
            "@groundAngle": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "maximum": 1.5708,
                "minimum": 0,
                "type": "number"
              }
            },
            "@groundColor": {
              "pattern": "^(\\s)*((([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "@isBound": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-leftTexture": {
              "$ref": "#/definitions/-X3DTexture2DNode-MultiTextureSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-rightTexture": {
              "$ref": "#/definitions/-X3DTexture2DNode-MultiTextureSFNode"
            },
            "@set_bind": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@skyAngle": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "maximum": 3.1416,
                "minimum": 0,
                "type": "number"
              }
            },
            "@skyColor": {
              "pattern": "^(\\s)*((([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)(\\s)+){2}([+-]?((0(\\.[0-9]*)?|\\.[0-9]+)|1(\\.0*)?)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFColor inputOutput",
              "type": "array",
              "minItems": 3,
              "items": {
                "default": 0,
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "-topTexture": {
              "$ref": "#/definitions/-X3DTexture2DNode-MultiTextureSFNode"
            },
            "@transparency": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "maximum": 1,
              "minimum": 0,
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TextureCoordinate": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@point": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TextureCoordinateGenerator": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@mode": {
              "pattern": "^(\\s|\\S)*$",
              "enum": [
                "SPHERE",
                "CAMERASPACENORMAL",
                "CAMERASPACEPOSITION",
                "CAMERASPACEREFLECTIONVECTOR",
                "SPHERE-LOCAL",
                "COORD",
                "COORD-EYE",
                "NOISE",
                "NOISE-EYE",
                "SPHERE-REFLECT",
                "SPHERE-REFLECT-LOCAL"
              ],
              "default": "SPHERE",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@parameter": {
              "pattern": "^(\\s)*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFFloat inputOutput",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TextureTransform": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@center": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@rotation": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@scale": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "default": 1,
                "type": "number"
              }
            },
            "@translation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TimeSensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@cycleInterval": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@cycleTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@elapsedTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@fraction_changed": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFFloat outputOnly",
              "type": "number"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isPaused": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@loop": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@pauseTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@resumeTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@startTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@stopTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@time": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TimeTrigger": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@set_boolean": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@triggerTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TouchSensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@description": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@hitNormal_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@hitPoint_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f outputOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "number"
              }
            },
            "@hitTexCoord_changed": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec2f outputOnly",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isOver": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@touchTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Transform": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@center": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "-children": {
              "$ref": "#/definitions/-X3DChildNodeMFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@rotation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@scale": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 1,
                "type": "number"
              }
            },
            "@scaleOrientation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation inputOutput",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@translation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TransmitterPdu": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@address": {
              "pattern": "^(\\s|\\S)*$",
              "default": "localhost",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@antennaLocation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@antennaPatternLength": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@antennaPatternType": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@applicationID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@bboxCenter": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@bboxSize": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": -1,
                "type": "number"
              }
            },
            "@cryptoKeyID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@cryptoSystem": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@entityID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@frequency": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@geoCoords": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3d inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@geoSystem": {
              "$ref": "#/definitions/@geoSystem"
            },
            "@inputSource": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isNetworkReader": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isNetworkWriter": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isRtpHeaderHeard": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@isStandAlone": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@lengthOfModulationParameters": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@modulationTypeDetail": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@modulationTypeMajor": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@modulationTypeSpreadSpectrum": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@modulationTypeSystem": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@multicastRelayHost": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@multicastRelayPort": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@networkMode": {
              "pattern": "^(\\s|\\S)*$",
              "enum": [
                "standAlone",
                "networkReader",
                "networkWriter"
              ],
              "default": "standAlone",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@port": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@power": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@radioEntityTypeCategory": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@radioEntityTypeCountry": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@radioEntityTypeDomain": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@radioEntityTypeKind": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@radioEntityTypeNomenclature": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@radioEntityTypeNomenclatureVersion": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@radioID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@readInterval": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 0.1,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@relativeAntennaLocation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@rtpHeaderExpected": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@siteID": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@timestamp": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@transmitFrequencyBandwidth": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "default": 0,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@transmitState": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 0,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@whichGeometry": {
              "pattern": "^(\\s)*[+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?(\\s)*$",
              "default": 1,
              "$comment": "SFInt32 inputOutput",
              "type": "integer"
            },
            "@writeInterval": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "minimum": 0,
              "default": 1,
              "$comment": "SFTime inputOutput",
              "type": "number"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TriangleFanSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "@colorPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "@fanCount": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "minimum": 3,
                "type": "integer"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-normal": {
              "$ref": "#/definitions/-X3DNormalNodeSFNode"
            },
            "@normalPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNodeSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TriangleSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "@colorPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-normal": {
              "$ref": "#/definitions/-X3DNormalNodeSFNode"
            },
            "@normalPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNodeSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TriangleSet2D": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": false,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@vertices": {
              "pattern": "^\\s*((([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){1}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*,?\\s*)*$",
              "$comment": "MFVec2f inputOutput",
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TriangleStripSet": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@ccw": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-color": {
              "$ref": "#/definitions/-X3DColorNodeSFNode"
            },
            "@colorPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "-coord": {
              "$ref": "#/definitions/-X3DCoordinateNodeSFNode"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "-normal": {
              "$ref": "#/definitions/-X3DNormalNodeSFNode"
            },
            "@normalPerVertex": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@solid": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool initializeOnly",
              "type": "boolean"
            },
            "@stripCount": {
              "pattern": "^(\\s)*([+-]?(0|[1-9][0-9]*)([Ee][+-]?[0-9]+)?\\s*,?\\s*)*$",
              "$comment": "MFInt32 inputOutput",
              "type": "array",
              "items": {
                "minimum": 3,
                "type": "integer"
              }
            },
            "-texCoord": {
              "$ref": "#/definitions/-X3DTextureCoordinateNodeSFNode"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Viewpoint": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@bindTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@centerOfRotation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@description": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@fieldOfView": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "exclusiveMaximum": 3.1416,
              "exclusiveMinimum": 0,
              "default": 0.7854,
              "$comment": "SFFloat inputOutput",
              "type": "number"
            },
            "@isBound": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "@jump": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@orientation": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){3}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFRotation initializeOnly",
              "type": "array",
              "minItems": 4,
              "maxItems": 4,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 1,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@position": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": [
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 0,
                  "type": "number"
                },
                {
                  "default": 10,
                  "type": "number"
                }
              ],
              "additionalItems": false
            },
            "@set_bind": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool inputOnly",
              "type": "boolean"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "VisibilitySensor": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@center": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "$comment": "SFVec3f inputOutput",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "type": "number"
              }
            },
            "@enabled": {
              "pattern": "^\\s*(true|false)\\s*$",
              "default": true,
              "$comment": "SFBool inputOutput",
              "type": "boolean"
            },
            "@enterTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@exitTime": {
              "pattern": "^(\\s)*([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)(\\s)*$",
              "$comment": "SFTime outputOnly",
              "type": "number"
            },
            "@isActive": {
              "pattern": "^\\s*(true|false)\\s*$",
              "$comment": "SFBool outputOnly",
              "type": "boolean"
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@size": {
              "pattern": "^\\s*(([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s+){2}([+-]?((0|[1-9][0-9]*)(\\.[0-9]*)?|\\.[0-9]+)([Ee][+-]?[0-9]+)?)\\s*$",
              "minimum": 0,
              "$comment": "SFVec3f initializeOnly",
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "default": 0,
                "minimum": 0,
                "type": "number"
              }
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "WorldInfo": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@class": {
              "type": "string"
            },
            "@USE": {
              "type": "string"
            },
            "-children": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "#comment": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "@USE"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "-children": {
              "$ref": "#/definitions/-childStatements"
            },
            "IS": {
              "$ref": "#/definitions/IS"
            },
            "@info": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "MFString inputOutput",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "-metadata": {
              "$ref": "#/definitions/-X3DMetadataObjectSFNode"
            },
            "@title": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@DEF": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            },
            "@class": {
              "pattern": "^(\\s|\\S)*$",
              "$comment": "SFString inputOutput",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "X3D": {
      "type": "object",
      "properties": {
        "@xsd:noNamespaceSchemaLocation": {
          "type": "string",
          "format": "uri"
        },
        "JSON schema": {
          "type": "string"
        },
        "encoding": {
          "type": "string",
          "enum": [
            "UTF-8",
            "UTF-16",
            "UTF-32"
          ]
        },
        "-children": {
          "$ref": "#/definitions/-childStatements"
        },
        "IS": {
          "$ref": "#/definitions/IS"
        },
        "@class": {
          "pattern": "^(\\s|\\S)*$",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "head": {
          "$ref": "#/definitions/head"
        },
        "@profile": {
          "pattern": "^(\\s|\\S)*$",
          "enum": [
            "Core",
            "Interchange",
            "Interactive",
            "Immersive",
            "MPEG4Interactive",
            "Full"
          ],
          "default": "Immersive",
          "$comment": "SFString inputOutput",
          "type": "string"
        },
        "Scene": {
          "$ref": "#/definitions/Scene"
        },
        "@version": {
          "pattern": "^(\\s|\\S)*$",
          "enum": [
            "3.0"
          ],
          "default": "3.3",
          "$comment": "SFString inputOutput",
          "type": "string"
        }
      },
      "required": [
        "@profile",
        "Scene",
        "encoding",
        "@version"
      ],
      "additionalProperties": false
    },
    "-X3DChildNodeMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "Background": {
            "$ref": "#/definitions/Background"
          },
          "TextureBackground": {
            "$ref": "#/definitions/TextureBackground"
          },
          "Fog": {
            "$ref": "#/definitions/Fog"
          },
          "GeoViewpoint": {
            "$ref": "#/definitions/GeoViewpoint"
          },
          "NavigationInfo": {
            "$ref": "#/definitions/NavigationInfo"
          },
          "Viewpoint": {
            "$ref": "#/definitions/Viewpoint"
          },
          "Anchor": {
            "$ref": "#/definitions/Anchor"
          },
          "Billboard": {
            "$ref": "#/definitions/Billboard"
          },
          "Collision": {
            "$ref": "#/definitions/Collision"
          },
          "EspduTransform": {
            "$ref": "#/definitions/EspduTransform"
          },
          "GeoLocation": {
            "$ref": "#/definitions/GeoLocation"
          },
          "Group": {
            "$ref": "#/definitions/Group"
          },
          "HAnimSegment": {
            "$ref": "#/definitions/HAnimSegment"
          },
          "HAnimSite": {
            "$ref": "#/definitions/HAnimSite"
          },
          "LOD": {
            "$ref": "#/definitions/LOD"
          },
          "Switch": {
            "$ref": "#/definitions/Switch"
          },
          "Transform": {
            "$ref": "#/definitions/Transform"
          },
          "GeoMetadata": {
            "$ref": "#/definitions/GeoMetadata"
          },
          "WorldInfo": {
            "$ref": "#/definitions/WorldInfo"
          },
          "ColorInterpolator": {
            "$ref": "#/definitions/ColorInterpolator"
          },
          "CoordinateInterpolator": {
            "$ref": "#/definitions/CoordinateInterpolator"
          },
          "CoordinateInterpolator2D": {
            "$ref": "#/definitions/CoordinateInterpolator2D"
          },
          "GeoPositionInterpolator": {
            "$ref": "#/definitions/GeoPositionInterpolator"
          },
          "NormalInterpolator": {
            "$ref": "#/definitions/NormalInterpolator"
          },
          "OrientationInterpolator": {
            "$ref": "#/definitions/OrientationInterpolator"
          },
          "PositionInterpolator": {
            "$ref": "#/definitions/PositionInterpolator"
          },
          "PositionInterpolator2D": {
            "$ref": "#/definitions/PositionInterpolator2D"
          },
          "ScalarInterpolator": {
            "$ref": "#/definitions/ScalarInterpolator"
          },
          "DirectionalLight": {
            "$ref": "#/definitions/DirectionalLight"
          },
          "PointLight": {
            "$ref": "#/definitions/PointLight"
          },
          "SpotLight": {
            "$ref": "#/definitions/SpotLight"
          },
          "Script": {
            "$ref": "#/definitions/Script"
          },
          "ProximitySensor": {
            "$ref": "#/definitions/ProximitySensor"
          },
          "VisibilitySensor": {
            "$ref": "#/definitions/VisibilitySensor"
          },
          "KeySensor": {
            "$ref": "#/definitions/KeySensor"
          },
          "StringSensor": {
            "$ref": "#/definitions/StringSensor"
          },
          "LoadSensor": {
            "$ref": "#/definitions/LoadSensor"
          },
          "ReceiverPdu": {
            "$ref": "#/definitions/ReceiverPdu"
          },
          "SignalPdu": {
            "$ref": "#/definitions/SignalPdu"
          },
          "TransmitterPdu": {
            "$ref": "#/definitions/TransmitterPdu"
          },
          "CylinderSensor": {
            "$ref": "#/definitions/CylinderSensor"
          },
          "PlaneSensor": {
            "$ref": "#/definitions/PlaneSensor"
          },
          "SphereSensor": {
            "$ref": "#/definitions/SphereSensor"
          },
          "GeoTouchSensor": {
            "$ref": "#/definitions/GeoTouchSensor"
          },
          "TouchSensor": {
            "$ref": "#/definitions/TouchSensor"
          },
          "TimeSensor": {
            "$ref": "#/definitions/TimeSensor"
          },
          "BooleanSequencer": {
            "$ref": "#/definitions/BooleanSequencer"
          },
          "IntegerSequencer": {
            "$ref": "#/definitions/IntegerSequencer"
          },
          "Shape": {
            "$ref": "#/definitions/Shape"
          },
          "Sound": {
            "$ref": "#/definitions/Sound"
          },
          "AudioClip": {
            "$ref": "#/definitions/AudioClip"
          },
          "MovieTexture": {
            "$ref": "#/definitions/MovieTexture"
          },
          "BooleanTrigger": {
            "$ref": "#/definitions/BooleanTrigger"
          },
          "IntegerTrigger": {
            "$ref": "#/definitions/IntegerTrigger"
          },
          "TimeTrigger": {
            "$ref": "#/definitions/TimeTrigger"
          },
          "BooleanFilter": {
            "$ref": "#/definitions/BooleanFilter"
          },
          "BooleanToggle": {
            "$ref": "#/definitions/BooleanToggle"
          },
          "ExternProtoDeclare": {
            "$ref": "#/definitions/ExternProtoDeclare"
          },
          "GeoLOD": {
            "$ref": "#/definitions/GeoLOD"
          },
          "HAnimHumanoid": {
            "$ref": "#/definitions/HAnimHumanoid"
          },
          "HAnimJoint": {
            "$ref": "#/definitions/HAnimJoint"
          },
          "Inline": {
            "$ref": "#/definitions/Inline"
          },
          "NurbsOrientationInterpolator": {
            "$ref": "#/definitions/NurbsOrientationInterpolator"
          },
          "NurbsPositionInterpolator": {
            "$ref": "#/definitions/NurbsPositionInterpolator"
          },
          "NurbsSet": {
            "$ref": "#/definitions/NurbsSet"
          },
          "NurbsSurfaceInterpolator": {
            "$ref": "#/definitions/NurbsSurfaceInterpolator"
          },
          "ProtoDeclare": {
            "$ref": "#/definitions/ProtoDeclare"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          },
          "ROUTE": {
            "$ref": "#/definitions/ROUTE"
          },
          "StaticGroup": {
            "$ref": "#/definitions/StaticGroup"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DMetadataObjectSFNode": {
      "type": "object",
      "properties": {
        "MetadataDouble": {
          "$ref": "#/definitions/MetadataDouble"
        },
        "MetadataFloat": {
          "$ref": "#/definitions/MetadataFloat"
        },
        "MetadataInteger": {
          "$ref": "#/definitions/MetadataInteger"
        },
        "MetadataSet": {
          "$ref": "#/definitions/MetadataSet"
        },
        "MetadataString": {
          "$ref": "#/definitions/MetadataString"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-FillPropertiesSFNode": {
      "type": "object",
      "properties": {
        "FillProperties": {
          "$ref": "#/definitions/FillProperties"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-LinePropertiesSFNode": {
      "type": "object",
      "properties": {
        "LineProperties": {
          "$ref": "#/definitions/LineProperties"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DMaterialNodeSFNode": {
      "type": "object",
      "properties": {
        "Material": {
          "$ref": "#/definitions/Material"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DTextureNodeSFNode": {
      "type": "object",
      "properties": {
        "ImageTexture": {
          "$ref": "#/definitions/ImageTexture"
        },
        "MovieTexture": {
          "$ref": "#/definitions/MovieTexture"
        },
        "PixelTexture": {
          "$ref": "#/definitions/PixelTexture"
        },
        "MultiTexture": {
          "$ref": "#/definitions/MultiTexture"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DTextureTransformNodeSFNode": {
      "type": "object",
      "properties": {
        "MultiTextureTransform": {
          "$ref": "#/definitions/MultiTextureTransform"
        },
        "TextureTransform": {
          "$ref": "#/definitions/TextureTransform"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DChildNodeSFNode": {
      "type": "object",
      "properties": {
        "Background": {
          "$ref": "#/definitions/Background"
        },
        "TextureBackground": {
          "$ref": "#/definitions/TextureBackground"
        },
        "Fog": {
          "$ref": "#/definitions/Fog"
        },
        "GeoViewpoint": {
          "$ref": "#/definitions/GeoViewpoint"
        },
        "NavigationInfo": {
          "$ref": "#/definitions/NavigationInfo"
        },
        "Viewpoint": {
          "$ref": "#/definitions/Viewpoint"
        },
        "Anchor": {
          "$ref": "#/definitions/Anchor"
        },
        "Billboard": {
          "$ref": "#/definitions/Billboard"
        },
        "Collision": {
          "$ref": "#/definitions/Collision"
        },
        "EspduTransform": {
          "$ref": "#/definitions/EspduTransform"
        },
        "GeoLocation": {
          "$ref": "#/definitions/GeoLocation"
        },
        "Group": {
          "$ref": "#/definitions/Group"
        },
        "HAnimSegment": {
          "$ref": "#/definitions/HAnimSegment"
        },
        "HAnimSite": {
          "$ref": "#/definitions/HAnimSite"
        },
        "LOD": {
          "$ref": "#/definitions/LOD"
        },
        "Switch": {
          "$ref": "#/definitions/Switch"
        },
        "Transform": {
          "$ref": "#/definitions/Transform"
        },
        "GeoMetadata": {
          "$ref": "#/definitions/GeoMetadata"
        },
        "WorldInfo": {
          "$ref": "#/definitions/WorldInfo"
        },
        "ColorInterpolator": {
          "$ref": "#/definitions/ColorInterpolator"
        },
        "CoordinateInterpolator": {
          "$ref": "#/definitions/CoordinateInterpolator"
        },
        "CoordinateInterpolator2D": {
          "$ref": "#/definitions/CoordinateInterpolator2D"
        },
        "GeoPositionInterpolator": {
          "$ref": "#/definitions/GeoPositionInterpolator"
        },
        "NormalInterpolator": {
          "$ref": "#/definitions/NormalInterpolator"
        },
        "OrientationInterpolator": {
          "$ref": "#/definitions/OrientationInterpolator"
        },
        "PositionInterpolator": {
          "$ref": "#/definitions/PositionInterpolator"
        },
        "PositionInterpolator2D": {
          "$ref": "#/definitions/PositionInterpolator2D"
        },
        "ScalarInterpolator": {
          "$ref": "#/definitions/ScalarInterpolator"
        },
        "DirectionalLight": {
          "$ref": "#/definitions/DirectionalLight"
        },
        "PointLight": {
          "$ref": "#/definitions/PointLight"
        },
        "SpotLight": {
          "$ref": "#/definitions/SpotLight"
        },
        "Script": {
          "$ref": "#/definitions/Script"
        },
        "ProximitySensor": {
          "$ref": "#/definitions/ProximitySensor"
        },
        "VisibilitySensor": {
          "$ref": "#/definitions/VisibilitySensor"
        },
        "KeySensor": {
          "$ref": "#/definitions/KeySensor"
        },
        "StringSensor": {
          "$ref": "#/definitions/StringSensor"
        },
        "LoadSensor": {
          "$ref": "#/definitions/LoadSensor"
        },
        "ReceiverPdu": {
          "$ref": "#/definitions/ReceiverPdu"
        },
        "SignalPdu": {
          "$ref": "#/definitions/SignalPdu"
        },
        "TransmitterPdu": {
          "$ref": "#/definitions/TransmitterPdu"
        },
        "CylinderSensor": {
          "$ref": "#/definitions/CylinderSensor"
        },
        "PlaneSensor": {
          "$ref": "#/definitions/PlaneSensor"
        },
        "SphereSensor": {
          "$ref": "#/definitions/SphereSensor"
        },
        "GeoTouchSensor": {
          "$ref": "#/definitions/GeoTouchSensor"
        },
        "TouchSensor": {
          "$ref": "#/definitions/TouchSensor"
        },
        "TimeSensor": {
          "$ref": "#/definitions/TimeSensor"
        },
        "BooleanSequencer": {
          "$ref": "#/definitions/BooleanSequencer"
        },
        "IntegerSequencer": {
          "$ref": "#/definitions/IntegerSequencer"
        },
        "Shape": {
          "$ref": "#/definitions/Shape"
        },
        "Sound": {
          "$ref": "#/definitions/Sound"
        },
        "AudioClip": {
          "$ref": "#/definitions/AudioClip"
        },
        "MovieTexture": {
          "$ref": "#/definitions/MovieTexture"
        },
        "BooleanTrigger": {
          "$ref": "#/definitions/BooleanTrigger"
        },
        "IntegerTrigger": {
          "$ref": "#/definitions/IntegerTrigger"
        },
        "TimeTrigger": {
          "$ref": "#/definitions/TimeTrigger"
        },
        "BooleanFilter": {
          "$ref": "#/definitions/BooleanFilter"
        },
        "BooleanToggle": {
          "$ref": "#/definitions/BooleanToggle"
        },
        "ExternProtoDeclare": {
          "$ref": "#/definitions/ExternProtoDeclare"
        },
        "GeoLOD": {
          "$ref": "#/definitions/GeoLOD"
        },
        "HAnimHumanoid": {
          "$ref": "#/definitions/HAnimHumanoid"
        },
        "HAnimJoint": {
          "$ref": "#/definitions/HAnimJoint"
        },
        "Inline": {
          "$ref": "#/definitions/Inline"
        },
        "NurbsOrientationInterpolator": {
          "$ref": "#/definitions/NurbsOrientationInterpolator"
        },
        "NurbsPositionInterpolator": {
          "$ref": "#/definitions/NurbsPositionInterpolator"
        },
        "NurbsSet": {
          "$ref": "#/definitions/NurbsSet"
        },
        "NurbsSurfaceInterpolator": {
          "$ref": "#/definitions/NurbsSurfaceInterpolator"
        },
        "ProtoDeclare": {
          "$ref": "#/definitions/ProtoDeclare"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        },
        "ROUTE": {
          "$ref": "#/definitions/ROUTE"
        },
        "StaticGroup": {
          "$ref": "#/definitions/StaticGroup"
        }
      },
      "additionalProperties": false
    },
    "-NurbsCurve2D-ContourPolyline2DMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "NurbsCurve2D": {
            "$ref": "#/definitions/NurbsCurve2D"
          },
          "ContourPolyline2D": {
            "$ref": "#/definitions/ContourPolyline2D"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DColorNodeSFNode": {
      "type": "object",
      "properties": {
        "Color": {
          "$ref": "#/definitions/Color"
        },
        "ColorRGBA": {
          "$ref": "#/definitions/ColorRGBA"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DNormalNodeSFNode": {
      "type": "object",
      "properties": {
        "Normal": {
          "$ref": "#/definitions/Normal"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DTextureCoordinateNodeSFNode": {
      "type": "object",
      "properties": {
        "MultiTextureCoordinate": {
          "$ref": "#/definitions/MultiTextureCoordinate"
        },
        "TextureCoordinate": {
          "$ref": "#/definitions/TextureCoordinate"
        },
        "TextureCoordinateGenerator": {
          "$ref": "#/definitions/TextureCoordinateGenerator"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DNodeMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "Material": {
            "$ref": "#/definitions/Material"
          },
          "ImageTexture": {
            "$ref": "#/definitions/ImageTexture"
          },
          "MovieTexture": {
            "$ref": "#/definitions/MovieTexture"
          },
          "PixelTexture": {
            "$ref": "#/definitions/PixelTexture"
          },
          "MultiTexture": {
            "$ref": "#/definitions/MultiTexture"
          },
          "MultiTextureTransform": {
            "$ref": "#/definitions/MultiTextureTransform"
          },
          "TextureTransform": {
            "$ref": "#/definitions/TextureTransform"
          },
          "FillProperties": {
            "$ref": "#/definitions/FillProperties"
          },
          "LineProperties": {
            "$ref": "#/definitions/LineProperties"
          },
          "Appearance": {
            "$ref": "#/definitions/Appearance"
          },
          "Background": {
            "$ref": "#/definitions/Background"
          },
          "TextureBackground": {
            "$ref": "#/definitions/TextureBackground"
          },
          "Fog": {
            "$ref": "#/definitions/Fog"
          },
          "GeoViewpoint": {
            "$ref": "#/definitions/GeoViewpoint"
          },
          "NavigationInfo": {
            "$ref": "#/definitions/NavigationInfo"
          },
          "Viewpoint": {
            "$ref": "#/definitions/Viewpoint"
          },
          "Anchor": {
            "$ref": "#/definitions/Anchor"
          },
          "Billboard": {
            "$ref": "#/definitions/Billboard"
          },
          "Collision": {
            "$ref": "#/definitions/Collision"
          },
          "EspduTransform": {
            "$ref": "#/definitions/EspduTransform"
          },
          "GeoLocation": {
            "$ref": "#/definitions/GeoLocation"
          },
          "Group": {
            "$ref": "#/definitions/Group"
          },
          "HAnimSegment": {
            "$ref": "#/definitions/HAnimSegment"
          },
          "HAnimSite": {
            "$ref": "#/definitions/HAnimSite"
          },
          "LOD": {
            "$ref": "#/definitions/LOD"
          },
          "Switch": {
            "$ref": "#/definitions/Switch"
          },
          "Transform": {
            "$ref": "#/definitions/Transform"
          },
          "GeoMetadata": {
            "$ref": "#/definitions/GeoMetadata"
          },
          "WorldInfo": {
            "$ref": "#/definitions/WorldInfo"
          },
          "ColorInterpolator": {
            "$ref": "#/definitions/ColorInterpolator"
          },
          "CoordinateInterpolator": {
            "$ref": "#/definitions/CoordinateInterpolator"
          },
          "CoordinateInterpolator2D": {
            "$ref": "#/definitions/CoordinateInterpolator2D"
          },
          "GeoPositionInterpolator": {
            "$ref": "#/definitions/GeoPositionInterpolator"
          },
          "NormalInterpolator": {
            "$ref": "#/definitions/NormalInterpolator"
          },
          "OrientationInterpolator": {
            "$ref": "#/definitions/OrientationInterpolator"
          },
          "PositionInterpolator": {
            "$ref": "#/definitions/PositionInterpolator"
          },
          "PositionInterpolator2D": {
            "$ref": "#/definitions/PositionInterpolator2D"
          },
          "ScalarInterpolator": {
            "$ref": "#/definitions/ScalarInterpolator"
          },
          "DirectionalLight": {
            "$ref": "#/definitions/DirectionalLight"
          },
          "PointLight": {
            "$ref": "#/definitions/PointLight"
          },
          "SpotLight": {
            "$ref": "#/definitions/SpotLight"
          },
          "Script": {
            "$ref": "#/definitions/Script"
          },
          "ProximitySensor": {
            "$ref": "#/definitions/ProximitySensor"
          },
          "VisibilitySensor": {
            "$ref": "#/definitions/VisibilitySensor"
          },
          "KeySensor": {
            "$ref": "#/definitions/KeySensor"
          },
          "StringSensor": {
            "$ref": "#/definitions/StringSensor"
          },
          "LoadSensor": {
            "$ref": "#/definitions/LoadSensor"
          },
          "ReceiverPdu": {
            "$ref": "#/definitions/ReceiverPdu"
          },
          "SignalPdu": {
            "$ref": "#/definitions/SignalPdu"
          },
          "TransmitterPdu": {
            "$ref": "#/definitions/TransmitterPdu"
          },
          "CylinderSensor": {
            "$ref": "#/definitions/CylinderSensor"
          },
          "PlaneSensor": {
            "$ref": "#/definitions/PlaneSensor"
          },
          "SphereSensor": {
            "$ref": "#/definitions/SphereSensor"
          },
          "GeoTouchSensor": {
            "$ref": "#/definitions/GeoTouchSensor"
          },
          "TouchSensor": {
            "$ref": "#/definitions/TouchSensor"
          },
          "TimeSensor": {
            "$ref": "#/definitions/TimeSensor"
          },
          "BooleanSequencer": {
            "$ref": "#/definitions/BooleanSequencer"
          },
          "IntegerSequencer": {
            "$ref": "#/definitions/IntegerSequencer"
          },
          "Shape": {
            "$ref": "#/definitions/Shape"
          },
          "Sound": {
            "$ref": "#/definitions/Sound"
          },
          "AudioClip": {
            "$ref": "#/definitions/AudioClip"
          },
          "BooleanTrigger": {
            "$ref": "#/definitions/BooleanTrigger"
          },
          "IntegerTrigger": {
            "$ref": "#/definitions/IntegerTrigger"
          },
          "TimeTrigger": {
            "$ref": "#/definitions/TimeTrigger"
          },
          "BooleanFilter": {
            "$ref": "#/definitions/BooleanFilter"
          },
          "BooleanToggle": {
            "$ref": "#/definitions/BooleanToggle"
          },
          "ExternProtoDeclare": {
            "$ref": "#/definitions/ExternProtoDeclare"
          },
          "GeoLOD": {
            "$ref": "#/definitions/GeoLOD"
          },
          "HAnimHumanoid": {
            "$ref": "#/definitions/HAnimHumanoid"
          },
          "HAnimJoint": {
            "$ref": "#/definitions/HAnimJoint"
          },
          "Inline": {
            "$ref": "#/definitions/Inline"
          },
          "NurbsOrientationInterpolator": {
            "$ref": "#/definitions/NurbsOrientationInterpolator"
          },
          "NurbsPositionInterpolator": {
            "$ref": "#/definitions/NurbsPositionInterpolator"
          },
          "NurbsSet": {
            "$ref": "#/definitions/NurbsSet"
          },
          "NurbsSurfaceInterpolator": {
            "$ref": "#/definitions/NurbsSurfaceInterpolator"
          },
          "ProtoDeclare": {
            "$ref": "#/definitions/ProtoDeclare"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          },
          "ROUTE": {
            "$ref": "#/definitions/ROUTE"
          },
          "StaticGroup": {
            "$ref": "#/definitions/StaticGroup"
          },
          "FontStyle": {
            "$ref": "#/definitions/FontStyle"
          },
          "Color": {
            "$ref": "#/definitions/Color"
          },
          "ColorRGBA": {
            "$ref": "#/definitions/ColorRGBA"
          },
          "Coordinate": {
            "$ref": "#/definitions/Coordinate"
          },
          "CoordinateDouble": {
            "$ref": "#/definitions/CoordinateDouble"
          },
          "GeoCoordinate": {
            "$ref": "#/definitions/GeoCoordinate"
          },
          "Normal": {
            "$ref": "#/definitions/Normal"
          },
          "MultiTextureCoordinate": {
            "$ref": "#/definitions/MultiTextureCoordinate"
          },
          "TextureCoordinate": {
            "$ref": "#/definitions/TextureCoordinate"
          },
          "TextureCoordinateGenerator": {
            "$ref": "#/definitions/TextureCoordinateGenerator"
          },
          "HAnimDisplacer": {
            "$ref": "#/definitions/HAnimDisplacer"
          },
          "IndexedFaceSet": {
            "$ref": "#/definitions/IndexedFaceSet"
          },
          "IndexedTriangleFanSet": {
            "$ref": "#/definitions/IndexedTriangleFanSet"
          },
          "IndexedTriangleSet": {
            "$ref": "#/definitions/IndexedTriangleSet"
          },
          "IndexedTriangleStripSet": {
            "$ref": "#/definitions/IndexedTriangleStripSet"
          },
          "TriangleFanSet": {
            "$ref": "#/definitions/TriangleFanSet"
          },
          "TriangleSet": {
            "$ref": "#/definitions/TriangleSet"
          },
          "TriangleStripSet": {
            "$ref": "#/definitions/TriangleStripSet"
          },
          "NurbsPatchSurface": {
            "$ref": "#/definitions/NurbsPatchSurface"
          },
          "NurbsTrimmedSurface": {
            "$ref": "#/definitions/NurbsTrimmedSurface"
          },
          "NurbsCurve": {
            "$ref": "#/definitions/NurbsCurve"
          },
          "NurbsSweptSurface": {
            "$ref": "#/definitions/NurbsSweptSurface"
          },
          "NurbsSwungSurface": {
            "$ref": "#/definitions/NurbsSwungSurface"
          },
          "Arc2D": {
            "$ref": "#/definitions/Arc2D"
          },
          "ArcClose2D": {
            "$ref": "#/definitions/ArcClose2D"
          },
          "Box": {
            "$ref": "#/definitions/Box"
          },
          "Circle2D": {
            "$ref": "#/definitions/Circle2D"
          },
          "Cone": {
            "$ref": "#/definitions/Cone"
          },
          "Cylinder": {
            "$ref": "#/definitions/Cylinder"
          },
          "Disk2D": {
            "$ref": "#/definitions/Disk2D"
          },
          "ElevationGrid": {
            "$ref": "#/definitions/ElevationGrid"
          },
          "Extrusion": {
            "$ref": "#/definitions/Extrusion"
          },
          "GeoElevationGrid": {
            "$ref": "#/definitions/GeoElevationGrid"
          },
          "IndexedLineSet": {
            "$ref": "#/definitions/IndexedLineSet"
          },
          "LineSet": {
            "$ref": "#/definitions/LineSet"
          },
          "PointSet": {
            "$ref": "#/definitions/PointSet"
          },
          "Polyline2D": {
            "$ref": "#/definitions/Polyline2D"
          },
          "Polypoint2D": {
            "$ref": "#/definitions/Polypoint2D"
          },
          "Rectangle2D": {
            "$ref": "#/definitions/Rectangle2D"
          },
          "Sphere": {
            "$ref": "#/definitions/Sphere"
          },
          "Text": {
            "$ref": "#/definitions/Text"
          },
          "TriangleSet2D": {
            "$ref": "#/definitions/TriangleSet2D"
          },
          "ContourPolyline2D": {
            "$ref": "#/definitions/ContourPolyline2D"
          },
          "NurbsCurve2D": {
            "$ref": "#/definitions/NurbsCurve2D"
          },
          "Contour2D": {
            "$ref": "#/definitions/Contour2D"
          },
          "GeoOrigin": {
            "$ref": "#/definitions/GeoOrigin"
          },
          "MetadataDouble": {
            "$ref": "#/definitions/MetadataDouble"
          },
          "MetadataFloat": {
            "$ref": "#/definitions/MetadataFloat"
          },
          "MetadataInteger": {
            "$ref": "#/definitions/MetadataInteger"
          },
          "MetadataSet": {
            "$ref": "#/definitions/MetadataSet"
          },
          "MetadataString": {
            "$ref": "#/definitions/MetadataString"
          },
          "NurbsTextureCoordinate": {
            "$ref": "#/definitions/NurbsTextureCoordinate"
          }
        },
        "additionalProperties": false
      }
    },
    "-GeoOriginSFNode": {
      "type": "object",
      "properties": {
        "GeoOrigin": {
          "$ref": "#/definitions/GeoOrigin"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-HAnimJointMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "HAnimJoint": {
            "$ref": "#/definitions/HAnimJoint"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-HAnimSegmentMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "HAnimSegment": {
            "$ref": "#/definitions/HAnimSegment"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-HAnimSiteMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "HAnimSite": {
            "$ref": "#/definitions/HAnimSite"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-HAnimJoint-HAnimSiteMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "HAnimJoint": {
            "$ref": "#/definitions/HAnimJoint"
          },
          "HAnimSite": {
            "$ref": "#/definitions/HAnimSite"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-Group-Transform-Shape-IndexedFaceSetMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "Group": {
            "$ref": "#/definitions/Group"
          },
          "Transform": {
            "$ref": "#/definitions/Transform"
          },
          "Shape": {
            "$ref": "#/definitions/Shape"
          },
          "IndexedFaceSet": {
            "$ref": "#/definitions/IndexedFaceSet"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DCoordinateNodeSFNode": {
      "type": "object",
      "properties": {
        "Coordinate": {
          "$ref": "#/definitions/Coordinate"
        },
        "CoordinateDouble": {
          "$ref": "#/definitions/CoordinateDouble"
        },
        "GeoCoordinate": {
          "$ref": "#/definitions/GeoCoordinate"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-HAnimJoint-HAnimSegment-HAnimSiteMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "HAnimJoint": {
            "$ref": "#/definitions/HAnimJoint"
          },
          "HAnimSegment": {
            "$ref": "#/definitions/HAnimSegment"
          },
          "HAnimSite": {
            "$ref": "#/definitions/HAnimSite"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-HAnimDisplacerMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "HAnimDisplacer": {
            "$ref": "#/definitions/HAnimDisplacer"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DUrlObjectMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "Script": {
            "$ref": "#/definitions/Script"
          },
          "Anchor": {
            "$ref": "#/definitions/Anchor"
          },
          "AudioClip": {
            "$ref": "#/definitions/AudioClip"
          },
          "GeoMetadata": {
            "$ref": "#/definitions/GeoMetadata"
          },
          "ImageTexture": {
            "$ref": "#/definitions/ImageTexture"
          },
          "Inline": {
            "$ref": "#/definitions/Inline"
          },
          "MovieTexture": {
            "$ref": "#/definitions/MovieTexture"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DMetadataObjectMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "MetadataDouble": {
            "$ref": "#/definitions/MetadataDouble"
          },
          "MetadataFloat": {
            "$ref": "#/definitions/MetadataFloat"
          },
          "MetadataInteger": {
            "$ref": "#/definitions/MetadataInteger"
          },
          "MetadataSet": {
            "$ref": "#/definitions/MetadataSet"
          },
          "MetadataString": {
            "$ref": "#/definitions/MetadataString"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DTextureNodeMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "ImageTexture": {
            "$ref": "#/definitions/ImageTexture"
          },
          "MovieTexture": {
            "$ref": "#/definitions/MovieTexture"
          },
          "PixelTexture": {
            "$ref": "#/definitions/PixelTexture"
          },
          "MultiTexture": {
            "$ref": "#/definitions/MultiTexture"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DTextureCoordinateNodeMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "MultiTextureCoordinate": {
            "$ref": "#/definitions/MultiTextureCoordinate"
          },
          "TextureCoordinate": {
            "$ref": "#/definitions/TextureCoordinate"
          },
          "TextureCoordinateGenerator": {
            "$ref": "#/definitions/TextureCoordinateGenerator"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DTextureTransformNodeMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "MultiTextureTransform": {
            "$ref": "#/definitions/MultiTextureTransform"
          },
          "TextureTransform": {
            "$ref": "#/definitions/TextureTransform"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode": {
      "type": "object",
      "properties": {
        "MultiTextureCoordinate": {
          "$ref": "#/definitions/MultiTextureCoordinate"
        },
        "TextureCoordinate": {
          "$ref": "#/definitions/TextureCoordinate"
        },
        "TextureCoordinateGenerator": {
          "$ref": "#/definitions/TextureCoordinateGenerator"
        },
        "NurbsTextureCoordinate": {
          "$ref": "#/definitions/NurbsTextureCoordinate"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DNurbsSurfaceGeometryNodeMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "NurbsPatchSurface": {
            "$ref": "#/definitions/NurbsPatchSurface"
          },
          "NurbsTrimmedSurface": {
            "$ref": "#/definitions/NurbsTrimmedSurface"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DNurbsControlCurveNodeSFNode": {
      "type": "object",
      "properties": {
        "ContourPolyline2D": {
          "$ref": "#/definitions/ContourPolyline2D"
        },
        "NurbsCurve2D": {
          "$ref": "#/definitions/NurbsCurve2D"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-NurbsCurveSFNode": {
      "type": "object",
      "properties": {
        "NurbsCurve": {
          "$ref": "#/definitions/NurbsCurve"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-Contour2DMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "Contour2D": {
            "$ref": "#/definitions/Contour2D"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DChildNode-X3DMetadataObjectMFNode": {
      "$comment": "MFNode inputOutput",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "#comment": {
            "type": "string"
          },
          "Background": {
            "$ref": "#/definitions/Background"
          },
          "TextureBackground": {
            "$ref": "#/definitions/TextureBackground"
          },
          "Fog": {
            "$ref": "#/definitions/Fog"
          },
          "GeoViewpoint": {
            "$ref": "#/definitions/GeoViewpoint"
          },
          "NavigationInfo": {
            "$ref": "#/definitions/NavigationInfo"
          },
          "Viewpoint": {
            "$ref": "#/definitions/Viewpoint"
          },
          "Anchor": {
            "$ref": "#/definitions/Anchor"
          },
          "Billboard": {
            "$ref": "#/definitions/Billboard"
          },
          "Collision": {
            "$ref": "#/definitions/Collision"
          },
          "EspduTransform": {
            "$ref": "#/definitions/EspduTransform"
          },
          "GeoLocation": {
            "$ref": "#/definitions/GeoLocation"
          },
          "Group": {
            "$ref": "#/definitions/Group"
          },
          "HAnimSegment": {
            "$ref": "#/definitions/HAnimSegment"
          },
          "HAnimSite": {
            "$ref": "#/definitions/HAnimSite"
          },
          "LOD": {
            "$ref": "#/definitions/LOD"
          },
          "Switch": {
            "$ref": "#/definitions/Switch"
          },
          "Transform": {
            "$ref": "#/definitions/Transform"
          },
          "GeoMetadata": {
            "$ref": "#/definitions/GeoMetadata"
          },
          "WorldInfo": {
            "$ref": "#/definitions/WorldInfo"
          },
          "ColorInterpolator": {
            "$ref": "#/definitions/ColorInterpolator"
          },
          "CoordinateInterpolator": {
            "$ref": "#/definitions/CoordinateInterpolator"
          },
          "CoordinateInterpolator2D": {
            "$ref": "#/definitions/CoordinateInterpolator2D"
          },
          "GeoPositionInterpolator": {
            "$ref": "#/definitions/GeoPositionInterpolator"
          },
          "NormalInterpolator": {
            "$ref": "#/definitions/NormalInterpolator"
          },
          "OrientationInterpolator": {
            "$ref": "#/definitions/OrientationInterpolator"
          },
          "PositionInterpolator": {
            "$ref": "#/definitions/PositionInterpolator"
          },
          "PositionInterpolator2D": {
            "$ref": "#/definitions/PositionInterpolator2D"
          },
          "ScalarInterpolator": {
            "$ref": "#/definitions/ScalarInterpolator"
          },
          "DirectionalLight": {
            "$ref": "#/definitions/DirectionalLight"
          },
          "PointLight": {
            "$ref": "#/definitions/PointLight"
          },
          "SpotLight": {
            "$ref": "#/definitions/SpotLight"
          },
          "Script": {
            "$ref": "#/definitions/Script"
          },
          "ProximitySensor": {
            "$ref": "#/definitions/ProximitySensor"
          },
          "VisibilitySensor": {
            "$ref": "#/definitions/VisibilitySensor"
          },
          "KeySensor": {
            "$ref": "#/definitions/KeySensor"
          },
          "StringSensor": {
            "$ref": "#/definitions/StringSensor"
          },
          "LoadSensor": {
            "$ref": "#/definitions/LoadSensor"
          },
          "ReceiverPdu": {
            "$ref": "#/definitions/ReceiverPdu"
          },
          "SignalPdu": {
            "$ref": "#/definitions/SignalPdu"
          },
          "TransmitterPdu": {
            "$ref": "#/definitions/TransmitterPdu"
          },
          "CylinderSensor": {
            "$ref": "#/definitions/CylinderSensor"
          },
          "PlaneSensor": {
            "$ref": "#/definitions/PlaneSensor"
          },
          "SphereSensor": {
            "$ref": "#/definitions/SphereSensor"
          },
          "GeoTouchSensor": {
            "$ref": "#/definitions/GeoTouchSensor"
          },
          "TouchSensor": {
            "$ref": "#/definitions/TouchSensor"
          },
          "TimeSensor": {
            "$ref": "#/definitions/TimeSensor"
          },
          "BooleanSequencer": {
            "$ref": "#/definitions/BooleanSequencer"
          },
          "IntegerSequencer": {
            "$ref": "#/definitions/IntegerSequencer"
          },
          "Shape": {
            "$ref": "#/definitions/Shape"
          },
          "Sound": {
            "$ref": "#/definitions/Sound"
          },
          "AudioClip": {
            "$ref": "#/definitions/AudioClip"
          },
          "MovieTexture": {
            "$ref": "#/definitions/MovieTexture"
          },
          "BooleanTrigger": {
            "$ref": "#/definitions/BooleanTrigger"
          },
          "IntegerTrigger": {
            "$ref": "#/definitions/IntegerTrigger"
          },
          "TimeTrigger": {
            "$ref": "#/definitions/TimeTrigger"
          },
          "BooleanFilter": {
            "$ref": "#/definitions/BooleanFilter"
          },
          "BooleanToggle": {
            "$ref": "#/definitions/BooleanToggle"
          },
          "ExternProtoDeclare": {
            "$ref": "#/definitions/ExternProtoDeclare"
          },
          "GeoLOD": {
            "$ref": "#/definitions/GeoLOD"
          },
          "HAnimHumanoid": {
            "$ref": "#/definitions/HAnimHumanoid"
          },
          "HAnimJoint": {
            "$ref": "#/definitions/HAnimJoint"
          },
          "Inline": {
            "$ref": "#/definitions/Inline"
          },
          "NurbsOrientationInterpolator": {
            "$ref": "#/definitions/NurbsOrientationInterpolator"
          },
          "NurbsPositionInterpolator": {
            "$ref": "#/definitions/NurbsPositionInterpolator"
          },
          "NurbsSet": {
            "$ref": "#/definitions/NurbsSet"
          },
          "NurbsSurfaceInterpolator": {
            "$ref": "#/definitions/NurbsSurfaceInterpolator"
          },
          "ProtoDeclare": {
            "$ref": "#/definitions/ProtoDeclare"
          },
          "ProtoInstance": {
            "$ref": "#/definitions/ProtoInstance"
          },
          "ROUTE": {
            "$ref": "#/definitions/ROUTE"
          },
          "StaticGroup": {
            "$ref": "#/definitions/StaticGroup"
          },
          "MetadataDouble": {
            "$ref": "#/definitions/MetadataDouble"
          },
          "MetadataFloat": {
            "$ref": "#/definitions/MetadataFloat"
          },
          "MetadataInteger": {
            "$ref": "#/definitions/MetadataInteger"
          },
          "MetadataSet": {
            "$ref": "#/definitions/MetadataSet"
          },
          "MetadataString": {
            "$ref": "#/definitions/MetadataString"
          }
        },
        "additionalProperties": false
      }
    },
    "-X3DAppearanceNodeSFNode": {
      "type": "object",
      "properties": {
        "Appearance": {
          "$ref": "#/definitions/Appearance"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DGeometryNodeSFNode": {
      "type": "object",
      "properties": {
        "IndexedFaceSet": {
          "$ref": "#/definitions/IndexedFaceSet"
        },
        "IndexedTriangleFanSet": {
          "$ref": "#/definitions/IndexedTriangleFanSet"
        },
        "IndexedTriangleSet": {
          "$ref": "#/definitions/IndexedTriangleSet"
        },
        "IndexedTriangleStripSet": {
          "$ref": "#/definitions/IndexedTriangleStripSet"
        },
        "TriangleFanSet": {
          "$ref": "#/definitions/TriangleFanSet"
        },
        "TriangleSet": {
          "$ref": "#/definitions/TriangleSet"
        },
        "TriangleStripSet": {
          "$ref": "#/definitions/TriangleStripSet"
        },
        "NurbsPatchSurface": {
          "$ref": "#/definitions/NurbsPatchSurface"
        },
        "NurbsTrimmedSurface": {
          "$ref": "#/definitions/NurbsTrimmedSurface"
        },
        "NurbsCurve": {
          "$ref": "#/definitions/NurbsCurve"
        },
        "NurbsSweptSurface": {
          "$ref": "#/definitions/NurbsSweptSurface"
        },
        "NurbsSwungSurface": {
          "$ref": "#/definitions/NurbsSwungSurface"
        },
        "Arc2D": {
          "$ref": "#/definitions/Arc2D"
        },
        "ArcClose2D": {
          "$ref": "#/definitions/ArcClose2D"
        },
        "Box": {
          "$ref": "#/definitions/Box"
        },
        "Circle2D": {
          "$ref": "#/definitions/Circle2D"
        },
        "Cone": {
          "$ref": "#/definitions/Cone"
        },
        "Cylinder": {
          "$ref": "#/definitions/Cylinder"
        },
        "Disk2D": {
          "$ref": "#/definitions/Disk2D"
        },
        "ElevationGrid": {
          "$ref": "#/definitions/ElevationGrid"
        },
        "Extrusion": {
          "$ref": "#/definitions/Extrusion"
        },
        "GeoElevationGrid": {
          "$ref": "#/definitions/GeoElevationGrid"
        },
        "IndexedLineSet": {
          "$ref": "#/definitions/IndexedLineSet"
        },
        "LineSet": {
          "$ref": "#/definitions/LineSet"
        },
        "PointSet": {
          "$ref": "#/definitions/PointSet"
        },
        "Polyline2D": {
          "$ref": "#/definitions/Polyline2D"
        },
        "Polypoint2D": {
          "$ref": "#/definitions/Polypoint2D"
        },
        "Rectangle2D": {
          "$ref": "#/definitions/Rectangle2D"
        },
        "Sphere": {
          "$ref": "#/definitions/Sphere"
        },
        "Text": {
          "$ref": "#/definitions/Text"
        },
        "TriangleSet2D": {
          "$ref": "#/definitions/TriangleSet2D"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DSoundSourceNodeSFNode": {
      "type": "object",
      "properties": {
        "AudioClip": {
          "$ref": "#/definitions/AudioClip"
        },
        "MovieTexture": {
          "$ref": "#/definitions/MovieTexture"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DFontStyleNodeSFNode": {
      "type": "object",
      "properties": {
        "FontStyle": {
          "$ref": "#/definitions/FontStyle"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    },
    "-X3DTexture2DNode-MultiTextureSFNode": {
      "type": "object",
      "properties": {
        "ImageTexture": {
          "$ref": "#/definitions/ImageTexture"
        },
        "MovieTexture": {
          "$ref": "#/definitions/MovieTexture"
        },
        "PixelTexture": {
          "$ref": "#/definitions/PixelTexture"
        },
        "MultiTexture": {
          "$ref": "#/definitions/MultiTexture"
        },
        "ProtoInstance": {
          "$ref": "#/definitions/ProtoInstance"
        }
      },
      "additionalProperties": false
    }
  }
}
