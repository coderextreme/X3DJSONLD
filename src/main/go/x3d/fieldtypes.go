package x3d

import (
	"strconv"
	"strings"
)

// Code generated by CreateX3DGSAIL.xslt. DO NOT EDIT.
// Source: X3dUnifiedObjectModel-4.0.xml
type SFFloat float32

func (val SFFloat) String() string {
    var b strings.Builder
    b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
    return b.String()
}

type SFDouble float64

func (val SFDouble) String() string {
    var b strings.Builder
    b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
    return b.String()
}

type SFTime float64

func (val SFTime) String() string {
    var b strings.Builder
    b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
    return b.String()
}

type SFColor [3]float32

func (v SFColor) String() string {
    var b strings.Builder
    for i, val := range v {
    	b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFColor [][3]float32

func (v MFColor) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFColorRGBA [4]float32

func (v SFColorRGBA) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFColorRGBA [][4]float32

func (v MFColorRGBA) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFImage []int32

func (v SFImage) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFImage [][]int32

func (v MFImage) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFInt32 []int32

func (v MFInt32) String() string {
    var b strings.Builder
    for i, val := range v {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFMatrix3d [9]float64

func (v SFMatrix3d) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFMatrix3d [][9]float64

func (v MFMatrix3d) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFMatrix3f [9]float32

func (v SFMatrix3f) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFMatrix3f [][9]float32

func (v MFMatrix3f) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFMatrix4d [16]float64

func (v SFMatrix4d) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFMatrix4d [][16]float64

func (v MFMatrix4d) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFMatrix4f [16]float32

func (v SFMatrix4f) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFMatrix4f [][16]float32

func (v MFMatrix4f) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFRotation [4]float32

func (v SFRotation) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFRotation [][4]float32

func (v MFRotation) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFFloat []float32

func (v MFFloat) String() string {
    var b strings.Builder
    for i, val := range v {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFDouble []float64

func (v MFDouble) String() string {
    var b strings.Builder
    for i, val := range v {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFVec2d [2]float64

func (v SFVec2d) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFVec2d [][2]float64

func (v MFVec2d) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFVec2f [2]float32

func (v SFVec2f) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFVec2f [][2]float32

func (v MFVec2f) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFVec3d [3]float64

func (v SFVec3d) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFVec3d [][3]float64

func (v MFVec3d) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFVec3f [3]float32

func (v SFVec3f) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFVec3f [][3]float32

func (v MFVec3f) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFVec4d [4]float64

func (v SFVec4d) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFVec4d [][4]float64

func (v MFVec4d) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type SFVec4f [4]float32

func (v SFVec4f) String() string {
    var b strings.Builder
    for i, val := range v {
        b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFVec4f [][4]float32

func (v MFVec4f) String() string {
    var b strings.Builder
    for i, tuple := range v {
        for j, val := range tuple {
            b.WriteString(strconv.FormatFloat(float64(val), 'g', -1, 32))
            if j < len(tuple)-1 { b.WriteString(" ") }
        }
        if i < len(v)-1 { b.WriteString(" ") }
    }
    return b.String()
}

type MFString []string

func (mf MFString) String() string {
	var b strings.Builder
	for i, s := range mf {
		b.WriteString(`"`)
		b.WriteString(s)
		b.WriteString(`"`)
		if i < len(mf)-1 {
			b.WriteString(" ")
		}
	}
        return b.String()
}


