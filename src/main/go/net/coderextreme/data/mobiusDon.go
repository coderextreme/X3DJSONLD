
package main

import (
	"encoding/xml"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	"gox3d/x3d" // Assumes your module is named x3d-go-tester

	// Imports for the CGo-based libxml2 wrapper
	"github.com/lestrrat-go/libxml2"
	"github.com/lestrrat-go/libxml2/xsd"
)

// ... (Helper functions remain the same) ...
func stringPtr(s string) *string { return &s }
func floatPtr(f float32) *float32 { return &f }
func doublePtr(d float64) *float64 { return &d }
func boolPtr(b bool) *bool       { return &b }
func int32Ptr(i int32) *int32    { return &i }

func downloadSchemaIfNotExists(url, filepath string) error {
	// ... (function is correct, no changes) ...
	if _, err := os.Stat(filepath); err == nil {
		fmt.Printf("Schema file '%s' already exists. Skipping download.\n", filepath)
		return nil
	}
	fmt.Printf("Downloading X3D schema from %s to %s...\n", url, filepath)
	resp, err := http.Get(url)
	if err != nil { return fmt.Errorf("failed to download schema: %w", err) }
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK { return fmt.Errorf("bad status: %s", resp.Status) }
	out, err := os.Create(filepath)
	if err != nil { return fmt.Errorf("failed to create schema file: %w", err) }
	defer out.Close()
	_, err = io.Copy(out, resp.Body)
	if err != nil { return fmt.Errorf("failed to save schema: %w", err) }
	fmt.Println("Schema downloaded successfully.")
	return nil
}

// Updated validation function to print detailed errors
func validateXMLWithSchema(xmlData []byte, schemaPath string) error {
	schema, err := xsd.ParseFromFile(schemaPath)
	if err != nil { return fmt.Errorf("failed to parse schema file %s: %w", schemaPath, err) }
	defer schema.Free()
	doc, err := libxml2.Parse(xmlData)
	if err != nil { return fmt.Errorf("failed to parse XML data: %w", err) }
	defer doc.Free()

	validationErr := schema.Validate(doc)
	if validationErr != nil {
		errorLog := ""
		if schemaErrors, ok := validationErr.(xsd.SchemaValidationError); ok {
			for i, e := range schemaErrors.Errors() {
				errorLog += fmt.Sprintf("Error %d: %s\n", i+1, e.Error())
			}
			return fmt.Errorf("schema validation failed with %d errors:\n%s", len(schemaErrors.Errors()), errorLog)
		}
		return fmt.Errorf("schema validation failed: %w", validationErr)
	}
	return nil
}

func main() {
	fmt.Println("--- Building and Testing an X3D Scene in Go ---")

	const schemaURL = "https://www.web3d.org/specifications/x3d-4.0.xsd"
	const schemaFilename = "x3d-4.0.xsd"
	if err := downloadSchemaIfNotExists(schemaURL, schemaFilename); err != nil {
		log.Fatalf("Could not prepare schema file: %v", err)
	}
    sceneRoot := &x3d.X3D{
        Profile: stringPtr("Interchange"),
        Version: stringPtr("4.0"),
        Head: &x3d.Head{
            Components: []*x3d.Component{
                &x3d.Component{
                    Name: stringPtr("NURBS"),
                    Level: int32Ptr(4),
            },
            &x3d.Component{
                Name: stringPtr("Shape"),
                Level: int32Ptr(2),
            },
        },
            Units: []*x3d.Unit{
                &x3d.Unit{
                    Category: stringPtr("length"),
                    Name: stringPtr("millimeters"),
                    ConversionFactor: doublePtr(25.4),
            },
        },
            Metas: []*x3d.Meta{
                &x3d.Meta{
                    Name: stringPtr("title"),
                    Content: stringPtr("mobiusDon.x3d"),
            },
            &x3d.Meta{
                Name: stringPtr("creator"),
                Content: stringPtr("Vince Marchetti"),
            },
            &x3d.Meta{
                Name: stringPtr("generator"),
                Content: stringPtr("manual"),
            },
            &x3d.Meta{
                Name: stringPtr("generator"),
                Content: stringPtr("x3d-tidy V2.2.1, https://www.npmjs.com/package/x3d-tidy"),
            },
            },
        },
        Scene: &x3d.Scene{
            Children: []x3d.X3DChildNode{
                &x3d.Background{
                    SkyColor: &x3d.MFColor{[3]float32{1.0,1.0,1.0}},
                },
                &x3d.Shape{
                    Appearance: &x3d.Appearance{
                        CoreX3DNode: x3d.CoreX3DNode{
                            DEF: stringPtr("ksh_appearance_1"),
                        },
                        Material: &x3d.Material{
                            DiffuseColor: &x3d.SFColor{0.0, 0.0, 1.0},
                        },
                    },
                    Geometry: &x3d.NurbsPatchSurface{
                        Solid: boolPtr(false),
                        UOrder: int32Ptr(4),
                        UDimension: int32Ptr(91),
                        VDimension: int32Ptr(3),
                        UKnot: x3d.MFDouble{0, 0, 0, 0, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0666666666667, 0.0666666666667, 0.0666666666667, 0.1, 0.1, 0.1, 0.133333333333, 0.133333333333, 0.133333333333, 0.166666666667, 0.166666666667, 0.166666666667, 0.2, 0.2, 0.2, 0.233333333333, 0.233333333333, 0.233333333333, 0.266666666667, 0.266666666667, 0.266666666667, 0.3, 0.3, 0.3, 0.333333333333, 0.333333333333, 0.333333333333, 0.366666666667, 0.366666666667, 0.366666666667, 0.4, 0.4, 0.4, 0.433333333333, 0.433333333333, 0.433333333333, 0.466666666667, 0.466666666667, 0.466666666667, 0.5, 0.5, 0.5, 0.533333333333, 0.533333333333, 0.533333333333, 0.566666666667, 0.566666666667, 0.566666666667, 0.6, 0.6, 0.6, 0.633333333333, 0.633333333333, 0.633333333333, 0.666666666667, 0.666666666667, 0.666666666667, 0.7, 0.7, 0.7, 0.733333333333, 0.733333333333, 0.733333333333, 0.766666666667, 0.766666666667, 0.766666666667, 0.8, 0.8, 0.8, 0.833333333333, 0.833333333333, 0.833333333333, 0.866666666667, 0.866666666667, 0.866666666667, 0.9, 0.9, 0.9, 0.933333333333, 0.933333333333, 0.933333333333, 0.966666666667, 0.966666666667, 0.966666666667, 1, 1, 1, 1},
                        VKnot: x3d.MFDouble{0, 0, 0, 1, 1, 1},
                        Weight: x3d.MFDouble{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                        Metadata: &x3d.MetadataSet{
                            &x3d.MetadataString{
                                Name: stringPtr("INSTANT_PLAYER_MODE"),
                                Value: x3d.MFString{"True"},
                            },
                        },
                        ControlPoint: &x3d.Coordinate{
                            Point: &x3d.MFVec3f{[3]float32{14.0,-3.4641,0.0},[3]float32{13.919,-3.3245,1.3963},[3]float32{13.831,-3.182,1.5125},[3]float32{13.472,-3.0371,2.8636},[3]float32{13.113,-2.8922,4.2146},[3]float32{13.026,-2.7448,4.271},[3]float32{12.403,-2.5954,5.522},[3]float32{11.779,-2.4459,6.773},[3]float32{11.711,-2.2943,6.7824},[3]float32{10.85,-2.1409,7.8827},[3]float32{9.9886,-1.9876,8.983},[3]float32{9.9482,-1.8325,8.9619},[3]float32{8.8844,-1.6761,9.8672},[3]float32{7.8207,-1.5196,10.772},[3]float32{7.8117,-1.3618,10.738},[3]float32{6.5885,-1.2031,11.412},[3]float32{5.3653,-1.0443,12.086},[3]float32{5.3843,-0.88454,12.053},[3]float32{4.0511,-0.72419,12.468},[3]float32{2.718,-0.56385,12.884},[3]float32{2.756,-0.40292,12.864},[3]float32{1.3668,-0.24179,13.004},[3]float32{-0.022387,-0.080662,13.145},[3]float32{0.022387,0.080662,13.145},[3]float32{-1.3668,0.24179,13.004},[3]float32{-2.756,0.40292,12.864},[3]float32{-2.718,0.56385,12.884},[3]float32{-4.0511,0.72419,12.468},[3]float32{-5.3843,0.88454,12.053},[3]float32{-5.3653,1.0443,12.086},[3]float32{-6.5885,1.2031,11.412},[3]float32{-7.8117,1.3618,10.738},[3]float32{-7.8207,1.5196,10.772},[3]float32{-8.8844,1.6761,9.8672},[3]float32{-9.9482,1.8325,8.9619},[3]float32{-9.9886,1.9876,8.983},[3]float32{-10.85,2.1409,7.8827},[3]float32{-11.711,2.2943,6.7824},[3]float32{-11.779,2.4459,6.773},[3]float32{-12.403,2.5954,5.522},[3]float32{-13.026,2.7448,4.271},[3]float32{-13.113,2.8922,4.2146},[3]float32{-13.472,3.0371,2.8636},[3]float32{-13.831,3.182,1.5125},[3]float32{-13.919,3.3245,1.3963},[3]float32{-14.0,3.4641,1.7145e-15},[3]float32{-14.081,3.6037,-1.3963},[3]float32{-14.147,3.7405,-1.5795},[3]float32{-13.945,3.8742,-2.964},[3]float32{-13.743,4.0079,-4.3485},[3]float32{-13.761,4.1384,-4.5982},[3]float32{-13.283,4.2654,-5.9142},[3]float32{-12.806,4.3925,-7.2301},[3]float32{-12.748,4.5161,-7.5364},[3]float32{-12.015,4.6359,-8.7294},[3]float32{-11.282,4.7557,-9.9224},[3]float32{-11.122,4.8717,-10.266},[3]float32{-10.162,4.9837,-11.286},[3]float32{-9.2022,5.0957,-12.307},[3]float32{-8.9208,5.2037,-12.659},[3]float32{-7.7733,5.3073,-13.464},[3]float32{-6.6259,5.4109,-14.269},[3]float32{-6.2096,5.5103,-14.593},[3]float32{-4.9219,5.605,-15.148},[3]float32{-3.6343,5.6998,-15.704},[3]float32{-3.0811,5.79,-15.957},[3]float32{-1.7068,5.8754,-16.239},[3]float32{-0.33248,5.9609,-16.521},[3]float32{0.34709,6.0415,-16.66},[3]float32{1.7506,6.1172,-16.656},[3]float32{3.1541,6.1929,-16.651},[3]float32{3.9361,6.2637,-16.632},[3]float32{5.3095,6.3292,-16.341},[3]float32{6.683,6.3948,-16.05},[3]float32{7.5303,6.4552,-15.835},[3]float32{8.8152,6.5104,-15.268},[3]float32{10.1,6.5655,-14.701},[3]float32{10.963,6.6154,-14.263},[3]float32{12.105,6.6598,-13.444},[3]float32{13.246,6.7043,-12.625},[3]float32{14.067,6.7433,-11.946},[3]float32{15.015,6.7768,-10.909},[3]float32{15.963,6.8103,-9.8721},[3]float32{16.676,6.8383,-8.9532},[3]float32{17.39,6.8608,-7.7425},[3]float32{18.104,6.8832,-6.5319},[3]float32{18.643,6.9001,-5.3901},[3]float32{19.09,6.9113,-4.0578},[3]float32{19.538,6.9226,-2.7254},[3]float32{19.839,6.9282,-1.3963},[3]float32{20.0,6.9282,-4.8986e-15},[3]float32{20.0,-3.4641,0.0},[3]float32{19.96,-3.3595,0.69813},[3]float32{19.71,-3.0422,2.762},[3]float32{19.369,-2.8294,4.1171},[3]float32{19.029,-2.6165,5.4722},[3]float32{18.578,-2.4024,6.743},[3]float32{17.99,-2.19,8.0095},[3]float32{17.402,-1.9776,9.2761},[3]float32{16.728,-1.766,10.428},[3]float32{15.912,-1.5581,11.561},[3]float32{15.097,-1.3502,12.694},[3]float32{14.216,-1.1449,13.702},[3]float32{13.201,-0.94527,14.661},[3]float32{12.186,-0.74559,15.621},[3]float32{11.114,-0.55051,16.457},[3]float32{9.934,-0.36265,17.206},[3]float32{8.7542,-0.17479,17.955},[3]float32{7.5076,0.0067486,18.588},[3]float32{6.205,0.17954,19.097},[3]float32{4.9024,0.35233,19.607},[3]float32{3.5058,0.51722,19.998},[3]float32{2.1279,0.67205,20.246},[3]float32{0.75001,0.82688,20.494},[3]float32{-0.76173,0.97244,20.605},[3]float32{-2.1629,1.1068,20.578},[3]float32{-3.564,1.2413,20.551},[3]float32{-5.1427,1.3652,20.346},[3]float32{-6.512,1.4772,20.042},[3]float32{-7.8813,1.5892,19.738},[3]float32{-9.4645,1.6899,19.186},[3]float32{-10.746,1.778,18.613},[3]float32{-12.027,1.8661,18.039},[3]float32{-13.54,1.9422,17.124},[3]float32{-14.678,2.0054,16.302},[3]float32{-15.817,2.0686,15.48},[3]float32{-17.173,2.1195,14.203},[3]float32{-18.119,2.1574,13.164},[3]float32{-19.064,2.1954,12.125},[3]float32{-20.174,2.2208,10.511},[3]float32{-20.883,2.2336,9.2976},[3]float32{-21.591,2.2464,8.0844},[3]float32{-22.368,2.2469,6.182},[3]float32{-22.804,2.2352,4.8472},[3]float32{-23.24,2.2235,3.5125},[3]float32{-23.609,2.2,1.3963},[3]float32{-23.75,2.1651,2.9085e-15},[3]float32{-23.891,2.1301,-1.3963},[3]float32{-23.793,2.084,-3.6298},[3]float32{-23.629,2.0275,-5.0225},[3]float32{-23.466,1.971,-6.4152},[3]float32{-22.867,1.9042,-8.6529},[3]float32{-22.405,1.8283,-9.9753},[3]float32{-21.942,1.7523,-11.298},[3]float32{-20.842,1.6674,-13.417},[3]float32{-20.101,1.5746,-14.604},[3]float32{-19.36,1.4818,-15.791},[3]float32{-17.788,1.3813,-17.669},[3]float32{-16.803,1.2746,-18.662},[3]float32{-15.818,1.1679,-19.655},[3]float32{-13.839,1.055,-21.177},[3]float32{-12.659,0.93756,-21.925},[3]float32{-11.478,0.82013,-22.673},[3]float32{-9.1836,0.6982,-23.746},[3]float32{-7.8665,0.57351,-24.211},[3]float32{-6.5494,0.44881,-24.675},[3]float32{-4.0557,0.32137,-25.23},[3]float32{-2.6683,0.19301,-25.387},[3]float32{-1.2809,0.064643,-25.545},[3]float32{1.2809,-0.064643,-25.545},[3]float32{2.6683,-0.19301,-25.387},[3]float32{4.0557,-0.32137,-25.23},[3]float32{6.5494,-0.44881,-24.675},[3]float32{7.8665,-0.57351,-24.211},[3]float32{9.1836,-0.6982,-23.746},[3]float32{11.478,-0.82013,-22.673},[3]float32{12.659,-0.93756,-21.925},[3]float32{13.839,-1.055,-21.177},[3]float32{15.818,-1.1679,-19.655},[3]float32{16.803,-1.2746,-18.662},[3]float32{17.788,-1.3813,-17.669},[3]float32{19.36,-1.4818,-15.791},[3]float32{20.101,-1.5746,-14.604},[3]float32{20.842,-1.6674,-13.417},[3]float32{21.942,-1.7523,-11.298},[3]float32{22.405,-1.8283,-9.9753},[3]float32{22.867,-1.9042,-8.6529},[3]float32{23.466,-1.971,-6.4152},[3]float32{23.629,-2.0275,-5.0225},[3]float32{23.793,-2.084,-3.6298},[3]float32{23.891,-2.1301,-1.3963},[3]float32{23.75,-2.1651,-5.8171e-15},[3]float32{26.0,-3.4641,0.0},[3]float32{25.919,-3.6037,1.3963},[3]float32{25.56,-3.7405,4.0054},[3]float32{25.181,-3.8742,5.3524},[3]float32{24.803,-4.0079,6.6994},[3]float32{23.917,-4.1384,9.1201},[3]float32{23.258,-4.2654,10.355},[3]float32{22.6,-4.3925,11.59},[3]float32{21.254,-4.5161,13.716},[3]float32{20.346,-4.6359,14.782},[3]float32{19.438,-4.7557,15.848},[3]float32{17.718,-4.8717,17.591},[3]float32{16.603,-4.9837,18.439},[3]float32{15.488,-5.0957,19.288},[3]float32{13.498,-5.2037,20.586},[3]float32{12.227,-5.3073,21.177},[3]float32{10.956,-5.4109,21.768},[3]float32{8.807,-5.5103,22.587},[3]float32{7.4387,-5.605,22.894},[3]float32{6.0705,-5.6998,23.202},[3]float32{3.8772,-5.79,23.532},[3]float32{2.4743,-5.8754,23.542},[3]float32{1.0714,-5.9609,23.552},[3]float32{-1.0568,-6.0415,23.413},[3]float32{-2.4306,-6.1172,23.125},[3]float32{-3.8043,-6.1929,22.838},[3]float32{-5.7687,-6.2637,22.273},[3]float32{-7.0511,-6.3292,21.701},[3]float32{-8.3335,-6.3948,21.13},[3]float32{-10.051,-6.4552,20.202},[3]float32{-11.185,-6.5104,19.373},[3]float32{-12.318,-6.5655,18.543},[3]float32{-13.727,-6.6154,17.332},[3]float32{-14.66,-6.6598,16.282},[3]float32{-15.594,-6.7043,15.233},[3]float32{-16.653,-6.7433,13.825},[3]float32{-17.346,-6.7768,12.602},[3]float32{-18.039,-6.8103,11.38},[3]float32{-18.73,-6.8383,9.8674},[3]float32{-19.152,-6.8608,8.5269},[3]float32{-19.574,-6.8832,7.1864},[3]float32{-19.903,-6.9001,5.6579},[3]float32{-20.036,-6.9113,4.2587},[3]float32{-20.169,-6.9226,2.8595},[3]float32{-20.161,-6.9282,1.3963},[3]float32{-20.0,-6.9282,2.4493e-15},[3]float32{-19.839,-6.9282,-1.3963},[3]float32{-19.538,-6.9226,-2.7254},[3]float32{-19.09,-6.9113,-4.0578},[3]float32{-18.643,-6.9001,-5.3901},[3]float32{-18.104,-6.8832,-6.5319},[3]float32{-17.39,-6.8608,-7.7425},[3]float32{-16.676,-6.8383,-8.9532},[3]float32{-15.963,-6.8103,-9.8721},[3]float32{-15.015,-6.7768,-10.909},[3]float32{-14.067,-6.7433,-11.946},[3]float32{-13.246,-6.7043,-12.625},[3]float32{-12.105,-6.6598,-13.444},[3]float32{-10.963,-6.6154,-14.263},[3]float32{-10.1,-6.5655,-14.701},[3]float32{-8.8152,-6.5104,-15.268},[3]float32{-7.5303,-6.4552,-15.835},[3]float32{-6.683,-6.3948,-16.05},[3]float32{-5.3095,-6.3292,-16.341},[3]float32{-3.9361,-6.2637,-16.632},[3]float32{-3.1541,-6.1929,-16.651},[3]float32{-1.7506,-6.1172,-16.656},[3]float32{-0.34709,-6.0415,-16.66},[3]float32{0.33248,-5.9609,-16.521},[3]float32{1.7068,-5.8754,-16.239},[3]float32{3.0811,-5.79,-15.957},[3]float32{3.6343,-5.6998,-15.704},[3]float32{4.9219,-5.605,-15.148},[3]float32{6.2096,-5.5103,-14.593},[3]float32{6.6259,-5.4109,-14.269},[3]float32{7.7733,-5.3073,-13.464},[3]float32{8.9208,-5.2037,-12.659},[3]float32{9.2022,-5.0957,-12.307},[3]float32{10.162,-4.9837,-11.286},[3]float32{11.122,-4.8717,-10.266},[3]float32{11.282,-4.7557,-9.9224},[3]float32{12.015,-4.6359,-8.7294},[3]float32{12.748,-4.5161,-7.5364},[3]float32{12.806,-4.3925,-7.2301},[3]float32{13.283,-4.2654,-5.9142},[3]float32{13.761,-4.1384,-4.5982},[3]float32{13.743,-4.0079,-4.3485},[3]float32{13.945,-3.8742,-2.964},[3]float32{14.147,-3.7405,-1.5795},[3]float32{14.081,-3.6037,-1.3963},[3]float32{14.0,-3.4641,-3.429e-15}},
                        },
                    },
                },
                &x3d.Shape{
                    Appearance: &x3d.Appearance{
                        CoreX3DNode: x3d.CoreX3DNode{
                            DEF: stringPtr("ksh_appearance_2"),
                        },
                        Material: &x3d.Material{
                            DiffuseColor: &x3d.SFColor{0.0, 0.0, 1.0},
                        },
                    },
                    Geometry: &x3d.NurbsPatchSurface{
                        Solid: boolPtr(false),
                        UOrder: int32Ptr(4),
                        UDimension: int32Ptr(91),
                        VDimension: int32Ptr(3),
                        UKnot: x3d.MFDouble{0, 0, 0, 0, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0666666666667, 0.0666666666667, 0.0666666666667, 0.1, 0.1, 0.1, 0.133333333333, 0.133333333333, 0.133333333333, 0.166666666667, 0.166666666667, 0.166666666667, 0.2, 0.2, 0.2, 0.233333333333, 0.233333333333, 0.233333333333, 0.266666666667, 0.266666666667, 0.266666666667, 0.3, 0.3, 0.3, 0.333333333333, 0.333333333333, 0.333333333333, 0.366666666667, 0.366666666667, 0.366666666667, 0.4, 0.4, 0.4, 0.433333333333, 0.433333333333, 0.433333333333, 0.466666666667, 0.466666666667, 0.466666666667, 0.5, 0.5, 0.5, 0.533333333333, 0.533333333333, 0.533333333333, 0.566666666667, 0.566666666667, 0.566666666667, 0.6, 0.6, 0.6, 0.633333333333, 0.633333333333, 0.633333333333, 0.666666666667, 0.666666666667, 0.666666666667, 0.7, 0.7, 0.7, 0.733333333333, 0.733333333333, 0.733333333333, 0.766666666667, 0.766666666667, 0.766666666667, 0.8, 0.8, 0.8, 0.833333333333, 0.833333333333, 0.833333333333, 0.866666666667, 0.866666666667, 0.866666666667, 0.9, 0.9, 0.9, 0.933333333333, 0.933333333333, 0.933333333333, 0.966666666667, 0.966666666667, 0.966666666667, 1, 1, 1, 1},
                        VKnot: x3d.MFDouble{0, 0, 0, 1, 1, 1},
                        Weight: x3d.MFDouble{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                        Metadata: &x3d.MetadataSet{
                            &x3d.MetadataString{
                                Name: stringPtr("INSTANT_PLAYER_MODE"),
                                Value: x3d.MFString{"True"},
                            },
                        },
                        ControlPoint: &x3d.Coordinate{
                            Point: &x3d.MFVec3f{[3]float32{20.0,6.9282,0.0},[3]float32{20.161,6.9282,1.3963},[3]float32{20.169,6.9226,2.8595},[3]float32{20.036,6.9113,4.2587},[3]float32{19.903,6.9001,5.6579},[3]float32{19.574,6.8832,7.1864},[3]float32{19.152,6.8608,8.5269},[3]float32{18.73,6.8383,9.8674},[3]float32{18.039,6.8103,11.38},[3]float32{17.346,6.7768,12.602},[3]float32{16.653,6.7433,13.825},[3]float32{15.594,6.7043,15.233},[3]float32{14.66,6.6598,16.282},[3]float32{13.727,6.6154,17.332},[3]float32{12.318,6.5655,18.543},[3]float32{11.185,6.5104,19.373},[3]float32{10.051,6.4552,20.202},[3]float32{8.3335,6.3948,21.13},[3]float32{7.0511,6.3292,21.701},[3]float32{5.7687,6.2637,22.273},[3]float32{3.8043,6.1929,22.838},[3]float32{2.4306,6.1172,23.125},[3]float32{1.0568,6.0415,23.413},[3]float32{-1.0714,5.9609,23.552},[3]float32{-2.4743,5.8754,23.542},[3]float32{-3.8772,5.79,23.532},[3]float32{-6.0705,5.6998,23.202},[3]float32{-7.4387,5.605,22.894},[3]float32{-8.807,5.5103,22.587},[3]float32{-10.956,5.4109,21.768},[3]float32{-12.227,5.3073,21.177},[3]float32{-13.498,5.2037,20.586},[3]float32{-15.488,5.0957,19.288},[3]float32{-16.603,4.9837,18.439},[3]float32{-17.718,4.8717,17.591},[3]float32{-19.438,4.7557,15.848},[3]float32{-20.346,4.6359,14.782},[3]float32{-21.254,4.5161,13.716},[3]float32{-22.6,4.3925,11.59},[3]float32{-23.258,4.2654,10.355},[3]float32{-23.917,4.1384,9.1201},[3]float32{-24.803,4.0079,6.6994},[3]float32{-25.181,3.8742,5.3524},[3]float32{-25.56,3.7405,4.0054},[3]float32{-25.919,3.6037,1.3963},[3]float32{-26.0,3.4641,2.6277e-14},[3]float32{-26.081,3.3245,-1.3963},[3]float32{-25.875,3.182,-4.0725},[3]float32{-25.654,3.0371,-5.4529},[3]float32{-25.433,2.8922,-6.8334},[3]float32{-24.652,2.7448,-9.4474},[3]float32{-24.139,2.5954,-10.747},[3]float32{-23.627,2.4459,-12.048},[3]float32{-22.291,2.2943,-14.47},[3]float32{-21.511,2.1409,-15.629},[3]float32{-20.731,1.9876,-16.788},[3]float32{-18.892,1.8325,-18.895},[3]float32{-17.881,1.6761,-19.859},[3]float32{-16.869,1.5196,-20.822},[3]float32{-14.607,1.3618,-22.507},[3]float32{-13.411,1.2031,-23.229},[3]float32{-12.216,1.0443,-23.952},[3]float32{-9.6323,0.88454,-25.127},[3]float32{-8.3095,0.72419,-25.574},[3]float32{-6.9868,0.56385,-26.022},[3]float32{-4.2023,0.40292,-26.625},[3]float32{-2.8143,0.24179,-26.776},[3]float32{-1.4263,0.080662,-26.928},[3]float32{1.4263,-0.080662,-26.928},[3]float32{2.8143,-0.24179,-26.776},[3]float32{4.2023,-0.40292,-26.625},[3]float32{6.9868,-0.56385,-26.022},[3]float32{8.3095,-0.72419,-25.574},[3]float32{9.6323,-0.88454,-25.127},[3]float32{12.216,-1.0443,-23.952},[3]float32{13.411,-1.2031,-23.229},[3]float32{14.607,-1.3618,-22.507},[3]float32{16.869,-1.5196,-20.822},[3]float32{17.881,-1.6761,-19.859},[3]float32{18.892,-1.8325,-18.895},[3]float32{20.731,-1.9876,-16.788},[3]float32{21.511,-2.1409,-15.629},[3]float32{22.291,-2.2943,-14.47},[3]float32{23.627,-2.4459,-12.048},[3]float32{24.139,-2.5954,-10.747},[3]float32{24.652,-2.7448,-9.4474},[3]float32{25.433,-2.8922,-6.8334},[3]float32{25.654,-3.0371,-5.4529},[3]float32{25.875,-3.182,-4.0725},[3]float32{26.081,-3.3245,-1.3963},[3]float32{26.0,-3.4641,-6.3682e-15},[3]float32{23.75,-2.1651,0.0},[3]float32{23.609,-2.2,1.3963},[3]float32{23.24,-2.2235,3.5125},[3]float32{22.804,-2.2352,4.8472},[3]float32{22.368,-2.2469,6.182},[3]float32{21.591,-2.2464,8.0844},[3]float32{20.883,-2.2336,9.2976},[3]float32{20.174,-2.2208,10.511},[3]float32{19.064,-2.1954,12.125},[3]float32{18.119,-2.1574,13.164},[3]float32{17.173,-2.1195,14.203},[3]float32{15.817,-2.0686,15.48},[3]float32{14.678,-2.0054,16.302},[3]float32{13.54,-1.9422,17.124},[3]float32{12.027,-1.8661,18.039},[3]float32{10.746,-1.778,18.613},[3]float32{9.4645,-1.6899,19.186},[3]float32{7.8813,-1.5892,19.738},[3]float32{6.512,-1.4772,20.042},[3]float32{5.1427,-1.3652,20.346},[3]float32{3.564,-1.2413,20.551},[3]float32{2.1629,-1.1068,20.578},[3]float32{0.76173,-0.97244,20.605},[3]float32{-0.75001,-0.82688,20.494},[3]float32{-2.1279,-0.67205,20.246},[3]float32{-3.5058,-0.51722,19.998},[3]float32{-4.9024,-0.35233,19.607},[3]float32{-6.205,-0.17954,19.097},[3]float32{-7.5076,-0.0067486,18.588},[3]float32{-8.7542,0.17479,17.955},[3]float32{-9.934,0.36265,17.206},[3]float32{-11.114,0.55051,16.457},[3]float32{-12.186,0.74559,15.621},[3]float32{-13.201,0.94527,14.661},[3]float32{-14.216,1.1449,13.702},[3]float32{-15.097,1.3502,12.694},[3]float32{-15.912,1.5581,11.561},[3]float32{-16.728,1.766,10.428},[3]float32{-17.402,1.9776,9.2761},[3]float32{-17.99,2.19,8.0095},[3]float32{-18.578,2.4024,6.743},[3]float32{-19.029,2.6165,5.4722},[3]float32{-19.369,2.8294,4.1171},[3]float32{-19.71,3.0422,2.762},[3]float32{-19.919,3.2548,1.3963},[3]float32{-20.0,3.4641,2.0213e-14},[3]float32{-20.081,3.6734,-1.3963},[3]float32{-20.025,3.8803,-2.8291},[3]float32{-19.842,4.0819,-4.2176},[3]float32{-19.659,4.2836,-5.6061},[3]float32{-19.313,4.4808,-7.0702},[3]float32{-18.871,4.6708,-8.4017},[3]float32{-18.428,4.8607,-9.7332},[3]float32{-17.766,5.0443,-11.182},[3]float32{-17.078,5.2187,-12.408},[3]float32{-16.39,5.3931,-13.634},[3]float32{-15.391,5.5593,-15.006},[3]float32{-14.479,5.7145,-16.081},[3]float32{-13.568,5.8698,-17.155},[3]float32{-12.223,6.015,-18.378},[3]float32{-11.119,6.1477,-19.258},[3]float32{-10.015,6.2805,-20.139},[3]float32{-8.3329,6.4016,-21.128},[3]float32{-7.0758,6.5088,-21.777},[3]float32{-5.8187,6.616,-22.427},[3]float32{-3.8309,6.7102,-23.091},[3]float32{-2.4679,6.7893,-23.481},[3]float32{-1.1049,6.8684,-23.87},[3]float32{1.1312,6.9333,-24.12},[3]float32{2.5466,6.9823,-24.23},[3]float32{3.9621,7.0313,-24.339},[3]float32{6.3608,7.065,-24.095},[3]float32{7.7704,7.0823,-23.915},[3]float32{9.18,7.0995,-23.735},[3]float32{11.629,7.1008,-22.935},[3]float32{12.973,7.0853,-22.469},[3]float32{14.316,7.0697,-22.003},[3]float32{16.682,7.0379,-20.614},[3]float32{17.899,6.9891,-19.879},[3]float32{19.115,6.9403,-19.143},[3]float32{21.251,6.8752,-17.166},[3]float32{22.284,6.7933,-16.19},[3]float32{23.317,6.7114,-15.215},[3]float32{25.071,6.6133,-12.691},[3]float32{25.87,6.499,-11.518},[3]float32{26.669,6.3848,-10.345},[3]float32{27.898,6.2548,-7.3574},[3]float32{28.423,6.1094,-6.0414},[3]float32{28.947,5.9641,-4.7254},[3]float32{29.528,5.8037,-1.3963},[3]float32{29.75,5.6292,-7.2866e-15},[3]float32{14.0,-3.4641,0.0},[3]float32{13.919,-3.3245,1.3963},[3]float32{13.831,-3.182,1.5125},[3]float32{13.472,-3.0371,2.8636},[3]float32{13.113,-2.8922,4.2146},[3]float32{13.026,-2.7448,4.271},[3]float32{12.403,-2.5954,5.522},[3]float32{11.779,-2.4459,6.773},[3]float32{11.711,-2.2943,6.7824},[3]float32{10.85,-2.1409,7.8827},[3]float32{9.9886,-1.9876,8.983},[3]float32{9.9482,-1.8325,8.9619},[3]float32{8.8844,-1.6761,9.8672},[3]float32{7.8207,-1.5196,10.772},[3]float32{7.8117,-1.3618,10.738},[3]float32{6.5885,-1.2031,11.412},[3]float32{5.3653,-1.0443,12.086},[3]float32{5.3843,-0.88454,12.053},[3]float32{4.0511,-0.72419,12.468},[3]float32{2.718,-0.56385,12.884},[3]float32{2.756,-0.40292,12.864},[3]float32{1.3668,-0.24179,13.004},[3]float32{-0.022387,-0.080662,13.145},[3]float32{0.022387,0.080662,13.145},[3]float32{-1.3668,0.24179,13.004},[3]float32{-2.756,0.40292,12.864},[3]float32{-2.718,0.56385,12.884},[3]float32{-4.0511,0.72419,12.468},[3]float32{-5.3843,0.88454,12.053},[3]float32{-5.3653,1.0443,12.086},[3]float32{-6.5885,1.2031,11.412},[3]float32{-7.8117,1.3618,10.738},[3]float32{-7.8207,1.5196,10.772},[3]float32{-8.8844,1.6761,9.8672},[3]float32{-9.9482,1.8325,8.9619},[3]float32{-9.9886,1.9876,8.983},[3]float32{-10.85,2.1409,7.8827},[3]float32{-11.711,2.2943,6.7824},[3]float32{-11.779,2.4459,6.773},[3]float32{-12.403,2.5954,5.522},[3]float32{-13.026,2.7448,4.271},[3]float32{-13.113,2.8922,4.2146},[3]float32{-13.472,3.0371,2.8636},[3]float32{-13.831,3.182,1.5125},[3]float32{-13.919,3.3245,1.3963},[3]float32{-14.0,3.4641,1.4149e-14},[3]float32{-14.081,3.6037,-1.3963},[3]float32{-14.147,3.7405,-1.5795},[3]float32{-13.945,3.8742,-2.964},[3]float32{-13.743,4.0079,-4.3485},[3]float32{-13.761,4.1384,-4.5982},[3]float32{-13.283,4.2654,-5.9142},[3]float32{-12.806,4.3925,-7.2301},[3]float32{-12.748,4.5161,-7.5364},[3]float32{-12.015,4.6359,-8.7294},[3]float32{-11.282,4.7557,-9.9224},[3]float32{-11.122,4.8717,-10.266},[3]float32{-10.162,4.9837,-11.286},[3]float32{-9.2022,5.0957,-12.307},[3]float32{-8.9208,5.2037,-12.659},[3]float32{-7.7733,5.3073,-13.464},[3]float32{-6.6259,5.4109,-14.269},[3]float32{-6.2096,5.5103,-14.593},[3]float32{-4.9219,5.605,-15.148},[3]float32{-3.6343,5.6998,-15.704},[3]float32{-3.0811,5.79,-15.957},[3]float32{-1.7068,5.8754,-16.239},[3]float32{-0.33248,5.9609,-16.521},[3]float32{0.34709,6.0415,-16.66},[3]float32{1.7506,6.1172,-16.656},[3]float32{3.1541,6.1929,-16.651},[3]float32{3.9361,6.2637,-16.632},[3]float32{5.3095,6.3292,-16.341},[3]float32{6.683,6.3948,-16.05},[3]float32{7.5303,6.4552,-15.835},[3]float32{8.8152,6.5104,-15.268},[3]float32{10.1,6.5655,-14.701},[3]float32{10.963,6.6154,-14.263},[3]float32{12.105,6.6598,-13.444},[3]float32{13.246,6.7043,-12.625},[3]float32{14.067,6.7433,-11.946},[3]float32{15.015,6.7768,-10.909},[3]float32{15.963,6.8103,-9.8721},[3]float32{16.676,6.8383,-8.9532},[3]float32{17.39,6.8608,-7.7425},[3]float32{18.104,6.8832,-6.5319},[3]float32{18.643,6.9001,-5.3901},[3]float32{19.09,6.9113,-4.0578},[3]float32{19.538,6.9226,-2.7254},[3]float32{19.839,6.9282,-1.3963},[3]float32{20.0,6.9282,-4.8986e-15}},
                        },
                    },
                },
                &x3d.Shape{
                    Appearance: &x3d.Appearance{
                        CoreX3DNode: x3d.CoreX3DNode{
                            DEF: stringPtr("ksh_appearance_3"),
                        },
                        Material: &x3d.Material{
                            DiffuseColor: &x3d.SFColor{0.0, 0.0, 1.0},
                        },
                    },
                    Geometry: &x3d.NurbsPatchSurface{
                        Solid: boolPtr(false),
                        UOrder: int32Ptr(4),
                        UDimension: int32Ptr(91),
                        VDimension: int32Ptr(3),
                        UKnot: x3d.MFDouble{0, 0, 0, 0, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0666666666667, 0.0666666666667, 0.0666666666667, 0.1, 0.1, 0.1, 0.133333333333, 0.133333333333, 0.133333333333, 0.166666666667, 0.166666666667, 0.166666666667, 0.2, 0.2, 0.2, 0.233333333333, 0.233333333333, 0.233333333333, 0.266666666667, 0.266666666667, 0.266666666667, 0.3, 0.3, 0.3, 0.333333333333, 0.333333333333, 0.333333333333, 0.366666666667, 0.366666666667, 0.366666666667, 0.4, 0.4, 0.4, 0.433333333333, 0.433333333333, 0.433333333333, 0.466666666667, 0.466666666667, 0.466666666667, 0.5, 0.5, 0.5, 0.533333333333, 0.533333333333, 0.533333333333, 0.566666666667, 0.566666666667, 0.566666666667, 0.6, 0.6, 0.6, 0.633333333333, 0.633333333333, 0.633333333333, 0.666666666667, 0.666666666667, 0.666666666667, 0.7, 0.7, 0.7, 0.733333333333, 0.733333333333, 0.733333333333, 0.766666666667, 0.766666666667, 0.766666666667, 0.8, 0.8, 0.8, 0.833333333333, 0.833333333333, 0.833333333333, 0.866666666667, 0.866666666667, 0.866666666667, 0.9, 0.9, 0.9, 0.933333333333, 0.933333333333, 0.933333333333, 0.966666666667, 0.966666666667, 0.966666666667, 1, 1, 1, 1},
                        VKnot: x3d.MFDouble{0, 0, 0, 1, 1, 1},
                        Weight: x3d.MFDouble{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                        Metadata: &x3d.MetadataSet{
                            &x3d.MetadataString{
                                Name: stringPtr("INSTANT_PLAYER_MODE"),
                                Value: x3d.MFString{"True"},
                            },
                        },
                        ControlPoint: &x3d.Coordinate{
                            Point: &x3d.MFVec3f{[3]float32{26.0,-3.4641,0.0},[3]float32{25.919,-3.6037,1.3963},[3]float32{25.56,-3.7405,4.0054},[3]float32{25.181,-3.8742,5.3524},[3]float32{24.803,-4.0079,6.6994},[3]float32{23.917,-4.1384,9.1201},[3]float32{23.258,-4.2654,10.355},[3]float32{22.6,-4.3925,11.59},[3]float32{21.254,-4.5161,13.716},[3]float32{20.346,-4.6359,14.782},[3]float32{19.438,-4.7557,15.848},[3]float32{17.718,-4.8717,17.591},[3]float32{16.603,-4.9837,18.439},[3]float32{15.488,-5.0957,19.288},[3]float32{13.498,-5.2037,20.586},[3]float32{12.227,-5.3073,21.177},[3]float32{10.956,-5.4109,21.768},[3]float32{8.807,-5.5103,22.587},[3]float32{7.4387,-5.605,22.894},[3]float32{6.0705,-5.6998,23.202},[3]float32{3.8772,-5.79,23.532},[3]float32{2.4743,-5.8754,23.542},[3]float32{1.0714,-5.9609,23.552},[3]float32{-1.0568,-6.0415,23.413},[3]float32{-2.4306,-6.1172,23.125},[3]float32{-3.8043,-6.1929,22.838},[3]float32{-5.7687,-6.2637,22.273},[3]float32{-7.0511,-6.3292,21.701},[3]float32{-8.3335,-6.3948,21.13},[3]float32{-10.051,-6.4552,20.202},[3]float32{-11.185,-6.5104,19.373},[3]float32{-12.318,-6.5655,18.543},[3]float32{-13.727,-6.6154,17.332},[3]float32{-14.66,-6.6598,16.282},[3]float32{-15.594,-6.7043,15.233},[3]float32{-16.653,-6.7433,13.825},[3]float32{-17.346,-6.7768,12.602},[3]float32{-18.039,-6.8103,11.38},[3]float32{-18.73,-6.8383,9.8674},[3]float32{-19.152,-6.8608,8.5269},[3]float32{-19.574,-6.8832,7.1864},[3]float32{-19.903,-6.9001,5.6579},[3]float32{-20.036,-6.9113,4.2587},[3]float32{-20.169,-6.9226,2.8595},[3]float32{-20.161,-6.9282,1.3963},[3]float32{-20.0,-6.9282,2.4493e-15},[3]float32{-19.839,-6.9282,-1.3963},[3]float32{-19.538,-6.9226,-2.7254},[3]float32{-19.09,-6.9113,-4.0578},[3]float32{-18.643,-6.9001,-5.3901},[3]float32{-18.104,-6.8832,-6.5319},[3]float32{-17.39,-6.8608,-7.7425},[3]float32{-16.676,-6.8383,-8.9532},[3]float32{-15.963,-6.8103,-9.8721},[3]float32{-15.015,-6.7768,-10.909},[3]float32{-14.067,-6.7433,-11.946},[3]float32{-13.246,-6.7043,-12.625},[3]float32{-12.105,-6.6598,-13.444},[3]float32{-10.963,-6.6154,-14.263},[3]float32{-10.1,-6.5655,-14.701},[3]float32{-8.8152,-6.5104,-15.268},[3]float32{-7.5303,-6.4552,-15.835},[3]float32{-6.683,-6.3948,-16.05},[3]float32{-5.3095,-6.3292,-16.341},[3]float32{-3.9361,-6.2637,-16.632},[3]float32{-3.1541,-6.1929,-16.651},[3]float32{-1.7506,-6.1172,-16.656},[3]float32{-0.34709,-6.0415,-16.66},[3]float32{0.33248,-5.9609,-16.521},[3]float32{1.7068,-5.8754,-16.239},[3]float32{3.0811,-5.79,-15.957},[3]float32{3.6343,-5.6998,-15.704},[3]float32{4.9219,-5.605,-15.148},[3]float32{6.2096,-5.5103,-14.593},[3]float32{6.6259,-5.4109,-14.269},[3]float32{7.7733,-5.3073,-13.464},[3]float32{8.9208,-5.2037,-12.659},[3]float32{9.2022,-5.0957,-12.307},[3]float32{10.162,-4.9837,-11.286},[3]float32{11.122,-4.8717,-10.266},[3]float32{11.282,-4.7557,-9.9224},[3]float32{12.015,-4.6359,-8.7294},[3]float32{12.748,-4.5161,-7.5364},[3]float32{12.806,-4.3925,-7.2301},[3]float32{13.283,-4.2654,-5.9142},[3]float32{13.761,-4.1384,-4.5982},[3]float32{13.743,-4.0079,-4.3485},[3]float32{13.945,-3.8742,-2.964},[3]float32{14.147,-3.7405,-1.5795},[3]float32{14.081,-3.6037,-1.3963},[3]float32{14.0,-3.4641,-3.429e-15},[3]float32{29.75,5.6292,0.0},[3]float32{29.972,5.4546,1.3963},[3]float32{29.814,5.266,4.9098},[3]float32{29.72,5.0646,6.3172},[3]float32{29.626,4.8632,7.7246},[3]float32{28.681,4.6491,11.241},[3]float32{28.273,4.4236,12.588},[3]float32{27.866,4.1982,13.935},[3]float32{26.133,3.9616,17.261},[3]float32{25.432,3.7155,18.477},[3]float32{24.731,3.4694,19.694},[3]float32{22.26,3.2138,22.636},[3]float32{21.301,2.9507,23.658},[3]float32{20.343,2.6875,24.679},[3]float32{17.236,2.4168,27.062},[3]float32{16.07,2.1406,27.834},[3]float32{14.904,1.8644,28.606},[3]float32{11.308,1.5827,30.283},[3]float32{9.9957,1.2977,30.764},[3]float32{8.6838,1.0127,31.245},[3]float32{4.7789,0.72429,32.11},[3]float32{3.3921,0.4348,32.273},[3]float32{2.0053,0.14531,32.437},[3]float32{-2.0053,-0.14531,32.437},[3]float32{-3.3921,-0.4348,32.273},[3]float32{-4.7789,-0.72429,32.11},[3]float32{-8.6838,-1.0127,31.245},[3]float32{-9.9957,-1.2977,30.764},[3]float32{-11.308,-1.5827,30.283},[3]float32{-14.904,-1.8644,28.606},[3]float32{-16.07,-2.1406,27.834},[3]float32{-17.236,-2.4168,27.062},[3]float32{-20.343,-2.6875,24.679},[3]float32{-21.301,-2.9507,23.658},[3]float32{-22.26,-3.2138,22.636},[3]float32{-24.731,-3.4694,19.694},[3]float32{-25.432,-3.7155,18.477},[3]float32{-26.133,-3.9616,17.261},[3]float32{-27.866,-4.1982,13.935},[3]float32{-28.273,-4.4236,12.588},[3]float32{-28.681,-4.6491,11.241},[3]float32{-29.626,-4.8632,7.7246},[3]float32{-29.72,-5.0646,6.3172},[3]float32{-29.814,-5.266,4.9098},[3]float32{-29.972,-5.4546,1.3963},[3]float32{-29.75,-5.6292,3.6433e-15},[3]float32{-29.528,-5.8037,-1.3963},[3]float32{-28.947,-5.9641,-4.7254},[3]float32{-28.423,-6.1094,-6.0414},[3]float32{-27.898,-6.2548,-7.3574},[3]float32{-26.669,-6.3848,-10.345},[3]float32{-25.87,-6.499,-11.518},[3]float32{-25.071,-6.6133,-12.691},[3]float32{-23.317,-6.7114,-15.215},[3]float32{-22.284,-6.7933,-16.19},[3]float32{-21.251,-6.8752,-17.166},[3]float32{-19.115,-6.9403,-19.143},[3]float32{-17.899,-6.9891,-19.879},[3]float32{-16.682,-7.0379,-20.614},[3]float32{-14.316,-7.0697,-22.003},[3]float32{-12.973,-7.0853,-22.469},[3]float32{-11.629,-7.1008,-22.935},[3]float32{-9.18,-7.0995,-23.735},[3]float32{-7.7704,-7.0823,-23.915},[3]float32{-6.3608,-7.065,-24.095},[3]float32{-3.9621,-7.0313,-24.339},[3]float32{-2.5466,-6.9823,-24.23},[3]float32{-1.1312,-6.9333,-24.12},[3]float32{1.1049,-6.8684,-23.87},[3]float32{2.4679,-6.7893,-23.481},[3]float32{3.8309,-6.7102,-23.091},[3]float32{5.8187,-6.616,-22.427},[3]float32{7.0758,-6.5088,-21.777},[3]float32{8.3329,-6.4016,-21.128},[3]float32{10.015,-6.2805,-20.139},[3]float32{11.119,-6.1477,-19.258},[3]float32{12.223,-6.015,-18.378},[3]float32{13.568,-5.8698,-17.155},[3]float32{14.479,-5.7145,-16.081},[3]float32{15.391,-5.5593,-15.006},[3]float32{16.39,-5.3931,-13.634},[3]float32{17.078,-5.2187,-12.408},[3]float32{17.766,-5.0443,-11.182},[3]float32{18.428,-4.8607,-9.7332},[3]float32{18.871,-4.6708,-8.4017},[3]float32{19.313,-4.4808,-7.0702},[3]float32{19.659,-4.2836,-5.6061},[3]float32{19.842,-4.0819,-4.2176},[3]float32{20.025,-3.8803,-2.8291},[3]float32{20.04,-3.5687,-0.69813},[3]float32{20.0,-3.4641,-4.8986e-15},[3]float32{20.0,6.9282,0.0},[3]float32{20.161,6.9282,1.3963},[3]float32{20.169,6.9226,2.8595},[3]float32{20.036,6.9113,4.2587},[3]float32{19.903,6.9001,5.6579},[3]float32{19.574,6.8832,7.1864},[3]float32{19.152,6.8608,8.5269},[3]float32{18.73,6.8383,9.8674},[3]float32{18.039,6.8103,11.38},[3]float32{17.346,6.7768,12.602},[3]float32{16.653,6.7433,13.825},[3]float32{15.594,6.7043,15.233},[3]float32{14.66,6.6598,16.282},[3]float32{13.727,6.6154,17.332},[3]float32{12.318,6.5655,18.543},[3]float32{11.185,6.5104,19.373},[3]float32{10.051,6.4552,20.202},[3]float32{8.3335,6.3948,21.13},[3]float32{7.0511,6.3292,21.701},[3]float32{5.7687,6.2637,22.273},[3]float32{3.8043,6.1929,22.838},[3]float32{2.4306,6.1172,23.125},[3]float32{1.0568,6.0415,23.413},[3]float32{-1.0714,5.9609,23.552},[3]float32{-2.4743,5.8754,23.542},[3]float32{-3.8772,5.79,23.532},[3]float32{-6.0705,5.6998,23.202},[3]float32{-7.4387,5.605,22.894},[3]float32{-8.807,5.5103,22.587},[3]float32{-10.956,5.4109,21.768},[3]float32{-12.227,5.3073,21.177},[3]float32{-13.498,5.2037,20.586},[3]float32{-15.488,5.0957,19.288},[3]float32{-16.603,4.9837,18.439},[3]float32{-17.718,4.8717,17.591},[3]float32{-19.438,4.7557,15.848},[3]float32{-20.346,4.6359,14.782},[3]float32{-21.254,4.5161,13.716},[3]float32{-22.6,4.3925,11.59},[3]float32{-23.258,4.2654,10.355},[3]float32{-23.917,4.1384,9.1201},[3]float32{-24.803,4.0079,6.6994},[3]float32{-25.181,3.8742,5.3524},[3]float32{-25.56,3.7405,4.0054},[3]float32{-25.919,3.6037,1.3963},[3]float32{-26.0,3.4641,3.1841e-15},[3]float32{-26.081,3.3245,-1.3963},[3]float32{-25.875,3.182,-4.0725},[3]float32{-25.654,3.0371,-5.4529},[3]float32{-25.433,2.8922,-6.8334},[3]float32{-24.652,2.7448,-9.4474},[3]float32{-24.139,2.5954,-10.747},[3]float32{-23.627,2.4459,-12.048},[3]float32{-22.291,2.2943,-14.47},[3]float32{-21.511,2.1409,-15.629},[3]float32{-20.731,1.9876,-16.788},[3]float32{-18.892,1.8325,-18.895},[3]float32{-17.881,1.6761,-19.859},[3]float32{-16.869,1.5196,-20.822},[3]float32{-14.607,1.3618,-22.507},[3]float32{-13.411,1.2031,-23.229},[3]float32{-12.216,1.0443,-23.952},[3]float32{-9.6323,0.88454,-25.127},[3]float32{-8.3095,0.72419,-25.574},[3]float32{-6.9868,0.56385,-26.022},[3]float32{-4.2023,0.40292,-26.625},[3]float32{-2.8143,0.24179,-26.776},[3]float32{-1.4263,0.080662,-26.928},[3]float32{1.4263,-0.080662,-26.928},[3]float32{2.8143,-0.24179,-26.776},[3]float32{4.2023,-0.40292,-26.625},[3]float32{6.9868,-0.56385,-26.022},[3]float32{8.3095,-0.72419,-25.574},[3]float32{9.6323,-0.88454,-25.127},[3]float32{12.216,-1.0443,-23.952},[3]float32{13.411,-1.2031,-23.229},[3]float32{14.607,-1.3618,-22.507},[3]float32{16.869,-1.5196,-20.822},[3]float32{17.881,-1.6761,-19.859},[3]float32{18.892,-1.8325,-18.895},[3]float32{20.731,-1.9876,-16.788},[3]float32{21.511,-2.1409,-15.629},[3]float32{22.291,-2.2943,-14.47},[3]float32{23.627,-2.4459,-12.048},[3]float32{24.139,-2.5954,-10.747},[3]float32{24.652,-2.7448,-9.4474},[3]float32{25.433,-2.8922,-6.8334},[3]float32{25.654,-3.0371,-5.4529},[3]float32{25.875,-3.182,-4.0725},[3]float32{26.081,-3.3245,-1.3963},[3]float32{26.0,-3.4641,-6.3682e-15}},
                        },
                    },
                },
                &x3d.Group{
                        CoreX3DNode: x3d.CoreX3DNode{
                            DEF: stringPtr("triad"),
                        },
                    Children: []x3d.X3DNode{
                        &x3d.Shape{
                            Appearance: &x3d.Appearance{
                                LineProperties: &x3d.LineProperties{
                                    LinewidthScaleFactor: floatPtr(2.0),
                                },
                                Material: &x3d.Material{
                                    EmissiveColor: &x3d.SFColor{1.0, 0.0, 0.0},
                                },
                            },
                            Geometry: &x3d.LineSet{
                                VertexCount: []int32{2},
                                Coord: &x3d.Coordinate{
                                    Point: &x3d.MFVec3f{[3]float32{0.0,0.0,0.0},[3]float32{1.0,0.0,0.0}},
                                },
                            },
                        },
                        &x3d.Shape{
                            Appearance: &x3d.Appearance{
                                LineProperties: &x3d.LineProperties{
                                    LinewidthScaleFactor: floatPtr(2.0),
                                },
                                Material: &x3d.Material{
                                    EmissiveColor: &x3d.SFColor{0.0, 1.0, 0.0},
                                },
                            },
                            Geometry: &x3d.LineSet{
                                VertexCount: []int32{2},
                                Coord: &x3d.Coordinate{
                                    Point: &x3d.MFVec3f{[3]float32{0.0,0.0,0.0},[3]float32{0.0,1.0,0.0}},
                                },
                            },
                        },
                        &x3d.Shape{
                            Appearance: &x3d.Appearance{
                                LineProperties: &x3d.LineProperties{
                                    LinewidthScaleFactor: floatPtr(2.0),
                                },
                                Material: &x3d.Material{
                                    EmissiveColor: &x3d.SFColor{0.0, 0.0, 1.0},
                                },
                            },
                            Geometry: &x3d.LineSet{
                                VertexCount: []int32{2},
                                Coord: &x3d.Coordinate{
                                    Point: &x3d.MFVec3f{[3]float32{0.0,0.0,0.0},[3]float32{0.0,0.0,1.0}},
                                },
                            },
                        },
                    },
                },
            },
        },
    }


	fmt.Println("\n--- Validating the generated scene (internal logic) ---")
	err := sceneRoot.Scene.Validate()
	if err != nil {
		log.Fatalf("Scene validation failed: %v", err)
	}
	fmt.Println("✅ Internal scene validation successful!")
	fmt.Println("\n--- Serializing scene to XML ---")
	output, err := xml.MarshalIndent(sceneRoot, "", "  ")

	if err != nil {
		log.Fatalf("XML Marshaling failed: %v", err)
	}
	/*
	fmt.Println("\n--- Validating XML against X3D 4.0 Schema (using libxml2) ---")
	err = validateXMLWithSchema(output, schemaFilename)
	if err != nil {
		fmt.Printf("--- Invalid Generated XML ---\n%s\n---------------------------\n", string(output))
		log.Fatalf("Schema validation failed for generated XML: %v", err)
	}
	fmt.Println("✅ XML is valid against the X3D 4.0 schema!")
	*/
	filename := "../data/mobiusDon.new.go.x3d"
	file, err := os.OpenFile(filename, os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		fmt.Printf("Error opening file: %v\n", err)
		return
	}
	defer file.Close() // Ensure the file is closed when the function exits

	// Write the string content to the file
	header := "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE X3D PUBLIC \"ISO//Web3D//DTD X3D 4.0//EN\" \"https://www.web3d.org/specifications/x3d-4.0.dtd\">\n"
	_, err = file.WriteString(header)
	if err != nil {
		fmt.Printf("Error writing header to file: %v\n", err)
		return
	}

	_, err = file.Write(output)
	if err != nil {
		fmt.Printf("Error writing bytes to file: %v\n", err)
		return
	}

	fmt.Printf("\n✅ Scene successfully written to %s\n", filename)
	fmt.Printf("   You can view the generated XML below:\n\n%s\n", string(output))
}