load('X3Dautoclass.js');
var ConfigurationProperties = Packages.org.web3d.x3d.jsail.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
      var X3D0 =  new X3DObject().setProfile("Immersive").setVersion("3.2")
      .setHead(new headObject()
        .addMeta(new metaObject().setContent("CloudsProcedural4.x3d").setName("title"))
        .addMeta(new metaObject().setContent("X3D utilizing ecmascript to develop quasi volumetric 3D clouds from png image textured billboard nodes.").setName("description"))
        .addMeta(new metaObject().setContent("Capt Darren W. Murphy").setName("creator"))
        .addMeta(new metaObject().setContent("1 November 2007").setName("created"))
        .addMeta(new metaObject().setContent("14 January 2014").setName("modified"))
        .addMeta(new metaObject().setContent("https://savage.nps.edu/Savage/Environment/Atmosphere/CloudsProcedural4.x3d").setName("identifier"))
        .addMeta(new metaObject().setContent("X3D-Edit, http://www.web3d.org/x3d/content/README.X3D-Edit.html").setName("generator"))
        .addMeta(new metaObject().setContent("../../license.html").setName("license"))
        .addMeta(new metaObject().setContent("fix links").setName("TODO")))
      .setScene(new SceneObject()
        .addComments(new CommentsBlock(' A png image file for the cloud texture must be designated in the ecmascript node. '))
        .addChild(new ViewpointObject().setDescription("Main").setJump(false).setOrientation(Java.to([0,1,0,1.57], Java.type("float[]"))).setPosition(Java.to([50000,1000,42000], Java.type("float[]"))))
        .addChild(new ViewpointObject().setDescription("Light House Tower").setJump(false).setOrientation(Java.to([0,1,0,1.3], Java.type("float[]"))).setPosition(Java.to([45000,1290,44000], Java.type("float[]"))))
        .addChild(new ViewpointObject().setDescription("centerWest").setJump(false).setOrientation(Java.to([0,1,0,2.5], Java.type("float[]"))).setPosition(Java.to([48000,1000,20000], Java.type("float[]"))))
        .addChild(new BackgroundObject().setGroundColor(Java.to([0,0,1], Java.type("float[]"))).setSkyColor(Java.to([0,0,1], Java.type("float[]"))))
        .addChild(new DirectionalLightObject().setAmbientIntensity(1).setDirection(Java.to([-1,0,0], Java.type("float[]"))).setGlobal(true))
        .addChild(new GroupObject().setDEF("Terrain")
          .addChild(new TransformObject().setScale(Java.to([50,50,50], Java.type("float[]"))).setTranslation(Java.to([25000,0,25000], Java.type("float[]")))
            .addChild(new InlineObject().setUrl(Java.to(["MontereyBayLargeMesh.x3d","https://savage.nps.edu/Savage/Environment/Atmosphere/MontereyBayLargeMesh.x3d","MontereyBayLargeMesh.wrl","https://savage.nps.edu/Savage/Environment/Atmosphere/MontereyBayLargeMesh.wrl"], Java.type("java.lang.String[]")))))
          .addChild(new TransformObject().setRotation(Java.to([1,0,0,1.57], Java.type("float[]"))).setTranslation(Java.to([25000,0,25000], Java.type("float[]")))
            .addChild(new ShapeObject()
              .setGeometry(new Rectangle2DObject().setSize(Java.to([77000,55000], Java.type("float[]"))))
              .setAppearance(new AppearanceObject()
                .setTexture(new ImageTextureObject().setUrl(Java.to(["ocean.png","https://savage.nps.edu/Savage/Environment/Atmosphere/ocean.png"], Java.type("java.lang.String[]"))))))))
        .addChild(new GroupObject().setDEF("Placemarks")
          .addChild(new TransformObject().setScale(Java.to([50,50,50], Java.type("float[]"))).setTranslation(Java.to([45000,30,44000], Java.type("float[]")))
            .addChild(new InlineObject().setUrl(Java.to(["Lighthouse.x3d","https://savage.nps.edu/Savage/Environment/Atmosphere/Lighthouse.x3d","Lighthouse.wrl","https://savage.nps.edu/Savage/Environment/Atmosphere/Lighthouse.wrl"], Java.type("java.lang.String[]"))))))
        .addChild(new GroupObject().setDEF("Clouds")
          .addChild(new TransformObject().setDEF("Cumulus"))
          .addChild(new TransformObject().setDEF("Cirrus"))
          .addChild(new TransformObject().setDEF("Fog"))
          .addChild(new ScriptObject().setDEF("PixelScript").setDirectOutput(true)
            .addField(new fieldObject().setType(fieldObject.TYPE_SFNODE).setAccessType(fieldObject.ACCESSTYPE_INITIALIZEONLY).setName("Cumulus")
              .addChild(new TransformObject().setUSE("Cumulus")))
            .addField(new fieldObject().setType(fieldObject.TYPE_SFNODE).setAccessType(fieldObject.ACCESSTYPE_INITIALIZEONLY).setName("Cirrus")
              .addChild(new TransformObject().setUSE("Cirrus")))
            .addField(new fieldObject().setType(fieldObject.TYPE_SFNODE).setAccessType(fieldObject.ACCESSTYPE_INITIALIZEONLY).setName("Fog"))
            .setSourceCode("\n"+
"ecmascript:


function cumulustranslation() // These values designate the boundary location of the cloud
{
	X = 50000*Math.random();          //  X horizontal range
	Y = 1000 + 300*Math.random();	 //  Y vertical base + range
	Z = 50000*Math.random();         // z horizontal range

	randomt = new String(X+' '+Y+' '+Z);\\n\\n	return randomt;\\n	\\n}\\n\\n\\n\\nfunction cumulusscale() // these values scale a cloud within a designated size\\n{\\n\\n	maxscale = 1;\\n\\n	scale = Math.round(9+maxscale*Math.random());\\n	X = 1.5*scale;\\n	Y = scale;\\n	Z = scale;\\n\\n	randomscale = new String(X+' '+Y+' '+Z);\\n\\n	return randomscale;\\n	\\n}\\n\\n\\nfunction cirrustranslation() // These values designate the boundary location of the cloud\\n{\\n	X = 50000*Math.random();          //  X horizontal range\\n	Y = 8000 + 1000*Math.random();	 //  Y vertical base + range\\n	Z = 50000*Math.random();         // z horizontal range\\n\\n	randomt = new String(X+' '+Y+' '+Z);\\n\\n	return randomt;\\n	\\n}\\n\\n\\n\\nfunction cirrusscale() // these values scale a cloud within a designated size\\n{\\n\\n	maxscale = 1;\\n\\n	scale = Math.round(9+maxscale*Math.random());\\n	X = 1.5*scale;\\n	Y = 2*Math.random();\\n	Z = 1.5*scale;\\n\\n	randomscale = new String(X+' '+Y+' '+Z);\\n\\n	return randomscale;\\n	\\n}\\n\\n\\nfunction cumulussectiontranslation() // These random values place another portion of cumulus type cloud\\n{\\n\\n	randomtheta = 6.28319*Math.random();\\n	randomphi = .7854*Math.random();\\n	randomradius = 90 + 5*Math.random();//the first whole number should be close to the sectionradius\\n\\n	X = randomradius*Math.cos(randomtheta)*Math.sin(randomphi);\\n	Z = randomradius*Math.sin(randomtheta)*Math.sin(randomphi);\\n	Y = randomradius*Math.cos(randomphi);\\n	\\n\\n	randomt = new String(X+' '+Y+' '+Z);\\n\\n	return randomt;\\n	\\n}\\n\\nfunction cirrussectiontranslation() // These random values place another portion of cirrus type cloud\\n{\\n\\n	randomtheta = 6.28319*Math.random();\\n	randomphi = .7854*Math.random();\\n	randomradius = 90 + 5*Math.random();//the first whole number should be close to the sectionradius\\n\\n	X = randomradius*Math.cos(randomtheta)*Math.sin(randomphi);\\n	Z = randomradius*Math.sin(randomtheta)*Math.sin(randomphi);\\n	Y = randomradius*Math.cos(randomphi);\\n	\\n\\n	randomt = new String(X+' '+Y+' '+Z);\\n\\n	return randomt;\\n	\\n}\\n\\n\\nfunction rotation() // This random value is for the billboard rotation not used in this script\\n{\\n\\n\\n	radians = 6.28*Math.random();\\n\\n	randomr = new String('0 0 1 ' + radians );\\n	\\n	\\n	return randomr;\\n	\\n}\\n\\nfunction cumulus()\\n{\\n\\nmaxi = 20;  // number of clouds\\n\\nmaxj = 5; // denotes how many portions affecting the size of the cloud\\n\\nmaxk = 8;  // number of billboards indicating cloud density\\n\\nsectionradius = 100;  //radius of individual cloud sections\\n\\n\\n\\n\\n\\nfor (var i=0; i < maxi; i++) \\n{\\n\\n\\n\\nCloudStringA = '	Transform {		\\n' +\\n'    scale '+ cumulusscale() + '               	\\n' +\\n'    translation '+ cumulustranslation() + '    \\n' +    // cloud placement\\n'    children [	                                \\n';\\n\\n\\nCloudStringB = new Array();\\nCloudStringF = new Array();\\n\\n   	for (var j=0; j < maxj; j++)\\n   	{\\n\\n	radius = 0;\\n\\n	CloudStringB[j]= '  Transform {		    	       \\n' +\\n	'    translation '+ cumulussectiontranslation() + '    \\n' +     // section placement\\n	'    children [	                                       \\n';\\n\\n	\\n	CloudStringC = new Array();\\n	image = new String();\\n\\n      		for (var k=1; k < maxk; k++)  // maxk value denotes how many textured billboards make up the cloud \\n      		{\\n\\n\\n		randomtheta = 6.28319*Math.random();\\n		randomphi = 1.57079*Math.random();\\n		radius = radius+(sectionradius/maxk); // radius incremental steps based on billow radius and max billboards\\n\\n		X = radius*Math.cos(randomtheta)*Math.sin(randomphi);\\n		Z = radius*Math.sin(randomtheta)*Math.sin(randomphi);\\n		Y = radius*Math.cos(randomphi);\\n\\n\\n		if (Y <= 30) //cloud shading and lighting control\\n  	{	\\n	image = ' \\\"CloudTexture1_5.png\\\" \\\"https://savage.nps.edu/Savage/Environment/Spheretexture.png\\\" \\n';\\n  	}\\n\\n  		else\\n  	{	\\n	image = ' \\\"CloudTexture1_4.png\\\" \\\"https://savage.nps.edu/Savage/Environment/Spheretexture.png\\\" \\n';\\n  	}\\n\\n	\\n		\\n		Billboardtranslation = new String(X+' '+Y+' '+Z);\\n\\n		CloudStringC[k] = '	Transform {		                \\n' +\\n		'            translation '+ Billboardtranslation   + '          \\n' +     // random billboard placement within radius designated above\\n		'	  children [	                                        \\n' +\\n		'	      Billboard {	                                \\n' +\\n		'	        axisOfRotation 0 0 0	                        \\n' +     // 0 0 0 designates rotation on all axis\\n		'	        children [	                                \\n' +\\n		'	            Transform {	                		\\n' +\\n		'	              rotation  0 0 0 0 		        \\n' +     // a rotation of the individual billboards can be defined\\n		'	              children [	                        \\n' +\\n		'	                  Shape {	                        \\n' +\\n		'	                    appearance Appearance {	        \\n' +\\n		'				material Material {		\\n' +\\n		'				                }  		\\n' +\\n		'	                      texture ImageTexture {	        \\n' +\\n		'	                        url [ ' + image + ' ]           \\n' + \\n		'	                      }	                                \\n' +\\n		'	                    }	                                \\n' +\\n		'	                    geometry IndexedFaceSet {	        \\n' +     // define type of geometry to texture\\n		'	                      coordIndex [ 0, 1, 2, 3 ]	        \\n' +\\n		'			      solid FALSE		        \\n' +\\n		'	                      coord Coordinate {	        \\n' +\\n		'	                        point [ 50 50 0,	        \\n' +     // define size of the geometry. Here 100 meter 2D square.\\n		'	                                50 -50 0,	        \\n' +\\n		'	                               -50 -50 0,	        \\n' +\\n		'	                               -50 50 0 ]	        \\n' +\\n		'	                      }	                                \\n' +\\n		'	                    }	                                \\n' +\\n		'	                  }	                                \\n' +\\n		'	              ]	                                        \\n' +\\n		'	            }	                                        \\n' +\\n		'	       ]	                                        \\n' +\\n		'	   }	                                                \\n' +\\n		'      ]	                                                \\n' +\\n		'     }	                                                        \\n';      \\n		\\n\\n		}\\n\\n	CloudStringD = CloudStringC.join(' ');\\n\\n	\\n	CloudStringE = '   ]	                 \\n' +\\n	'	}	                         \\n';\\n\\n	CloudStringF[j] = CloudStringB[j] + CloudStringD +CloudStringE;\\n\\n\\n	}\\n\\nCloudStringG = CloudStringF.join(' ');\\n\\nCloudStringH = '      ]	                                        \\n' +\\n'     }	                                                        \\n' +\\n'#########################################################      \\n';\\n\\nCloudString = CloudStringA + CloudStringG + CloudStringH;\\n\\n\\n\\nnewNode = Browser.createVrmlFromString(CloudString);\\nCumulus.children[i] = newNode[0];\\n\\n\\n   }\\n\\n}\\n\\nfunction cirrus()\\n\\n{\\n\\nmaxi = 2;  // number of clouds\\n\\nmaxj = 5; // denotes how many portions affecting the size of the cloud\\n\\nmaxk = 8;  // number of billboards indicating cloud density\\n\\nsectionradius = 1000;  //radius of individual cloud sections\\n\\n\\n\\n\\n\\nfor (var i=0; i < maxi; i++) \\n{\\n\\n\\n\\nCloudStringA = '	Transform {		 \\n' +\\n'    scale '+ cirrusscale() + '               	 \\n' +\\n'    translation '+ cirrustranslation() + '      \\n' +    // cloud placement\\n'    children [	                                 \\n';\\n\\n\\nCloudStringB = new Array();\\nCloudStringF = new Array();\\n\\n   	for (var j=0; j < maxj; j++)\\n   	{\\n\\n	radius = 0;\\n\\n	CloudStringB[j]= '  Transform {		    	      \\n' +\\n	'    translation '+ cirrussectiontranslation() + '    \\n' +     // section placement\\n	'    children [	                                      \\n';\\n\\n	\\n	CloudStringC = new Array();\\n\\n      		for (var k=1; k < maxk; k++)  // maxk value denotes how many textured billboards make up the cloud \\n      		{\\n\\n\\n		randomtheta = 6.28319*Math.random();\\n		randomphi = 1.57079*Math.random();\\n		radius = radius+(sectionradius/maxk); // radius incremental steps based on section radius and max billboards\\n\\n		X = radius*Math.cos(randomtheta)*Math.sin(randomphi);\\n		Z = radius*Math.sin(randomtheta)*Math.sin(randomphi);\\n		Y = radius*Math.cos(randomphi);\\n		\\n		Billboardtranslation = new String(X+' '+Y+' '+Z);\\n\\n		CloudStringC[k] = '	Transform {		                \\n' +\\n		'            translation '+ Billboardtranslation   + '          \\n' +     // random billboard placement within radius designated above\\n		'	  children [	                                        \\n' +\\n		'	      Billboard {	                                \\n' +\\n		'	        axisOfRotation 0 0 0	                        \\n' +     // 0 0 0 designates rotation on all axis\\n		'	        children [	                                \\n' +\\n		'	            Transform {	                		\\n' +\\n		'	              rotation '  + rotation() + '	        \\n' +\\n		'	              children [	                        \\n' +\\n		'	                  Shape {	                        \\n' +\\n		'	                    appearance Appearance {	        \\n' +\\n		'			    material Material {			\\n' +\\n		'			    }					\\n' +\\n 		'	                      texture ImageTexture {	        \\n' +\\n		'	                        url [\\\"cloudtexture3.png\\\" \\\"https://savage.nps.edu/Savage/Environment/cloudtexture1_4.png\\\" ] \\n' +\\n		'	                      }	                                \\n' +\\n		'	                    }	                                \\n' +\\n		'	                    geometry IndexedFaceSet {	        \\n' +     // define type of geometry to texture\\n		'	                      coordIndex [ 0, 1, 2, 3 ]	        \\n' +\\n		'			      solid FALSE		        \\n' +\\n		'	                      coord Coordinate {	        \\n' +\\n		'	                        point [ 500 500 0,	        \\n' +     // define size of the geometry. Here 100 meter 2D square.\\n		'	                                500 -500 0,	        \\n' +\\n		'	                               -500 -500 0,	        \\n' +\\n		'	                               -500 500 0 ]	        \\n' +\\n		'	                      }	                                \\n' +\\n		'	                    }	                                \\n' +\\n		'	                  }	                                \\n' +\\n		'	              ]	                                        \\n' +\\n		'	            }	                                        \\n' +\\n		'	       ]	                                        \\n' +\\n		'	   }	                                                \\n' +\\n		'      ]	                                                \\n' +\\n		'     }	                                                        \\n';      \\n		\\n\\n		}\\n\\n	CloudStringD = CloudStringC.join(' ');\\n\\n	CloudStringE = '   ]	                 \\n' +\\n	'	}	                         \\n';\\n\\n	CloudStringF[j] = CloudStringB[j] + CloudStringD +CloudStringE;\\n\\n\\n	}\\n\\nCloudStringG = CloudStringF.join(' ');\\n\\nCloudStringH = '      ]	                                        \\n' +\\n'     }	                                                        \\n' +\\n'#########################################################      \\n';

CloudString = CloudStringA + CloudStringG + CloudStringH;



newNode = Browser.createVrmlFromString(CloudString);
Cirrus.children[i] = newNode[0];

  }

}


function initialize()

{

cumulus();

cirrus();
}\n"+
""))
          .addChild(new DirectionalLightObject().setAmbientIntensity(1).setColor(Java.to([1,0,0], Java.type("float[]"))).setDirection(Java.to([-1,-1,0], Java.type("float[]"))).setGlobal(true))))      ;
    X3D0.toFileX3D("../data/CloudsProcedural4.new.x3d");
